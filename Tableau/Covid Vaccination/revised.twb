<?xml version='1.0' encoding='utf-8' ?>

<!-- build 20212.21.0712.0907                               -->
<workbook original-version='18.1' source-build='2021.2.1 (20212.21.0712.0907)' source-platform='mac' version='18.1' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <document-format-change-manifest>
    <_.fcp.AnimationOnByDefault.true...AnimationOnByDefault />
    <AutoCreateAndUpdateDSDPhoneLayouts />
    <IntuitiveSorting />
    <IntuitiveSorting_SP2 />
    <_.fcp.MarkAnimation.true...MarkAnimation />
    <_.fcp.ObjectModelEncapsulateLegacy.true...ObjectModelEncapsulateLegacy />
    <_.fcp.ObjectModelTableType.true...ObjectModelTableType />
    <_.fcp.SchemaViewerObjectModel.true...SchemaViewerObjectModel />
    <SetMembershipControl />
    <SheetIdentifierTracking />
    <SortTagCleanup />
    <WindowsPersistSimpleIdentifiers />
  </document-format-change-manifest>
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <_.fcp.AnimationOnByDefault.false...style>
    <_.fcp.AnimationOnByDefault.false..._.fcp.MarkAnimation.true...style-rule element='animation'>
      <_.fcp.AnimationOnByDefault.false...format attr='animation-on' value='ao-on' />
    </_.fcp.AnimationOnByDefault.false..._.fcp.MarkAnimation.true...style-rule>
  </_.fcp.AnimationOnByDefault.false...style>
  <datasources>
    <datasource caption='OWID_corrected+' inline='true' name='federated.1pylrsr1mlnqmt1bo4mju0513a1x' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='OWID_corrected' name='textscan.1xrlmwr0zh07gg14s1uvu0l5qztj'>
            <connection class='textscan' directory='/Users/suraj/FIT5147/new/Exploration/new' filename='OWID_corrected.csv' password='' server='' />
          </named-connection>
        </named-connections>
        <_.fcp.ObjectModelEncapsulateLegacy.false...relation connection='textscan.1xrlmwr0zh07gg14s1uvu0l5qztj' name='OWID_corrected.csv' table='[OWID_corrected#csv]' type='table'>
          <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
            <column datatype='string' name='iso_code' ordinal='0' />
            <column datatype='string' name='Country' ordinal='1' />
            <column datatype='date' name='date' ordinal='2' />
            <column datatype='integer' name='total_cases' ordinal='3' />
            <column datatype='real' name='new_cases' ordinal='4' />
            <column datatype='integer' name='total_deaths' ordinal='5' />
            <column datatype='real' name='new_deaths' ordinal='6' />
            <column datatype='real' name='total_cases_per_million' ordinal='7' />
            <column datatype='real' name='new_cases_per_million' ordinal='8' />
            <column datatype='real' name='total_deaths_per_million' ordinal='9' />
            <column datatype='real' name='new_deaths_per_million' ordinal='10' />
            <column datatype='real' name='positive_rate' ordinal='11' />
            <column datatype='integer' name='total_vaccinations' ordinal='12' />
            <column datatype='integer' name='people_vaccinated' ordinal='13' />
            <column datatype='integer' name='people_fully_vaccinated' ordinal='14' />
            <column datatype='integer' name='new_vaccinations' ordinal='15' />
            <column datatype='real' name='total_vaccinations_per_hundred' ordinal='16' />
            <column datatype='real' name='people_vaccinated_per_hundred' ordinal='17' />
            <column datatype='real' name='people_fully_vaccinated_per_hundred' ordinal='18' />
            <column datatype='integer' name='new_vaccinations_per_million' ordinal='19' />
            <column datatype='integer' name='population' ordinal='20' />
            <column datatype='real' name='population_density' ordinal='21' />
            <column datatype='real' name='median_age' ordinal='22' />
            <column datatype='real' name='gdp_per_capita' ordinal='23' />
            <column datatype='real' name='extreme_poverty' ordinal='24' />
            <column datatype='real' name='diabetes_prevalence' ordinal='25' />
            <column datatype='real' name='female_smokers' ordinal='26' />
            <column datatype='real' name='male_smokers' ordinal='27' />
            <column datatype='real' name='handwashing_facilities' ordinal='28' />
            <column datatype='real' name='life_expectancy' ordinal='29' />
            <column datatype='real' name='human_development_index' ordinal='30' />
          </columns>
        </_.fcp.ObjectModelEncapsulateLegacy.false...relation>
        <_.fcp.ObjectModelEncapsulateLegacy.true...relation type='collection'>
          <relation connection='textscan.1xrlmwr0zh07gg14s1uvu0l5qztj' name='OWID_corrected.csv' table='[OWID_corrected#csv]' type='table'>
            <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
              <column datatype='string' name='iso_code' ordinal='0' />
              <column datatype='string' name='Country' ordinal='1' />
              <column datatype='date' name='date' ordinal='2' />
              <column datatype='integer' name='total_cases' ordinal='3' />
              <column datatype='real' name='new_cases' ordinal='4' />
              <column datatype='integer' name='total_deaths' ordinal='5' />
              <column datatype='real' name='new_deaths' ordinal='6' />
              <column datatype='real' name='total_cases_per_million' ordinal='7' />
              <column datatype='real' name='new_cases_per_million' ordinal='8' />
              <column datatype='real' name='total_deaths_per_million' ordinal='9' />
              <column datatype='real' name='new_deaths_per_million' ordinal='10' />
              <column datatype='real' name='positive_rate' ordinal='11' />
              <column datatype='integer' name='total_vaccinations' ordinal='12' />
              <column datatype='integer' name='people_vaccinated' ordinal='13' />
              <column datatype='integer' name='people_fully_vaccinated' ordinal='14' />
              <column datatype='integer' name='new_vaccinations' ordinal='15' />
              <column datatype='real' name='total_vaccinations_per_hundred' ordinal='16' />
              <column datatype='real' name='people_vaccinated_per_hundred' ordinal='17' />
              <column datatype='real' name='people_fully_vaccinated_per_hundred' ordinal='18' />
              <column datatype='integer' name='new_vaccinations_per_million' ordinal='19' />
              <column datatype='integer' name='population' ordinal='20' />
              <column datatype='real' name='population_density' ordinal='21' />
              <column datatype='real' name='median_age' ordinal='22' />
              <column datatype='real' name='gdp_per_capita' ordinal='23' />
              <column datatype='real' name='extreme_poverty' ordinal='24' />
              <column datatype='real' name='diabetes_prevalence' ordinal='25' />
              <column datatype='real' name='female_smokers' ordinal='26' />
              <column datatype='real' name='male_smokers' ordinal='27' />
              <column datatype='real' name='handwashing_facilities' ordinal='28' />
              <column datatype='real' name='life_expectancy' ordinal='29' />
              <column datatype='real' name='human_development_index' ordinal='30' />
            </columns>
          </relation>
          <relation connection='textscan.1xrlmwr0zh07gg14s1uvu0l5qztj' name='WHO-COVID-19-global-data.csv' table='[WHO-COVID-19-global-data#csv]' type='table'>
            <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
              <column datatype='date' name='Date_reported' ordinal='0' />
              <column datatype='string' name='Country_code' ordinal='1' />
              <column datatype='string' name='Country' ordinal='2' />
              <column datatype='string' name='WHO_region' ordinal='3' />
              <column datatype='integer' name='New_cases' ordinal='4' />
              <column datatype='integer' name='Cumulative_cases' ordinal='5' />
              <column datatype='integer' name='New_deaths' ordinal='6' />
              <column datatype='integer' name='Cumulative_deaths' ordinal='7' />
            </columns>
          </relation>
          <relation connection='textscan.1xrlmwr0zh07gg14s1uvu0l5qztj' name='country-coordinates-world.csv1' table='[country-coordinates-world#csv]' type='table'>
            <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
              <column datatype='real' name='latitude' ordinal='0' />
              <column datatype='real' name='longitude' ordinal='1' />
              <column datatype='string' name='Country' ordinal='2' />
            </columns>
          </relation>
          <relation connection='textscan.1xrlmwr0zh07gg14s1uvu0l5qztj' name='country_wise_vaccine_corrected.csv' table='[country_wise_vaccine_corrected#csv]' type='table'>
            <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
              <column datatype='integer' name='F1' ordinal='0' />
              <column datatype='string' name='COUNTRY' ordinal='1' />
              <column datatype='string' name='ISO3' ordinal='2' />
              <column datatype='string' name='WHO_REGION' ordinal='3' />
              <column datatype='string' name='DATA_SOURCE' ordinal='4' />
              <column datatype='date' name='DATE_UPDATED' ordinal='5' />
              <column datatype='integer' name='TOTAL_VACCINATIONS' ordinal='6' />
              <column datatype='real' name='PERSONS_VACCINATED_1PLUS_DOSE' ordinal='7' />
              <column datatype='real' name='TOTAL_VACCINATIONS_PER100' ordinal='8' />
              <column datatype='real' name='PERSONS_VACCINATED_1PLUS_DOSE_PER100' ordinal='9' />
              <column datatype='real' name='PERSONS_FULLY_VACCINATED' ordinal='10' />
              <column datatype='real' name='PERSONS_FULLY_VACCINATED_PER100' ordinal='11' />
              <column datatype='date' name='FIRST_VACCINE_DATE' ordinal='12' />
              <column datatype='real' name='NUMBER_VACCINES_TYPES_USED' ordinal='13' />
              <column datatype='string' name='vac_0' ordinal='14' />
              <column datatype='string' name='vac_1' ordinal='15' />
              <column datatype='string' name='vac_2' ordinal='16' />
              <column datatype='string' name='vac_3' ordinal='17' />
              <column datatype='string' name='vac_4' ordinal='18' />
              <column datatype='string' name='vac_5' ordinal='19' />
              <column datatype='string' name='vac_6' ordinal='20' />
              <column datatype='string' name='vac_7' ordinal='21' />
              <column datatype='string' name='vac_8' ordinal='22' />
              <column datatype='string' name='vac_ID' ordinal='23' />
            </columns>
          </relation>
          <relation connection='textscan.1xrlmwr0zh07gg14s1uvu0l5qztj' name='country_wise_vaccine_corrected.csv1' table='[country_wise_vaccine_corrected#csv]' type='table'>
            <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
              <column datatype='integer' name='F1' ordinal='0' />
              <column datatype='string' name='COUNTRY' ordinal='1' />
              <column datatype='string' name='ISO3' ordinal='2' />
              <column datatype='string' name='WHO_REGION' ordinal='3' />
              <column datatype='string' name='DATA_SOURCE' ordinal='4' />
              <column datatype='date' name='DATE_UPDATED' ordinal='5' />
              <column datatype='integer' name='TOTAL_VACCINATIONS' ordinal='6' />
              <column datatype='real' name='PERSONS_VACCINATED_1PLUS_DOSE' ordinal='7' />
              <column datatype='real' name='TOTAL_VACCINATIONS_PER100' ordinal='8' />
              <column datatype='real' name='PERSONS_VACCINATED_1PLUS_DOSE_PER100' ordinal='9' />
              <column datatype='real' name='PERSONS_FULLY_VACCINATED' ordinal='10' />
              <column datatype='real' name='PERSONS_FULLY_VACCINATED_PER100' ordinal='11' />
              <column datatype='date' name='FIRST_VACCINE_DATE' ordinal='12' />
              <column datatype='real' name='NUMBER_VACCINES_TYPES_USED' ordinal='13' />
              <column datatype='string' name='vac_0' ordinal='14' />
              <column datatype='string' name='vac_1' ordinal='15' />
              <column datatype='string' name='vac_2' ordinal='16' />
              <column datatype='string' name='vac_3' ordinal='17' />
              <column datatype='string' name='vac_4' ordinal='18' />
              <column datatype='string' name='vac_5' ordinal='19' />
              <column datatype='string' name='vac_6' ordinal='20' />
              <column datatype='string' name='vac_7' ordinal='21' />
              <column datatype='string' name='vac_8' ordinal='22' />
              <column datatype='string' name='vac_ID' ordinal='23' />
            </columns>
          </relation>
          <relation connection='textscan.1xrlmwr0zh07gg14s1uvu0l5qztj' name='covid-vaccine-doses-by-manufacturer-revised.csv' table='[covid-vaccine-doses-by-manufacturer-revised#csv]' type='table'>
            <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
              <column datatype='string' name='Entity' ordinal='0' />
              <column datatype='string' name='Code' ordinal='1' />
              <column datatype='date' name='Day' ordinal='2' />
              <column datatype='integer' name='Pfizer' ordinal='3' />
              <column datatype='integer' name='Moderna' ordinal='4' />
              <column datatype='integer' name='AstraZeneca' ordinal='5' />
              <column datatype='integer' name='Janssen' ordinal='6' />
              <column datatype='integer' name='Sputnik V' ordinal='7' />
              <column datatype='integer' name='Sinovac' ordinal='8' />
              <column datatype='integer' name='Sinopharm' ordinal='9' />
              <column datatype='integer' name='CanSino' ordinal='10' />
            </columns>
          </relation>
          <relation connection='textscan.1xrlmwr0zh07gg14s1uvu0l5qztj' name='income_groups.csv' table='[income_groups#csv]' type='table'>
            <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
              <column datatype='string' name='Country' ordinal='0' />
              <column datatype='string' name='Code' ordinal='1' />
              <column datatype='string' name='Income group' ordinal='2' />
              <column datatype='integer' name='Year' ordinal='3' />
            </columns>
          </relation>
          <relation connection='textscan.1xrlmwr0zh07gg14s1uvu0l5qztj' name='phsm-severity-data.csv' table='[phsm-severity-data#csv]' type='table'>
            <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
              <column datatype='date' name='DATE_START' ordinal='0' />
              <column datatype='string' name='COUNTRY' ordinal='1' />
              <column datatype='string' name='ISO3' ordinal='2' />
              <column datatype='string' name='WHO_REGION' ordinal='3' />
              <column datatype='integer' name='MASKS' ordinal='4' />
              <column datatype='integer' name='TRAVEL' ordinal='5' />
              <column datatype='integer' name='GATHERINGS' ordinal='6' />
              <column datatype='integer' name='SCHOOLS' ordinal='7' />
              <column datatype='integer' name='BUSINESSES' ordinal='8' />
              <column datatype='integer' name='MOVEMENTS' ordinal='9' />
              <column datatype='integer' name='GLOBAL_INDEX' ordinal='10' />
              <column datatype='string' name='MEASURES_IN_PLACE' ordinal='11' />
            </columns>
          </relation>
          <relation connection='textscan.1xrlmwr0zh07gg14s1uvu0l5qztj' name='vaccination-data including type.csv' table='[vaccination-data including type#csv]' type='table'>
            <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
              <column datatype='string' name='COUNTRY' ordinal='0' />
              <column datatype='string' name='ISO3' ordinal='1' />
              <column datatype='string' name='WHO_REGION' ordinal='2' />
              <column datatype='string' name='DATA_SOURCE' ordinal='3' />
              <column datatype='date' name='DATE_UPDATED' ordinal='4' />
              <column datatype='integer' name='TOTAL_VACCINATIONS' ordinal='5' />
              <column datatype='integer' name='PERSONS_VACCINATED_1PLUS_DOSE' ordinal='6' />
              <column datatype='real' name='TOTAL_VACCINATIONS_PER100' ordinal='7' />
              <column datatype='real' name='PERSONS_VACCINATED_1PLUS_DOSE_PER100' ordinal='8' />
              <column datatype='integer' name='PERSONS_FULLY_VACCINATED' ordinal='9' />
              <column datatype='real' name='PERSONS_FULLY_VACCINATED_PER100' ordinal='10' />
              <column datatype='string' name='VACCINES_USED' ordinal='11' />
              <column datatype='date' name='FIRST_VACCINE_DATE' ordinal='12' />
              <column datatype='integer' name='NUMBER_VACCINES_TYPES_USED' ordinal='13' />
            </columns>
          </relation>
          <relation connection='textscan.1xrlmwr0zh07gg14s1uvu0l5qztj' name='vaccination_startdate.csv' table='[vaccination_startdate#csv]' type='table'>
            <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
              <column datatype='string' name='ISO3' ordinal='0' />
              <column datatype='string' name='VACCINE_NAME' ordinal='1' />
              <column datatype='string' name='PRODUCT_NAME' ordinal='2' />
              <column datatype='string' name='COMPANY_NAME' ordinal='3' />
              <column datatype='date' name='AUTHORIZATION_DATE' ordinal='4' />
              <column datatype='date' name='START_DATE' ordinal='5' />
              <column datatype='string' name='END_DATE' ordinal='6' />
              <column datatype='string' name='COMMENT' ordinal='7' />
              <column datatype='string' name='DATA_SOURCE' ordinal='8' />
            </columns>
          </relation>
          <relation connection='textscan.1xrlmwr0zh07gg14s1uvu0l5qztj' name='vaccinations-by-age-group.csv' table='[vaccinations-by-age-group#csv]' type='table'>
            <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
              <column datatype='string' name='location' ordinal='0' />
              <column datatype='date' name='date' ordinal='1' />
              <column datatype='string' name='age_group' ordinal='2' />
              <column datatype='real' name='people_vaccinated_per_hundred' ordinal='3' />
              <column datatype='real' name='people_fully_vaccinated_per_hundred' ordinal='4' />
            </columns>
          </relation>
        </_.fcp.ObjectModelEncapsulateLegacy.true...relation>
        <cols>
          <map key='[AUTHORIZATION_DATE]' value='[vaccination_startdate.csv].[AUTHORIZATION_DATE]' />
          <map key='[AstraZeneca]' value='[covid-vaccine-doses-by-manufacturer-revised.csv].[AstraZeneca]' />
          <map key='[BUSINESSES]' value='[phsm-severity-data.csv].[BUSINESSES]' />
          <map key='[COMMENT]' value='[vaccination_startdate.csv].[COMMENT]' />
          <map key='[COMPANY_NAME]' value='[vaccination_startdate.csv].[COMPANY_NAME]' />
          <map key='[COUNTRY (country_wise_vaccine_corrected.csv1)]' value='[country_wise_vaccine_corrected.csv1].[COUNTRY]' />
          <map key='[COUNTRY (phsm-severity-data.csv)]' value='[phsm-severity-data.csv].[COUNTRY]' />
          <map key='[COUNTRY (vaccination-data including type.csv)]' value='[vaccination-data including type.csv].[COUNTRY]' />
          <map key='[COUNTRY]' value='[country_wise_vaccine_corrected.csv].[COUNTRY]' />
          <map key='[CanSino]' value='[covid-vaccine-doses-by-manufacturer-revised.csv].[CanSino]' />
          <map key='[Code (covid-vaccine-doses-by-manufacturer-revised.csv)]' value='[covid-vaccine-doses-by-manufacturer-revised.csv].[Code]' />
          <map key='[Code]' value='[income_groups.csv].[Code]' />
          <map key='[Country (WHO-COVID-19-global-data.csv)]' value='[WHO-COVID-19-global-data.csv].[Country]' />
          <map key='[Country (country-coordinates-world.csv1)]' value='[country-coordinates-world.csv1].[Country]' />
          <map key='[Country (income_groups.csv)]' value='[income_groups.csv].[Country]' />
          <map key='[Country]' value='[OWID_corrected.csv].[Country]' />
          <map key='[Country_code]' value='[WHO-COVID-19-global-data.csv].[Country_code]' />
          <map key='[Cumulative_cases]' value='[WHO-COVID-19-global-data.csv].[Cumulative_cases]' />
          <map key='[Cumulative_deaths]' value='[WHO-COVID-19-global-data.csv].[Cumulative_deaths]' />
          <map key='[DATA_SOURCE (country_wise_vaccine_corrected.csv)]' value='[country_wise_vaccine_corrected.csv].[DATA_SOURCE]' />
          <map key='[DATA_SOURCE (country_wise_vaccine_corrected.csv1)]' value='[country_wise_vaccine_corrected.csv1].[DATA_SOURCE]' />
          <map key='[DATA_SOURCE (vaccination_startdate.csv)]' value='[vaccination_startdate.csv].[DATA_SOURCE]' />
          <map key='[DATA_SOURCE]' value='[vaccination-data including type.csv].[DATA_SOURCE]' />
          <map key='[DATE_START]' value='[phsm-severity-data.csv].[DATE_START]' />
          <map key='[DATE_UPDATED (country_wise_vaccine_corrected.csv)]' value='[country_wise_vaccine_corrected.csv].[DATE_UPDATED]' />
          <map key='[DATE_UPDATED (country_wise_vaccine_corrected.csv1)]' value='[country_wise_vaccine_corrected.csv1].[DATE_UPDATED]' />
          <map key='[DATE_UPDATED]' value='[vaccination-data including type.csv].[DATE_UPDATED]' />
          <map key='[Date_reported]' value='[WHO-COVID-19-global-data.csv].[Date_reported]' />
          <map key='[Day]' value='[covid-vaccine-doses-by-manufacturer-revised.csv].[Day]' />
          <map key='[END_DATE]' value='[vaccination_startdate.csv].[END_DATE]' />
          <map key='[Entity]' value='[covid-vaccine-doses-by-manufacturer-revised.csv].[Entity]' />
          <map key='[F1 (country_wise_vaccine_corrected.csv1)]' value='[country_wise_vaccine_corrected.csv1].[F1]' />
          <map key='[F1]' value='[country_wise_vaccine_corrected.csv].[F1]' />
          <map key='[FIRST_VACCINE_DATE (country_wise_vaccine_corrected.csv)]' value='[country_wise_vaccine_corrected.csv].[FIRST_VACCINE_DATE]' />
          <map key='[FIRST_VACCINE_DATE (country_wise_vaccine_corrected.csv1)]' value='[country_wise_vaccine_corrected.csv1].[FIRST_VACCINE_DATE]' />
          <map key='[FIRST_VACCINE_DATE]' value='[vaccination-data including type.csv].[FIRST_VACCINE_DATE]' />
          <map key='[GATHERINGS]' value='[phsm-severity-data.csv].[GATHERINGS]' />
          <map key='[GLOBAL_INDEX]' value='[phsm-severity-data.csv].[GLOBAL_INDEX]' />
          <map key='[ISO3 (country_wise_vaccine_corrected.csv)]' value='[country_wise_vaccine_corrected.csv].[ISO3]' />
          <map key='[ISO3 (country_wise_vaccine_corrected.csv1)]' value='[country_wise_vaccine_corrected.csv1].[ISO3]' />
          <map key='[ISO3 (vaccination-data including type.csv)]' value='[vaccination-data including type.csv].[ISO3]' />
          <map key='[ISO3 (vaccination_startdate.csv)]' value='[vaccination_startdate.csv].[ISO3]' />
          <map key='[ISO3]' value='[phsm-severity-data.csv].[ISO3]' />
          <map key='[Income group]' value='[income_groups.csv].[Income group]' />
          <map key='[Janssen]' value='[covid-vaccine-doses-by-manufacturer-revised.csv].[Janssen]' />
          <map key='[MASKS]' value='[phsm-severity-data.csv].[MASKS]' />
          <map key='[MEASURES_IN_PLACE]' value='[phsm-severity-data.csv].[MEASURES_IN_PLACE]' />
          <map key='[MOVEMENTS]' value='[phsm-severity-data.csv].[MOVEMENTS]' />
          <map key='[Moderna]' value='[covid-vaccine-doses-by-manufacturer-revised.csv].[Moderna]' />
          <map key='[NUMBER_VACCINES_TYPES_USED (country_wise_vaccine_corrected.csv)]' value='[country_wise_vaccine_corrected.csv].[NUMBER_VACCINES_TYPES_USED]' />
          <map key='[NUMBER_VACCINES_TYPES_USED (country_wise_vaccine_corrected.csv1)]' value='[country_wise_vaccine_corrected.csv1].[NUMBER_VACCINES_TYPES_USED]' />
          <map key='[NUMBER_VACCINES_TYPES_USED]' value='[vaccination-data including type.csv].[NUMBER_VACCINES_TYPES_USED]' />
          <map key='[New_cases]' value='[WHO-COVID-19-global-data.csv].[New_cases]' />
          <map key='[New_deaths]' value='[WHO-COVID-19-global-data.csv].[New_deaths]' />
          <map key='[PERSONS_FULLY_VACCINATED (country_wise_vaccine_corrected.csv)]' value='[country_wise_vaccine_corrected.csv].[PERSONS_FULLY_VACCINATED]' />
          <map key='[PERSONS_FULLY_VACCINATED (country_wise_vaccine_corrected.csv1)]' value='[country_wise_vaccine_corrected.csv1].[PERSONS_FULLY_VACCINATED]' />
          <map key='[PERSONS_FULLY_VACCINATED]' value='[vaccination-data including type.csv].[PERSONS_FULLY_VACCINATED]' />
          <map key='[PERSONS_FULLY_VACCINATED_PER100 (country_wise_vaccine_corrected.csv)]' value='[country_wise_vaccine_corrected.csv].[PERSONS_FULLY_VACCINATED_PER100]' />
          <map key='[PERSONS_FULLY_VACCINATED_PER100 (country_wise_vaccine_corrected.csv1)]' value='[country_wise_vaccine_corrected.csv1].[PERSONS_FULLY_VACCINATED_PER100]' />
          <map key='[PERSONS_FULLY_VACCINATED_PER100]' value='[vaccination-data including type.csv].[PERSONS_FULLY_VACCINATED_PER100]' />
          <map key='[PERSONS_VACCINATED_1PLUS_DOSE (country_wise_vaccine_corrected.csv)]' value='[country_wise_vaccine_corrected.csv].[PERSONS_VACCINATED_1PLUS_DOSE]' />
          <map key='[PERSONS_VACCINATED_1PLUS_DOSE (country_wise_vaccine_corrected.csv1)]' value='[country_wise_vaccine_corrected.csv1].[PERSONS_VACCINATED_1PLUS_DOSE]' />
          <map key='[PERSONS_VACCINATED_1PLUS_DOSE]' value='[vaccination-data including type.csv].[PERSONS_VACCINATED_1PLUS_DOSE]' />
          <map key='[PERSONS_VACCINATED_1PLUS_DOSE_PER100 (country_wise_vaccine_corrected.csv)]' value='[country_wise_vaccine_corrected.csv].[PERSONS_VACCINATED_1PLUS_DOSE_PER100]' />
          <map key='[PERSONS_VACCINATED_1PLUS_DOSE_PER100 (country_wise_vaccine_corrected.csv1)]' value='[country_wise_vaccine_corrected.csv1].[PERSONS_VACCINATED_1PLUS_DOSE_PER100]' />
          <map key='[PERSONS_VACCINATED_1PLUS_DOSE_PER100]' value='[vaccination-data including type.csv].[PERSONS_VACCINATED_1PLUS_DOSE_PER100]' />
          <map key='[PRODUCT_NAME]' value='[vaccination_startdate.csv].[PRODUCT_NAME]' />
          <map key='[Pfizer]' value='[covid-vaccine-doses-by-manufacturer-revised.csv].[Pfizer]' />
          <map key='[SCHOOLS]' value='[phsm-severity-data.csv].[SCHOOLS]' />
          <map key='[START_DATE]' value='[vaccination_startdate.csv].[START_DATE]' />
          <map key='[Sinopharm]' value='[covid-vaccine-doses-by-manufacturer-revised.csv].[Sinopharm]' />
          <map key='[Sinovac]' value='[covid-vaccine-doses-by-manufacturer-revised.csv].[Sinovac]' />
          <map key='[Sputnik V]' value='[covid-vaccine-doses-by-manufacturer-revised.csv].[Sputnik V]' />
          <map key='[TOTAL_VACCINATIONS (country_wise_vaccine_corrected.csv)]' value='[country_wise_vaccine_corrected.csv].[TOTAL_VACCINATIONS]' />
          <map key='[TOTAL_VACCINATIONS (country_wise_vaccine_corrected.csv1)]' value='[country_wise_vaccine_corrected.csv1].[TOTAL_VACCINATIONS]' />
          <map key='[TOTAL_VACCINATIONS]' value='[vaccination-data including type.csv].[TOTAL_VACCINATIONS]' />
          <map key='[TOTAL_VACCINATIONS_PER100 (country_wise_vaccine_corrected.csv)]' value='[country_wise_vaccine_corrected.csv].[TOTAL_VACCINATIONS_PER100]' />
          <map key='[TOTAL_VACCINATIONS_PER100 (country_wise_vaccine_corrected.csv1)]' value='[country_wise_vaccine_corrected.csv1].[TOTAL_VACCINATIONS_PER100]' />
          <map key='[TOTAL_VACCINATIONS_PER100]' value='[vaccination-data including type.csv].[TOTAL_VACCINATIONS_PER100]' />
          <map key='[TRAVEL]' value='[phsm-severity-data.csv].[TRAVEL]' />
          <map key='[VACCINES_USED]' value='[vaccination-data including type.csv].[VACCINES_USED]' />
          <map key='[VACCINE_NAME]' value='[vaccination_startdate.csv].[VACCINE_NAME]' />
          <map key='[WHO_REGION (country_wise_vaccine_corrected.csv)]' value='[country_wise_vaccine_corrected.csv].[WHO_REGION]' />
          <map key='[WHO_REGION (country_wise_vaccine_corrected.csv1)]' value='[country_wise_vaccine_corrected.csv1].[WHO_REGION]' />
          <map key='[WHO_REGION (vaccination-data including type.csv)]' value='[vaccination-data including type.csv].[WHO_REGION]' />
          <map key='[WHO_REGION]' value='[phsm-severity-data.csv].[WHO_REGION]' />
          <map key='[WHO_region]' value='[WHO-COVID-19-global-data.csv].[WHO_region]' />
          <map key='[Year]' value='[income_groups.csv].[Year]' />
          <map key='[age_group]' value='[vaccinations-by-age-group.csv].[age_group]' />
          <map key='[date (vaccinations-by-age-group.csv)]' value='[vaccinations-by-age-group.csv].[date]' />
          <map key='[date]' value='[OWID_corrected.csv].[date]' />
          <map key='[diabetes_prevalence]' value='[OWID_corrected.csv].[diabetes_prevalence]' />
          <map key='[extreme_poverty]' value='[OWID_corrected.csv].[extreme_poverty]' />
          <map key='[female_smokers]' value='[OWID_corrected.csv].[female_smokers]' />
          <map key='[gdp_per_capita]' value='[OWID_corrected.csv].[gdp_per_capita]' />
          <map key='[handwashing_facilities]' value='[OWID_corrected.csv].[handwashing_facilities]' />
          <map key='[human_development_index]' value='[OWID_corrected.csv].[human_development_index]' />
          <map key='[iso_code]' value='[OWID_corrected.csv].[iso_code]' />
          <map key='[latitude (country-coordinates-world.csv1)]' value='[country-coordinates-world.csv1].[latitude]' />
          <map key='[life_expectancy]' value='[OWID_corrected.csv].[life_expectancy]' />
          <map key='[location]' value='[vaccinations-by-age-group.csv].[location]' />
          <map key='[longitude (country-coordinates-world.csv1)]' value='[country-coordinates-world.csv1].[longitude]' />
          <map key='[male_smokers]' value='[OWID_corrected.csv].[male_smokers]' />
          <map key='[median_age]' value='[OWID_corrected.csv].[median_age]' />
          <map key='[new_cases]' value='[OWID_corrected.csv].[new_cases]' />
          <map key='[new_cases_per_million]' value='[OWID_corrected.csv].[new_cases_per_million]' />
          <map key='[new_deaths]' value='[OWID_corrected.csv].[new_deaths]' />
          <map key='[new_deaths_per_million]' value='[OWID_corrected.csv].[new_deaths_per_million]' />
          <map key='[new_vaccinations]' value='[OWID_corrected.csv].[new_vaccinations]' />
          <map key='[new_vaccinations_per_million]' value='[OWID_corrected.csv].[new_vaccinations_per_million]' />
          <map key='[people_fully_vaccinated]' value='[OWID_corrected.csv].[people_fully_vaccinated]' />
          <map key='[people_fully_vaccinated_per_hundred (vaccinations-by-age-group.csv)]' value='[vaccinations-by-age-group.csv].[people_fully_vaccinated_per_hundred]' />
          <map key='[people_fully_vaccinated_per_hundred]' value='[OWID_corrected.csv].[people_fully_vaccinated_per_hundred]' />
          <map key='[people_vaccinated]' value='[OWID_corrected.csv].[people_vaccinated]' />
          <map key='[people_vaccinated_per_hundred (vaccinations-by-age-group.csv)]' value='[vaccinations-by-age-group.csv].[people_vaccinated_per_hundred]' />
          <map key='[people_vaccinated_per_hundred]' value='[OWID_corrected.csv].[people_vaccinated_per_hundred]' />
          <map key='[population]' value='[OWID_corrected.csv].[population]' />
          <map key='[population_density]' value='[OWID_corrected.csv].[population_density]' />
          <map key='[positive_rate]' value='[OWID_corrected.csv].[positive_rate]' />
          <map key='[total_cases]' value='[OWID_corrected.csv].[total_cases]' />
          <map key='[total_cases_per_million]' value='[OWID_corrected.csv].[total_cases_per_million]' />
          <map key='[total_deaths]' value='[OWID_corrected.csv].[total_deaths]' />
          <map key='[total_deaths_per_million]' value='[OWID_corrected.csv].[total_deaths_per_million]' />
          <map key='[total_vaccinations]' value='[OWID_corrected.csv].[total_vaccinations]' />
          <map key='[total_vaccinations_per_hundred]' value='[OWID_corrected.csv].[total_vaccinations_per_hundred]' />
          <map key='[vac_0 (country_wise_vaccine_corrected.csv1)]' value='[country_wise_vaccine_corrected.csv1].[vac_0]' />
          <map key='[vac_0]' value='[country_wise_vaccine_corrected.csv].[vac_0]' />
          <map key='[vac_1 (country_wise_vaccine_corrected.csv1)]' value='[country_wise_vaccine_corrected.csv1].[vac_1]' />
          <map key='[vac_1]' value='[country_wise_vaccine_corrected.csv].[vac_1]' />
          <map key='[vac_2 (country_wise_vaccine_corrected.csv1)]' value='[country_wise_vaccine_corrected.csv1].[vac_2]' />
          <map key='[vac_2]' value='[country_wise_vaccine_corrected.csv].[vac_2]' />
          <map key='[vac_3 (country_wise_vaccine_corrected.csv1)]' value='[country_wise_vaccine_corrected.csv1].[vac_3]' />
          <map key='[vac_3]' value='[country_wise_vaccine_corrected.csv].[vac_3]' />
          <map key='[vac_4 (country_wise_vaccine_corrected.csv1)]' value='[country_wise_vaccine_corrected.csv1].[vac_4]' />
          <map key='[vac_4]' value='[country_wise_vaccine_corrected.csv].[vac_4]' />
          <map key='[vac_5 (country_wise_vaccine_corrected.csv1)]' value='[country_wise_vaccine_corrected.csv1].[vac_5]' />
          <map key='[vac_5]' value='[country_wise_vaccine_corrected.csv].[vac_5]' />
          <map key='[vac_6 (country_wise_vaccine_corrected.csv1)]' value='[country_wise_vaccine_corrected.csv1].[vac_6]' />
          <map key='[vac_6]' value='[country_wise_vaccine_corrected.csv].[vac_6]' />
          <map key='[vac_7 (country_wise_vaccine_corrected.csv1)]' value='[country_wise_vaccine_corrected.csv1].[vac_7]' />
          <map key='[vac_7]' value='[country_wise_vaccine_corrected.csv].[vac_7]' />
          <map key='[vac_8 (country_wise_vaccine_corrected.csv1)]' value='[country_wise_vaccine_corrected.csv1].[vac_8]' />
          <map key='[vac_8]' value='[country_wise_vaccine_corrected.csv].[vac_8]' />
          <map key='[vac_ID (country_wise_vaccine_corrected.csv1)]' value='[country_wise_vaccine_corrected.csv1].[vac_ID]' />
          <map key='[vac_ID]' value='[country_wise_vaccine_corrected.csv].[vac_ID]' />
        </cols>
        <metadata-records>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[OWID_corrected.csv]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='character-set'>&quot;UTF-8&quot;</attribute>
              <attribute datatype='string' name='collation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='field-delimiter'>&quot;,&quot;</attribute>
              <attribute datatype='string' name='header-row'>&quot;true&quot;</attribute>
              <attribute datatype='string' name='locale'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='single-char'>&quot;&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>iso_code</remote-name>
            <remote-type>129</remote-type>
            <local-name>[iso_code]</local-name>
            <parent-name>[OWID_corrected.csv]</parent-name>
            <remote-alias>iso_code</remote-alias>
            <ordinal>0</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Country</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Country]</local-name>
            <parent-name>[OWID_corrected.csv]</parent-name>
            <remote-alias>Country</remote-alias>
            <ordinal>1</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>date</remote-name>
            <remote-type>133</remote-type>
            <local-name>[date]</local-name>
            <parent-name>[OWID_corrected.csv]</parent-name>
            <remote-alias>date</remote-alias>
            <ordinal>2</ordinal>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>total_cases</remote-name>
            <remote-type>20</remote-type>
            <local-name>[total_cases]</local-name>
            <parent-name>[OWID_corrected.csv]</parent-name>
            <remote-alias>total_cases</remote-alias>
            <ordinal>3</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>new_cases</remote-name>
            <remote-type>5</remote-type>
            <local-name>[new_cases]</local-name>
            <parent-name>[OWID_corrected.csv]</parent-name>
            <remote-alias>new_cases</remote-alias>
            <ordinal>4</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>total_deaths</remote-name>
            <remote-type>20</remote-type>
            <local-name>[total_deaths]</local-name>
            <parent-name>[OWID_corrected.csv]</parent-name>
            <remote-alias>total_deaths</remote-alias>
            <ordinal>5</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>new_deaths</remote-name>
            <remote-type>5</remote-type>
            <local-name>[new_deaths]</local-name>
            <parent-name>[OWID_corrected.csv]</parent-name>
            <remote-alias>new_deaths</remote-alias>
            <ordinal>6</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>total_cases_per_million</remote-name>
            <remote-type>5</remote-type>
            <local-name>[total_cases_per_million]</local-name>
            <parent-name>[OWID_corrected.csv]</parent-name>
            <remote-alias>total_cases_per_million</remote-alias>
            <ordinal>7</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>new_cases_per_million</remote-name>
            <remote-type>5</remote-type>
            <local-name>[new_cases_per_million]</local-name>
            <parent-name>[OWID_corrected.csv]</parent-name>
            <remote-alias>new_cases_per_million</remote-alias>
            <ordinal>8</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>total_deaths_per_million</remote-name>
            <remote-type>5</remote-type>
            <local-name>[total_deaths_per_million]</local-name>
            <parent-name>[OWID_corrected.csv]</parent-name>
            <remote-alias>total_deaths_per_million</remote-alias>
            <ordinal>9</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>new_deaths_per_million</remote-name>
            <remote-type>5</remote-type>
            <local-name>[new_deaths_per_million]</local-name>
            <parent-name>[OWID_corrected.csv]</parent-name>
            <remote-alias>new_deaths_per_million</remote-alias>
            <ordinal>10</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>positive_rate</remote-name>
            <remote-type>5</remote-type>
            <local-name>[positive_rate]</local-name>
            <parent-name>[OWID_corrected.csv]</parent-name>
            <remote-alias>positive_rate</remote-alias>
            <ordinal>11</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>total_vaccinations</remote-name>
            <remote-type>20</remote-type>
            <local-name>[total_vaccinations]</local-name>
            <parent-name>[OWID_corrected.csv]</parent-name>
            <remote-alias>total_vaccinations</remote-alias>
            <ordinal>12</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>people_vaccinated</remote-name>
            <remote-type>20</remote-type>
            <local-name>[people_vaccinated]</local-name>
            <parent-name>[OWID_corrected.csv]</parent-name>
            <remote-alias>people_vaccinated</remote-alias>
            <ordinal>13</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>people_fully_vaccinated</remote-name>
            <remote-type>20</remote-type>
            <local-name>[people_fully_vaccinated]</local-name>
            <parent-name>[OWID_corrected.csv]</parent-name>
            <remote-alias>people_fully_vaccinated</remote-alias>
            <ordinal>14</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>new_vaccinations</remote-name>
            <remote-type>20</remote-type>
            <local-name>[new_vaccinations]</local-name>
            <parent-name>[OWID_corrected.csv]</parent-name>
            <remote-alias>new_vaccinations</remote-alias>
            <ordinal>15</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>total_vaccinations_per_hundred</remote-name>
            <remote-type>5</remote-type>
            <local-name>[total_vaccinations_per_hundred]</local-name>
            <parent-name>[OWID_corrected.csv]</parent-name>
            <remote-alias>total_vaccinations_per_hundred</remote-alias>
            <ordinal>16</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>people_vaccinated_per_hundred</remote-name>
            <remote-type>5</remote-type>
            <local-name>[people_vaccinated_per_hundred]</local-name>
            <parent-name>[OWID_corrected.csv]</parent-name>
            <remote-alias>people_vaccinated_per_hundred</remote-alias>
            <ordinal>17</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>people_fully_vaccinated_per_hundred</remote-name>
            <remote-type>5</remote-type>
            <local-name>[people_fully_vaccinated_per_hundred]</local-name>
            <parent-name>[OWID_corrected.csv]</parent-name>
            <remote-alias>people_fully_vaccinated_per_hundred</remote-alias>
            <ordinal>18</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>new_vaccinations_per_million</remote-name>
            <remote-type>20</remote-type>
            <local-name>[new_vaccinations_per_million]</local-name>
            <parent-name>[OWID_corrected.csv]</parent-name>
            <remote-alias>new_vaccinations_per_million</remote-alias>
            <ordinal>19</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>population</remote-name>
            <remote-type>20</remote-type>
            <local-name>[population]</local-name>
            <parent-name>[OWID_corrected.csv]</parent-name>
            <remote-alias>population</remote-alias>
            <ordinal>20</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>population_density</remote-name>
            <remote-type>5</remote-type>
            <local-name>[population_density]</local-name>
            <parent-name>[OWID_corrected.csv]</parent-name>
            <remote-alias>population_density</remote-alias>
            <ordinal>21</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>median_age</remote-name>
            <remote-type>5</remote-type>
            <local-name>[median_age]</local-name>
            <parent-name>[OWID_corrected.csv]</parent-name>
            <remote-alias>median_age</remote-alias>
            <ordinal>22</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>gdp_per_capita</remote-name>
            <remote-type>5</remote-type>
            <local-name>[gdp_per_capita]</local-name>
            <parent-name>[OWID_corrected.csv]</parent-name>
            <remote-alias>gdp_per_capita</remote-alias>
            <ordinal>23</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>extreme_poverty</remote-name>
            <remote-type>5</remote-type>
            <local-name>[extreme_poverty]</local-name>
            <parent-name>[OWID_corrected.csv]</parent-name>
            <remote-alias>extreme_poverty</remote-alias>
            <ordinal>24</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>diabetes_prevalence</remote-name>
            <remote-type>5</remote-type>
            <local-name>[diabetes_prevalence]</local-name>
            <parent-name>[OWID_corrected.csv]</parent-name>
            <remote-alias>diabetes_prevalence</remote-alias>
            <ordinal>25</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>female_smokers</remote-name>
            <remote-type>5</remote-type>
            <local-name>[female_smokers]</local-name>
            <parent-name>[OWID_corrected.csv]</parent-name>
            <remote-alias>female_smokers</remote-alias>
            <ordinal>26</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>male_smokers</remote-name>
            <remote-type>5</remote-type>
            <local-name>[male_smokers]</local-name>
            <parent-name>[OWID_corrected.csv]</parent-name>
            <remote-alias>male_smokers</remote-alias>
            <ordinal>27</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>handwashing_facilities</remote-name>
            <remote-type>5</remote-type>
            <local-name>[handwashing_facilities]</local-name>
            <parent-name>[OWID_corrected.csv]</parent-name>
            <remote-alias>handwashing_facilities</remote-alias>
            <ordinal>28</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>life_expectancy</remote-name>
            <remote-type>5</remote-type>
            <local-name>[life_expectancy]</local-name>
            <parent-name>[OWID_corrected.csv]</parent-name>
            <remote-alias>life_expectancy</remote-alias>
            <ordinal>29</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>human_development_index</remote-name>
            <remote-type>5</remote-type>
            <local-name>[human_development_index]</local-name>
            <parent-name>[OWID_corrected.csv]</parent-name>
            <remote-alias>human_development_index</remote-alias>
            <ordinal>30</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[WHO-COVID-19-global-data.csv]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='character-set'>&quot;UTF-8&quot;</attribute>
              <attribute datatype='string' name='collation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='field-delimiter'>&quot;,&quot;</attribute>
              <attribute datatype='string' name='header-row'>&quot;true&quot;</attribute>
              <attribute datatype='string' name='locale'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='single-char'>&quot;&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Date_reported</remote-name>
            <remote-type>133</remote-type>
            <local-name>[Date_reported]</local-name>
            <parent-name>[WHO-COVID-19-global-data.csv]</parent-name>
            <remote-alias>Date_reported</remote-alias>
            <ordinal>31</ordinal>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Country_code</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Country_code]</local-name>
            <parent-name>[WHO-COVID-19-global-data.csv]</parent-name>
            <remote-alias>Country_code</remote-alias>
            <ordinal>32</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Country</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Country (WHO-COVID-19-global-data.csv)]</local-name>
            <parent-name>[WHO-COVID-19-global-data.csv]</parent-name>
            <remote-alias>Country</remote-alias>
            <ordinal>33</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>WHO_region</remote-name>
            <remote-type>129</remote-type>
            <local-name>[WHO_region]</local-name>
            <parent-name>[WHO-COVID-19-global-data.csv]</parent-name>
            <remote-alias>WHO_region</remote-alias>
            <ordinal>34</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>New_cases</remote-name>
            <remote-type>20</remote-type>
            <local-name>[New_cases]</local-name>
            <parent-name>[WHO-COVID-19-global-data.csv]</parent-name>
            <remote-alias>New_cases</remote-alias>
            <ordinal>35</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Cumulative_cases</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Cumulative_cases]</local-name>
            <parent-name>[WHO-COVID-19-global-data.csv]</parent-name>
            <remote-alias>Cumulative_cases</remote-alias>
            <ordinal>36</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>New_deaths</remote-name>
            <remote-type>20</remote-type>
            <local-name>[New_deaths]</local-name>
            <parent-name>[WHO-COVID-19-global-data.csv]</parent-name>
            <remote-alias>New_deaths</remote-alias>
            <ordinal>37</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Cumulative_deaths</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Cumulative_deaths]</local-name>
            <parent-name>[WHO-COVID-19-global-data.csv]</parent-name>
            <remote-alias>Cumulative_deaths</remote-alias>
            <ordinal>38</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[country-coordinates-world.csv1]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='character-set'>&quot;UTF-8&quot;</attribute>
              <attribute datatype='string' name='collation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='field-delimiter'>&quot;,&quot;</attribute>
              <attribute datatype='string' name='header-row'>&quot;true&quot;</attribute>
              <attribute datatype='string' name='locale'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='single-char'>&quot;&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>latitude</remote-name>
            <remote-type>5</remote-type>
            <local-name>[latitude (country-coordinates-world.csv1)]</local-name>
            <parent-name>[country-coordinates-world.csv1]</parent-name>
            <remote-alias>latitude</remote-alias>
            <ordinal>39</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>longitude</remote-name>
            <remote-type>5</remote-type>
            <local-name>[longitude (country-coordinates-world.csv1)]</local-name>
            <parent-name>[country-coordinates-world.csv1]</parent-name>
            <remote-alias>longitude</remote-alias>
            <ordinal>40</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Country</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Country (country-coordinates-world.csv1)]</local-name>
            <parent-name>[country-coordinates-world.csv1]</parent-name>
            <remote-alias>Country</remote-alias>
            <ordinal>41</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
          </metadata-record>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[country_wise_vaccine_corrected.csv]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='character-set'>&quot;UTF-8&quot;</attribute>
              <attribute datatype='string' name='collation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='field-delimiter'>&quot;,&quot;</attribute>
              <attribute datatype='string' name='header-row'>&quot;true&quot;</attribute>
              <attribute datatype='string' name='locale'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='single-char'>&quot;&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>F1</remote-name>
            <remote-type>20</remote-type>
            <local-name>[F1]</local-name>
            <parent-name>[country_wise_vaccine_corrected.csv]</parent-name>
            <remote-alias>F1</remote-alias>
            <ordinal>42</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>COUNTRY</remote-name>
            <remote-type>129</remote-type>
            <local-name>[COUNTRY]</local-name>
            <parent-name>[country_wise_vaccine_corrected.csv]</parent-name>
            <remote-alias>COUNTRY</remote-alias>
            <ordinal>43</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>ISO3</remote-name>
            <remote-type>129</remote-type>
            <local-name>[ISO3 (country_wise_vaccine_corrected.csv)]</local-name>
            <parent-name>[country_wise_vaccine_corrected.csv]</parent-name>
            <remote-alias>ISO3</remote-alias>
            <ordinal>44</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>WHO_REGION</remote-name>
            <remote-type>129</remote-type>
            <local-name>[WHO_REGION (country_wise_vaccine_corrected.csv)]</local-name>
            <parent-name>[country_wise_vaccine_corrected.csv]</parent-name>
            <remote-alias>WHO_REGION</remote-alias>
            <ordinal>45</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>DATA_SOURCE</remote-name>
            <remote-type>129</remote-type>
            <local-name>[DATA_SOURCE (country_wise_vaccine_corrected.csv)]</local-name>
            <parent-name>[country_wise_vaccine_corrected.csv]</parent-name>
            <remote-alias>DATA_SOURCE</remote-alias>
            <ordinal>46</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>DATE_UPDATED</remote-name>
            <remote-type>133</remote-type>
            <local-name>[DATE_UPDATED (country_wise_vaccine_corrected.csv)]</local-name>
            <parent-name>[country_wise_vaccine_corrected.csv]</parent-name>
            <remote-alias>DATE_UPDATED</remote-alias>
            <ordinal>47</ordinal>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>TOTAL_VACCINATIONS</remote-name>
            <remote-type>20</remote-type>
            <local-name>[TOTAL_VACCINATIONS (country_wise_vaccine_corrected.csv)]</local-name>
            <parent-name>[country_wise_vaccine_corrected.csv]</parent-name>
            <remote-alias>TOTAL_VACCINATIONS</remote-alias>
            <ordinal>48</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>PERSONS_VACCINATED_1PLUS_DOSE</remote-name>
            <remote-type>5</remote-type>
            <local-name>[PERSONS_VACCINATED_1PLUS_DOSE (country_wise_vaccine_corrected.csv)]</local-name>
            <parent-name>[country_wise_vaccine_corrected.csv]</parent-name>
            <remote-alias>PERSONS_VACCINATED_1PLUS_DOSE</remote-alias>
            <ordinal>49</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>TOTAL_VACCINATIONS_PER100</remote-name>
            <remote-type>5</remote-type>
            <local-name>[TOTAL_VACCINATIONS_PER100 (country_wise_vaccine_corrected.csv)]</local-name>
            <parent-name>[country_wise_vaccine_corrected.csv]</parent-name>
            <remote-alias>TOTAL_VACCINATIONS_PER100</remote-alias>
            <ordinal>50</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>PERSONS_VACCINATED_1PLUS_DOSE_PER100</remote-name>
            <remote-type>5</remote-type>
            <local-name>[PERSONS_VACCINATED_1PLUS_DOSE_PER100 (country_wise_vaccine_corrected.csv)]</local-name>
            <parent-name>[country_wise_vaccine_corrected.csv]</parent-name>
            <remote-alias>PERSONS_VACCINATED_1PLUS_DOSE_PER100</remote-alias>
            <ordinal>51</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>PERSONS_FULLY_VACCINATED</remote-name>
            <remote-type>5</remote-type>
            <local-name>[PERSONS_FULLY_VACCINATED (country_wise_vaccine_corrected.csv)]</local-name>
            <parent-name>[country_wise_vaccine_corrected.csv]</parent-name>
            <remote-alias>PERSONS_FULLY_VACCINATED</remote-alias>
            <ordinal>52</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>PERSONS_FULLY_VACCINATED_PER100</remote-name>
            <remote-type>5</remote-type>
            <local-name>[PERSONS_FULLY_VACCINATED_PER100 (country_wise_vaccine_corrected.csv)]</local-name>
            <parent-name>[country_wise_vaccine_corrected.csv]</parent-name>
            <remote-alias>PERSONS_FULLY_VACCINATED_PER100</remote-alias>
            <ordinal>53</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>FIRST_VACCINE_DATE</remote-name>
            <remote-type>133</remote-type>
            <local-name>[FIRST_VACCINE_DATE (country_wise_vaccine_corrected.csv)]</local-name>
            <parent-name>[country_wise_vaccine_corrected.csv]</parent-name>
            <remote-alias>FIRST_VACCINE_DATE</remote-alias>
            <ordinal>54</ordinal>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>NUMBER_VACCINES_TYPES_USED</remote-name>
            <remote-type>5</remote-type>
            <local-name>[NUMBER_VACCINES_TYPES_USED (country_wise_vaccine_corrected.csv)]</local-name>
            <parent-name>[country_wise_vaccine_corrected.csv]</parent-name>
            <remote-alias>NUMBER_VACCINES_TYPES_USED</remote-alias>
            <ordinal>55</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>vac_0</remote-name>
            <remote-type>129</remote-type>
            <local-name>[vac_0]</local-name>
            <parent-name>[country_wise_vaccine_corrected.csv]</parent-name>
            <remote-alias>vac_0</remote-alias>
            <ordinal>56</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>vac_1</remote-name>
            <remote-type>129</remote-type>
            <local-name>[vac_1]</local-name>
            <parent-name>[country_wise_vaccine_corrected.csv]</parent-name>
            <remote-alias>vac_1</remote-alias>
            <ordinal>57</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>vac_2</remote-name>
            <remote-type>129</remote-type>
            <local-name>[vac_2]</local-name>
            <parent-name>[country_wise_vaccine_corrected.csv]</parent-name>
            <remote-alias>vac_2</remote-alias>
            <ordinal>58</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>vac_3</remote-name>
            <remote-type>129</remote-type>
            <local-name>[vac_3]</local-name>
            <parent-name>[country_wise_vaccine_corrected.csv]</parent-name>
            <remote-alias>vac_3</remote-alias>
            <ordinal>59</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>vac_4</remote-name>
            <remote-type>129</remote-type>
            <local-name>[vac_4]</local-name>
            <parent-name>[country_wise_vaccine_corrected.csv]</parent-name>
            <remote-alias>vac_4</remote-alias>
            <ordinal>60</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>vac_5</remote-name>
            <remote-type>129</remote-type>
            <local-name>[vac_5]</local-name>
            <parent-name>[country_wise_vaccine_corrected.csv]</parent-name>
            <remote-alias>vac_5</remote-alias>
            <ordinal>61</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>vac_6</remote-name>
            <remote-type>129</remote-type>
            <local-name>[vac_6]</local-name>
            <parent-name>[country_wise_vaccine_corrected.csv]</parent-name>
            <remote-alias>vac_6</remote-alias>
            <ordinal>62</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>vac_7</remote-name>
            <remote-type>129</remote-type>
            <local-name>[vac_7]</local-name>
            <parent-name>[country_wise_vaccine_corrected.csv]</parent-name>
            <remote-alias>vac_7</remote-alias>
            <ordinal>63</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>vac_8</remote-name>
            <remote-type>129</remote-type>
            <local-name>[vac_8]</local-name>
            <parent-name>[country_wise_vaccine_corrected.csv]</parent-name>
            <remote-alias>vac_8</remote-alias>
            <ordinal>64</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>vac_ID</remote-name>
            <remote-type>129</remote-type>
            <local-name>[vac_ID]</local-name>
            <parent-name>[country_wise_vaccine_corrected.csv]</parent-name>
            <remote-alias>vac_ID</remote-alias>
            <ordinal>65</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
          </metadata-record>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[country_wise_vaccine_corrected.csv1]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='character-set'>&quot;UTF-8&quot;</attribute>
              <attribute datatype='string' name='collation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='field-delimiter'>&quot;,&quot;</attribute>
              <attribute datatype='string' name='header-row'>&quot;true&quot;</attribute>
              <attribute datatype='string' name='locale'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='single-char'>&quot;&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>F1</remote-name>
            <remote-type>20</remote-type>
            <local-name>[F1 (country_wise_vaccine_corrected.csv1)]</local-name>
            <parent-name>[country_wise_vaccine_corrected.csv1]</parent-name>
            <remote-alias>F1</remote-alias>
            <ordinal>66</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>COUNTRY</remote-name>
            <remote-type>129</remote-type>
            <local-name>[COUNTRY (country_wise_vaccine_corrected.csv1)]</local-name>
            <parent-name>[country_wise_vaccine_corrected.csv1]</parent-name>
            <remote-alias>COUNTRY</remote-alias>
            <ordinal>67</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>ISO3</remote-name>
            <remote-type>129</remote-type>
            <local-name>[ISO3 (country_wise_vaccine_corrected.csv1)]</local-name>
            <parent-name>[country_wise_vaccine_corrected.csv1]</parent-name>
            <remote-alias>ISO3</remote-alias>
            <ordinal>68</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>WHO_REGION</remote-name>
            <remote-type>129</remote-type>
            <local-name>[WHO_REGION (country_wise_vaccine_corrected.csv1)]</local-name>
            <parent-name>[country_wise_vaccine_corrected.csv1]</parent-name>
            <remote-alias>WHO_REGION</remote-alias>
            <ordinal>69</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>DATA_SOURCE</remote-name>
            <remote-type>129</remote-type>
            <local-name>[DATA_SOURCE (country_wise_vaccine_corrected.csv1)]</local-name>
            <parent-name>[country_wise_vaccine_corrected.csv1]</parent-name>
            <remote-alias>DATA_SOURCE</remote-alias>
            <ordinal>70</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>DATE_UPDATED</remote-name>
            <remote-type>133</remote-type>
            <local-name>[DATE_UPDATED (country_wise_vaccine_corrected.csv1)]</local-name>
            <parent-name>[country_wise_vaccine_corrected.csv1]</parent-name>
            <remote-alias>DATE_UPDATED</remote-alias>
            <ordinal>71</ordinal>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>TOTAL_VACCINATIONS</remote-name>
            <remote-type>20</remote-type>
            <local-name>[TOTAL_VACCINATIONS (country_wise_vaccine_corrected.csv1)]</local-name>
            <parent-name>[country_wise_vaccine_corrected.csv1]</parent-name>
            <remote-alias>TOTAL_VACCINATIONS</remote-alias>
            <ordinal>72</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>PERSONS_VACCINATED_1PLUS_DOSE</remote-name>
            <remote-type>5</remote-type>
            <local-name>[PERSONS_VACCINATED_1PLUS_DOSE (country_wise_vaccine_corrected.csv1)]</local-name>
            <parent-name>[country_wise_vaccine_corrected.csv1]</parent-name>
            <remote-alias>PERSONS_VACCINATED_1PLUS_DOSE</remote-alias>
            <ordinal>73</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>TOTAL_VACCINATIONS_PER100</remote-name>
            <remote-type>5</remote-type>
            <local-name>[TOTAL_VACCINATIONS_PER100 (country_wise_vaccine_corrected.csv1)]</local-name>
            <parent-name>[country_wise_vaccine_corrected.csv1]</parent-name>
            <remote-alias>TOTAL_VACCINATIONS_PER100</remote-alias>
            <ordinal>74</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>PERSONS_VACCINATED_1PLUS_DOSE_PER100</remote-name>
            <remote-type>5</remote-type>
            <local-name>[PERSONS_VACCINATED_1PLUS_DOSE_PER100 (country_wise_vaccine_corrected.csv1)]</local-name>
            <parent-name>[country_wise_vaccine_corrected.csv1]</parent-name>
            <remote-alias>PERSONS_VACCINATED_1PLUS_DOSE_PER100</remote-alias>
            <ordinal>75</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>PERSONS_FULLY_VACCINATED</remote-name>
            <remote-type>5</remote-type>
            <local-name>[PERSONS_FULLY_VACCINATED (country_wise_vaccine_corrected.csv1)]</local-name>
            <parent-name>[country_wise_vaccine_corrected.csv1]</parent-name>
            <remote-alias>PERSONS_FULLY_VACCINATED</remote-alias>
            <ordinal>76</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>PERSONS_FULLY_VACCINATED_PER100</remote-name>
            <remote-type>5</remote-type>
            <local-name>[PERSONS_FULLY_VACCINATED_PER100 (country_wise_vaccine_corrected.csv1)]</local-name>
            <parent-name>[country_wise_vaccine_corrected.csv1]</parent-name>
            <remote-alias>PERSONS_FULLY_VACCINATED_PER100</remote-alias>
            <ordinal>77</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>FIRST_VACCINE_DATE</remote-name>
            <remote-type>133</remote-type>
            <local-name>[FIRST_VACCINE_DATE (country_wise_vaccine_corrected.csv1)]</local-name>
            <parent-name>[country_wise_vaccine_corrected.csv1]</parent-name>
            <remote-alias>FIRST_VACCINE_DATE</remote-alias>
            <ordinal>78</ordinal>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>NUMBER_VACCINES_TYPES_USED</remote-name>
            <remote-type>5</remote-type>
            <local-name>[NUMBER_VACCINES_TYPES_USED (country_wise_vaccine_corrected.csv1)]</local-name>
            <parent-name>[country_wise_vaccine_corrected.csv1]</parent-name>
            <remote-alias>NUMBER_VACCINES_TYPES_USED</remote-alias>
            <ordinal>79</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>vac_0</remote-name>
            <remote-type>129</remote-type>
            <local-name>[vac_0 (country_wise_vaccine_corrected.csv1)]</local-name>
            <parent-name>[country_wise_vaccine_corrected.csv1]</parent-name>
            <remote-alias>vac_0</remote-alias>
            <ordinal>80</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>vac_1</remote-name>
            <remote-type>129</remote-type>
            <local-name>[vac_1 (country_wise_vaccine_corrected.csv1)]</local-name>
            <parent-name>[country_wise_vaccine_corrected.csv1]</parent-name>
            <remote-alias>vac_1</remote-alias>
            <ordinal>81</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>vac_2</remote-name>
            <remote-type>129</remote-type>
            <local-name>[vac_2 (country_wise_vaccine_corrected.csv1)]</local-name>
            <parent-name>[country_wise_vaccine_corrected.csv1]</parent-name>
            <remote-alias>vac_2</remote-alias>
            <ordinal>82</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>vac_3</remote-name>
            <remote-type>129</remote-type>
            <local-name>[vac_3 (country_wise_vaccine_corrected.csv1)]</local-name>
            <parent-name>[country_wise_vaccine_corrected.csv1]</parent-name>
            <remote-alias>vac_3</remote-alias>
            <ordinal>83</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>vac_4</remote-name>
            <remote-type>129</remote-type>
            <local-name>[vac_4 (country_wise_vaccine_corrected.csv1)]</local-name>
            <parent-name>[country_wise_vaccine_corrected.csv1]</parent-name>
            <remote-alias>vac_4</remote-alias>
            <ordinal>84</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>vac_5</remote-name>
            <remote-type>129</remote-type>
            <local-name>[vac_5 (country_wise_vaccine_corrected.csv1)]</local-name>
            <parent-name>[country_wise_vaccine_corrected.csv1]</parent-name>
            <remote-alias>vac_5</remote-alias>
            <ordinal>85</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>vac_6</remote-name>
            <remote-type>129</remote-type>
            <local-name>[vac_6 (country_wise_vaccine_corrected.csv1)]</local-name>
            <parent-name>[country_wise_vaccine_corrected.csv1]</parent-name>
            <remote-alias>vac_6</remote-alias>
            <ordinal>86</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>vac_7</remote-name>
            <remote-type>129</remote-type>
            <local-name>[vac_7 (country_wise_vaccine_corrected.csv1)]</local-name>
            <parent-name>[country_wise_vaccine_corrected.csv1]</parent-name>
            <remote-alias>vac_7</remote-alias>
            <ordinal>87</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>vac_8</remote-name>
            <remote-type>129</remote-type>
            <local-name>[vac_8 (country_wise_vaccine_corrected.csv1)]</local-name>
            <parent-name>[country_wise_vaccine_corrected.csv1]</parent-name>
            <remote-alias>vac_8</remote-alias>
            <ordinal>88</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>vac_ID</remote-name>
            <remote-type>129</remote-type>
            <local-name>[vac_ID (country_wise_vaccine_corrected.csv1)]</local-name>
            <parent-name>[country_wise_vaccine_corrected.csv1]</parent-name>
            <remote-alias>vac_ID</remote-alias>
            <ordinal>89</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
          </metadata-record>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[covid-vaccine-doses-by-manufacturer-revised.csv]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='character-set'>&quot;UTF-8&quot;</attribute>
              <attribute datatype='string' name='collation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='field-delimiter'>&quot;,&quot;</attribute>
              <attribute datatype='string' name='header-row'>&quot;true&quot;</attribute>
              <attribute datatype='string' name='locale'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='single-char'>&quot;&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Entity</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Entity]</local-name>
            <parent-name>[covid-vaccine-doses-by-manufacturer-revised.csv]</parent-name>
            <remote-alias>Entity</remote-alias>
            <ordinal>90</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Code</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Code (covid-vaccine-doses-by-manufacturer-revised.csv)]</local-name>
            <parent-name>[covid-vaccine-doses-by-manufacturer-revised.csv]</parent-name>
            <remote-alias>Code</remote-alias>
            <ordinal>91</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Day</remote-name>
            <remote-type>133</remote-type>
            <local-name>[Day]</local-name>
            <parent-name>[covid-vaccine-doses-by-manufacturer-revised.csv]</parent-name>
            <remote-alias>Day</remote-alias>
            <ordinal>92</ordinal>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Pfizer</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Pfizer]</local-name>
            <parent-name>[covid-vaccine-doses-by-manufacturer-revised.csv]</parent-name>
            <remote-alias>Pfizer</remote-alias>
            <ordinal>93</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Moderna</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Moderna]</local-name>
            <parent-name>[covid-vaccine-doses-by-manufacturer-revised.csv]</parent-name>
            <remote-alias>Moderna</remote-alias>
            <ordinal>94</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>AstraZeneca</remote-name>
            <remote-type>20</remote-type>
            <local-name>[AstraZeneca]</local-name>
            <parent-name>[covid-vaccine-doses-by-manufacturer-revised.csv]</parent-name>
            <remote-alias>AstraZeneca</remote-alias>
            <ordinal>95</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Janssen</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Janssen]</local-name>
            <parent-name>[covid-vaccine-doses-by-manufacturer-revised.csv]</parent-name>
            <remote-alias>Janssen</remote-alias>
            <ordinal>96</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Sputnik V</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Sputnik V]</local-name>
            <parent-name>[covid-vaccine-doses-by-manufacturer-revised.csv]</parent-name>
            <remote-alias>Sputnik V</remote-alias>
            <ordinal>97</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Sinovac</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Sinovac]</local-name>
            <parent-name>[covid-vaccine-doses-by-manufacturer-revised.csv]</parent-name>
            <remote-alias>Sinovac</remote-alias>
            <ordinal>98</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Sinopharm</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Sinopharm]</local-name>
            <parent-name>[covid-vaccine-doses-by-manufacturer-revised.csv]</parent-name>
            <remote-alias>Sinopharm</remote-alias>
            <ordinal>99</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>CanSino</remote-name>
            <remote-type>20</remote-type>
            <local-name>[CanSino]</local-name>
            <parent-name>[covid-vaccine-doses-by-manufacturer-revised.csv]</parent-name>
            <remote-alias>CanSino</remote-alias>
            <ordinal>100</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[income_groups.csv]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='character-set'>&quot;UTF-8&quot;</attribute>
              <attribute datatype='string' name='collation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='field-delimiter'>&quot;,&quot;</attribute>
              <attribute datatype='string' name='header-row'>&quot;true&quot;</attribute>
              <attribute datatype='string' name='locale'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='single-char'>&quot;&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Country</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Country (income_groups.csv)]</local-name>
            <parent-name>[income_groups.csv]</parent-name>
            <remote-alias>Country</remote-alias>
            <ordinal>101</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Code</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Code]</local-name>
            <parent-name>[income_groups.csv]</parent-name>
            <remote-alias>Code</remote-alias>
            <ordinal>102</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Income group</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Income group]</local-name>
            <parent-name>[income_groups.csv]</parent-name>
            <remote-alias>Income group</remote-alias>
            <ordinal>103</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Year</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Year]</local-name>
            <parent-name>[income_groups.csv]</parent-name>
            <remote-alias>Year</remote-alias>
            <ordinal>104</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[phsm-severity-data.csv]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='character-set'>&quot;UTF-8&quot;</attribute>
              <attribute datatype='string' name='collation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='field-delimiter'>&quot;,&quot;</attribute>
              <attribute datatype='string' name='header-row'>&quot;true&quot;</attribute>
              <attribute datatype='string' name='locale'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='single-char'>&quot;&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>DATE_START</remote-name>
            <remote-type>133</remote-type>
            <local-name>[DATE_START]</local-name>
            <parent-name>[phsm-severity-data.csv]</parent-name>
            <remote-alias>DATE_START</remote-alias>
            <ordinal>105</ordinal>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>COUNTRY</remote-name>
            <remote-type>129</remote-type>
            <local-name>[COUNTRY (phsm-severity-data.csv)]</local-name>
            <parent-name>[phsm-severity-data.csv]</parent-name>
            <remote-alias>COUNTRY</remote-alias>
            <ordinal>106</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>ISO3</remote-name>
            <remote-type>129</remote-type>
            <local-name>[ISO3]</local-name>
            <parent-name>[phsm-severity-data.csv]</parent-name>
            <remote-alias>ISO3</remote-alias>
            <ordinal>107</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>WHO_REGION</remote-name>
            <remote-type>129</remote-type>
            <local-name>[WHO_REGION]</local-name>
            <parent-name>[phsm-severity-data.csv]</parent-name>
            <remote-alias>WHO_REGION</remote-alias>
            <ordinal>108</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>MASKS</remote-name>
            <remote-type>20</remote-type>
            <local-name>[MASKS]</local-name>
            <parent-name>[phsm-severity-data.csv]</parent-name>
            <remote-alias>MASKS</remote-alias>
            <ordinal>109</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>TRAVEL</remote-name>
            <remote-type>20</remote-type>
            <local-name>[TRAVEL]</local-name>
            <parent-name>[phsm-severity-data.csv]</parent-name>
            <remote-alias>TRAVEL</remote-alias>
            <ordinal>110</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>GATHERINGS</remote-name>
            <remote-type>20</remote-type>
            <local-name>[GATHERINGS]</local-name>
            <parent-name>[phsm-severity-data.csv]</parent-name>
            <remote-alias>GATHERINGS</remote-alias>
            <ordinal>111</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>SCHOOLS</remote-name>
            <remote-type>20</remote-type>
            <local-name>[SCHOOLS]</local-name>
            <parent-name>[phsm-severity-data.csv]</parent-name>
            <remote-alias>SCHOOLS</remote-alias>
            <ordinal>112</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>BUSINESSES</remote-name>
            <remote-type>20</remote-type>
            <local-name>[BUSINESSES]</local-name>
            <parent-name>[phsm-severity-data.csv]</parent-name>
            <remote-alias>BUSINESSES</remote-alias>
            <ordinal>113</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>MOVEMENTS</remote-name>
            <remote-type>20</remote-type>
            <local-name>[MOVEMENTS]</local-name>
            <parent-name>[phsm-severity-data.csv]</parent-name>
            <remote-alias>MOVEMENTS</remote-alias>
            <ordinal>114</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>GLOBAL_INDEX</remote-name>
            <remote-type>20</remote-type>
            <local-name>[GLOBAL_INDEX]</local-name>
            <parent-name>[phsm-severity-data.csv]</parent-name>
            <remote-alias>GLOBAL_INDEX</remote-alias>
            <ordinal>115</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>MEASURES_IN_PLACE</remote-name>
            <remote-type>129</remote-type>
            <local-name>[MEASURES_IN_PLACE]</local-name>
            <parent-name>[phsm-severity-data.csv]</parent-name>
            <remote-alias>MEASURES_IN_PLACE</remote-alias>
            <ordinal>116</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
          </metadata-record>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[vaccination-data including type.csv]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='character-set'>&quot;UTF-8&quot;</attribute>
              <attribute datatype='string' name='collation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='field-delimiter'>&quot;,&quot;</attribute>
              <attribute datatype='string' name='header-row'>&quot;true&quot;</attribute>
              <attribute datatype='string' name='locale'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='single-char'>&quot;&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>COUNTRY</remote-name>
            <remote-type>129</remote-type>
            <local-name>[COUNTRY (vaccination-data including type.csv)]</local-name>
            <parent-name>[vaccination-data including type.csv]</parent-name>
            <remote-alias>COUNTRY</remote-alias>
            <ordinal>117</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>ISO3</remote-name>
            <remote-type>129</remote-type>
            <local-name>[ISO3 (vaccination-data including type.csv)]</local-name>
            <parent-name>[vaccination-data including type.csv]</parent-name>
            <remote-alias>ISO3</remote-alias>
            <ordinal>118</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>WHO_REGION</remote-name>
            <remote-type>129</remote-type>
            <local-name>[WHO_REGION (vaccination-data including type.csv)]</local-name>
            <parent-name>[vaccination-data including type.csv]</parent-name>
            <remote-alias>WHO_REGION</remote-alias>
            <ordinal>119</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>DATA_SOURCE</remote-name>
            <remote-type>129</remote-type>
            <local-name>[DATA_SOURCE]</local-name>
            <parent-name>[vaccination-data including type.csv]</parent-name>
            <remote-alias>DATA_SOURCE</remote-alias>
            <ordinal>120</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>DATE_UPDATED</remote-name>
            <remote-type>133</remote-type>
            <local-name>[DATE_UPDATED]</local-name>
            <parent-name>[vaccination-data including type.csv]</parent-name>
            <remote-alias>DATE_UPDATED</remote-alias>
            <ordinal>121</ordinal>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>TOTAL_VACCINATIONS</remote-name>
            <remote-type>20</remote-type>
            <local-name>[TOTAL_VACCINATIONS]</local-name>
            <parent-name>[vaccination-data including type.csv]</parent-name>
            <remote-alias>TOTAL_VACCINATIONS</remote-alias>
            <ordinal>122</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>PERSONS_VACCINATED_1PLUS_DOSE</remote-name>
            <remote-type>20</remote-type>
            <local-name>[PERSONS_VACCINATED_1PLUS_DOSE]</local-name>
            <parent-name>[vaccination-data including type.csv]</parent-name>
            <remote-alias>PERSONS_VACCINATED_1PLUS_DOSE</remote-alias>
            <ordinal>123</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>TOTAL_VACCINATIONS_PER100</remote-name>
            <remote-type>5</remote-type>
            <local-name>[TOTAL_VACCINATIONS_PER100]</local-name>
            <parent-name>[vaccination-data including type.csv]</parent-name>
            <remote-alias>TOTAL_VACCINATIONS_PER100</remote-alias>
            <ordinal>124</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>PERSONS_VACCINATED_1PLUS_DOSE_PER100</remote-name>
            <remote-type>5</remote-type>
            <local-name>[PERSONS_VACCINATED_1PLUS_DOSE_PER100]</local-name>
            <parent-name>[vaccination-data including type.csv]</parent-name>
            <remote-alias>PERSONS_VACCINATED_1PLUS_DOSE_PER100</remote-alias>
            <ordinal>125</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>PERSONS_FULLY_VACCINATED</remote-name>
            <remote-type>20</remote-type>
            <local-name>[PERSONS_FULLY_VACCINATED]</local-name>
            <parent-name>[vaccination-data including type.csv]</parent-name>
            <remote-alias>PERSONS_FULLY_VACCINATED</remote-alias>
            <ordinal>126</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>PERSONS_FULLY_VACCINATED_PER100</remote-name>
            <remote-type>5</remote-type>
            <local-name>[PERSONS_FULLY_VACCINATED_PER100]</local-name>
            <parent-name>[vaccination-data including type.csv]</parent-name>
            <remote-alias>PERSONS_FULLY_VACCINATED_PER100</remote-alias>
            <ordinal>127</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>VACCINES_USED</remote-name>
            <remote-type>129</remote-type>
            <local-name>[VACCINES_USED]</local-name>
            <parent-name>[vaccination-data including type.csv]</parent-name>
            <remote-alias>VACCINES_USED</remote-alias>
            <ordinal>128</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>FIRST_VACCINE_DATE</remote-name>
            <remote-type>133</remote-type>
            <local-name>[FIRST_VACCINE_DATE]</local-name>
            <parent-name>[vaccination-data including type.csv]</parent-name>
            <remote-alias>FIRST_VACCINE_DATE</remote-alias>
            <ordinal>129</ordinal>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>NUMBER_VACCINES_TYPES_USED</remote-name>
            <remote-type>20</remote-type>
            <local-name>[NUMBER_VACCINES_TYPES_USED]</local-name>
            <parent-name>[vaccination-data including type.csv]</parent-name>
            <remote-alias>NUMBER_VACCINES_TYPES_USED</remote-alias>
            <ordinal>130</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[vaccination_startdate.csv]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='character-set'>&quot;UTF-8&quot;</attribute>
              <attribute datatype='string' name='collation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='field-delimiter'>&quot;,&quot;</attribute>
              <attribute datatype='string' name='header-row'>&quot;true&quot;</attribute>
              <attribute datatype='string' name='locale'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='single-char'>&quot;&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>ISO3</remote-name>
            <remote-type>129</remote-type>
            <local-name>[ISO3 (vaccination_startdate.csv)]</local-name>
            <parent-name>[vaccination_startdate.csv]</parent-name>
            <remote-alias>ISO3</remote-alias>
            <ordinal>131</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>VACCINE_NAME</remote-name>
            <remote-type>129</remote-type>
            <local-name>[VACCINE_NAME]</local-name>
            <parent-name>[vaccination_startdate.csv]</parent-name>
            <remote-alias>VACCINE_NAME</remote-alias>
            <ordinal>132</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>PRODUCT_NAME</remote-name>
            <remote-type>129</remote-type>
            <local-name>[PRODUCT_NAME]</local-name>
            <parent-name>[vaccination_startdate.csv]</parent-name>
            <remote-alias>PRODUCT_NAME</remote-alias>
            <ordinal>133</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>COMPANY_NAME</remote-name>
            <remote-type>129</remote-type>
            <local-name>[COMPANY_NAME]</local-name>
            <parent-name>[vaccination_startdate.csv]</parent-name>
            <remote-alias>COMPANY_NAME</remote-alias>
            <ordinal>134</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>AUTHORIZATION_DATE</remote-name>
            <remote-type>133</remote-type>
            <local-name>[AUTHORIZATION_DATE]</local-name>
            <parent-name>[vaccination_startdate.csv]</parent-name>
            <remote-alias>AUTHORIZATION_DATE</remote-alias>
            <ordinal>135</ordinal>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>START_DATE</remote-name>
            <remote-type>133</remote-type>
            <local-name>[START_DATE]</local-name>
            <parent-name>[vaccination_startdate.csv]</parent-name>
            <remote-alias>START_DATE</remote-alias>
            <ordinal>136</ordinal>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>END_DATE</remote-name>
            <remote-type>129</remote-type>
            <local-name>[END_DATE]</local-name>
            <parent-name>[vaccination_startdate.csv]</parent-name>
            <remote-alias>END_DATE</remote-alias>
            <ordinal>137</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <approx-count>1</approx-count>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>COMMENT</remote-name>
            <remote-type>129</remote-type>
            <local-name>[COMMENT]</local-name>
            <parent-name>[vaccination_startdate.csv]</parent-name>
            <remote-alias>COMMENT</remote-alias>
            <ordinal>138</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <approx-count>1</approx-count>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>DATA_SOURCE</remote-name>
            <remote-type>129</remote-type>
            <local-name>[DATA_SOURCE (vaccination_startdate.csv)]</local-name>
            <parent-name>[vaccination_startdate.csv]</parent-name>
            <remote-alias>DATA_SOURCE</remote-alias>
            <ordinal>139</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
          </metadata-record>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[vaccinations-by-age-group.csv]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='character-set'>&quot;UTF-8&quot;</attribute>
              <attribute datatype='string' name='collation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='field-delimiter'>&quot;,&quot;</attribute>
              <attribute datatype='string' name='header-row'>&quot;true&quot;</attribute>
              <attribute datatype='string' name='locale'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='single-char'>&quot;&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>location</remote-name>
            <remote-type>129</remote-type>
            <local-name>[location]</local-name>
            <parent-name>[vaccinations-by-age-group.csv]</parent-name>
            <remote-alias>location</remote-alias>
            <ordinal>140</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>date</remote-name>
            <remote-type>133</remote-type>
            <local-name>[date (vaccinations-by-age-group.csv)]</local-name>
            <parent-name>[vaccinations-by-age-group.csv]</parent-name>
            <remote-alias>date</remote-alias>
            <ordinal>141</ordinal>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>age_group</remote-name>
            <remote-type>129</remote-type>
            <local-name>[age_group]</local-name>
            <parent-name>[vaccinations-by-age-group.csv]</parent-name>
            <remote-alias>age_group</remote-alias>
            <ordinal>142</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>people_vaccinated_per_hundred</remote-name>
            <remote-type>5</remote-type>
            <local-name>[people_vaccinated_per_hundred (vaccinations-by-age-group.csv)]</local-name>
            <parent-name>[vaccinations-by-age-group.csv]</parent-name>
            <remote-alias>people_vaccinated_per_hundred</remote-alias>
            <ordinal>143</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>people_fully_vaccinated_per_hundred</remote-name>
            <remote-type>5</remote-type>
            <local-name>[people_fully_vaccinated_per_hundred (vaccinations-by-age-group.csv)]</local-name>
            <parent-name>[vaccinations-by-age-group.csv]</parent-name>
            <remote-alias>people_fully_vaccinated_per_hundred</remote-alias>
            <ordinal>144</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column datatype='string' name='[:Measure Names]' role='dimension' type='nominal'>
        <aliases>
          <alias key='&quot;[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[avg:diabetes_prevalence:qk]&quot;' value='Diabetes Prevalence' />
          <alias key='&quot;[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[avg:female_smokers:qk]&quot;' value='Female Smokers' />
          <alias key='&quot;[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[avg:human_development_index:qk]&quot;' value='Human Development Index' />
          <alias key='&quot;[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[avg:Janssen:qk]&quot;' value='Janssen' />
          <alias key='&quot;[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[avg:male_smokers:qk]&quot;' value='Male Smokers' />
          <alias key='&quot;[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[avg:Moderna:qk]&quot;' value='Moderna' />
          <alias key='&quot;[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[avg:new_cases:qk]&quot;' value='New Cases' />
          <alias key='&quot;[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[avg:new_deaths:qk]&quot;' value='New Deaths' />
          <alias key='&quot;[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[avg:new_vaccinations:qk]&quot;' value='New Vaccinations' />
          <alias key='&quot;[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[avg:people_fully_vaccinated:qk]&quot;' value='People Fully Vaccinated' />
          <alias key='&quot;[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[avg:PERSONS_FULLY_VACCINATED_PER100:qk]&quot;' value='Persons Fully Vaccinated Per100' />
          <alias key='&quot;[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[avg:PERSONS_FULLY_VACCINATED:qk]&quot;' value='Persons Fully Vaccinated' />
          <alias key='&quot;[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[avg:PERSONS_VACCINATED_1PLUS_DOSE_PER100:qk]&quot;' value='Persons Vaccinated 1Plus Dose Per100' />
          <alias key='&quot;[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[avg:PERSONS_VACCINATED_1PLUS_DOSE:qk]&quot;' value='Persons Vaccinated 1Plus Dose' />
          <alias key='&quot;[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[avg:Pfizer:qk]&quot;' value='Pfizer' />
          <alias key='&quot;[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[avg:population_density:qk]&quot;' value='Population Density' />
          <alias key='&quot;[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[avg:population:qk]&quot;' value='Population' />
          <alias key='&quot;[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[avg:Sinopharm:qk]&quot;' value='Sinopharm' />
          <alias key='&quot;[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[avg:Sinovac:qk]&quot;' value='Sinovac' />
          <alias key='&quot;[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[avg:Sputnik V:qk]&quot;' value='Sputnik V' />
          <alias key='&quot;[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[avg:TOTAL_VACCINATIONS_PER100:qk]&quot;' value='Total Vaccinations Per100' />
          <alias key='&quot;[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[avg:TOTAL_VACCINATIONS:qk]&quot;' value='Total Vaccinations (Jabs)' />
          <alias key='&quot;[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[max:AstraZeneca:qk]&quot;' value='Astra Zeneca ' />
          <alias key='&quot;[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[max:CanSino:qk]&quot;' value='Can Sino' />
          <alias key='&quot;[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[max:Janssen:qk]&quot;' value='Janssen ' />
          <alias key='&quot;[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[max:Moderna:qk]&quot;' value='Moderna ' />
          <alias key='&quot;[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[max:Pfizer:qk]&quot;' value='Pfizer ' />
          <alias key='&quot;[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[max:Sinopharm:qk]&quot;' value='Sinopharm ' />
          <alias key='&quot;[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[max:Sinovac:qk]&quot;' value='Sinovac ' />
          <alias key='&quot;[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[max:Sputnik V:qk]&quot;' value='Sputnik V ' />
          <alias key='&quot;[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[sum:people_fully_vaccinated_per_hundred (vaccinations-by-age-group.csv):qk]&quot;' value='People Fully Vaccinated Per Hundred' />
          <alias key='&quot;[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[sum:people_vaccinated_per_hundred (vaccinations-by-age-group.csv):qk]&quot;' value='People Receiving atleast one dose Per Hundred' />
          <alias key='&quot;[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[sum:TOTAL_VACCINATIONS:qk]&quot;' value='Total Vaccinations' />
        </aliases>
      </column>
      <column caption='Authorization Date' datatype='date' name='[AUTHORIZATION_DATE]' role='dimension' type='ordinal' />
      <column datatype='string' name='[Age Group (group)]' role='dimension' type='nominal'>
        <calculation class='categorical-bin' column='[age_group]' new-bin='true'>
          <bin default-name='false' value='&quot;0-17&quot;'>
            <value>&quot;0-17&quot;</value>
            <value>&quot;12-17&quot;</value>
          </bin>
          <bin default-name='false' value='&quot;18-40&quot;'>
            <value>&quot;18-24&quot;</value>
            <value>&quot;18-29&quot;</value>
            <value>&quot;25-34&quot;</value>
            <value>&quot;25-49&quot;</value>
            <value>&quot;30-39&quot;</value>
            <value>&quot;35-44&quot;</value>
          </bin>
          <bin default-name='false' value='&quot;40-55&quot;'>
            <value>&quot;40-49&quot;</value>
            <value>&quot;45-54&quot;</value>
            <value>&quot;50-54&quot;</value>
            <value>&quot;50-59&quot;</value>
            <value>&quot;55-59&quot;</value>
          </bin>
          <bin default-name='false' value='&quot;55-70&quot;'>
            <value>&quot;55-64&quot;</value>
            <value>&quot;60-64&quot;</value>
            <value>&quot;60-69&quot;</value>
            <value>&quot;65-69&quot;</value>
            <value>&quot;65-74&quot;</value>
          </bin>
          <bin default-name='false' value='&quot;70-80&quot;'>
            <value>&quot;70-74&quot;</value>
            <value>&quot;70-79&quot;</value>
            <value>&quot;75-79&quot;</value>
            <value>&quot;75+&quot;</value>
          </bin>
          <bin default-name='false' value='&quot;Non-EU Countries&quot;'>
            <value>%null%</value>
          </bin>
        </calculation>
      </column>
      <column caption='Astra Zeneca' datatype='integer' name='[AstraZeneca]' role='measure' type='quantitative' />
      <column caption='Businesses' datatype='integer' name='[BUSINESSES]' role='measure' type='quantitative' />
      <column caption='Comment' datatype='string' name='[COMMENT]' role='dimension' type='nominal' />
      <column caption='Company Name' datatype='string' name='[COMPANY_NAME]' role='dimension' type='nominal' />
      <column caption='COUNTRY (country wise vaccine corrected.csv1)' datatype='string' name='[COUNTRY (country_wise_vaccine_corrected.csv1)]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
      <column datatype='string' name='[COUNTRY (phsm-severity-data.csv)]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
      <column datatype='string' name='[COUNTRY (vaccination-data including type.csv)]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
      <column caption='Country1' datatype='string' name='[COUNTRY]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
      <column caption='% of fully vaccinated' datatype='real' name='[Calculation_489977580833480704]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(sum([PERSONS_FULLY_VACCINATED])/(AVG([population])))*100' />
      </column>
      <column caption='correlation/covariance' datatype='real' name='[Calculation_489977581003325443]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='CORR([New_cases],[people_fully_vaccinated] )' />
      </column>
      <column caption='Can Sino' datatype='integer' name='[CanSino]' role='measure' type='quantitative' />
      <column datatype='string' name='[Country (WHO-COVID-19-global-data.csv)]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
      <column datatype='string' name='[Country (country-coordinates-world.csv1)]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
      <column caption='Country (income groups.csv)' datatype='string' name='[Country (income_groups.csv)]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
      <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
      <column caption='Country code' datatype='string' name='[Country_code]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
      <column aggregation='Sum' caption='Cumulative cases' datatype='integer' name='[Cumulative_cases]' role='dimension' type='ordinal' />
      <column caption='Cumulative deaths' datatype='integer' name='[Cumulative_deaths]' role='measure' type='quantitative' />
      <column datatype='string' name='[DATA_SOURCE (country_wise_vaccine_corrected.csv)]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
      <column caption='DATA SOURCE (country wise vaccine corrected.csv1)' datatype='string' name='[DATA_SOURCE (country_wise_vaccine_corrected.csv1)]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
      <column caption='DATA SOURCE (vaccination startdate.csv)' datatype='string' name='[DATA_SOURCE (vaccination_startdate.csv)]' role='dimension' type='nominal' />
      <column caption='Data Source' datatype='string' name='[DATA_SOURCE]' role='dimension' type='nominal' />
      <column caption='Date Start' datatype='date' name='[DATE_START]' role='dimension' type='ordinal' />
      <column caption='DATE UPDATED (country wise vaccine corrected.csv1)' datatype='date' name='[DATE_UPDATED (country_wise_vaccine_corrected.csv1)]' role='dimension' type='ordinal' />
      <column caption='Date Updated' datatype='date' name='[DATE_UPDATED]' role='dimension' type='ordinal' />
      <column caption='Date reported' datatype='date' name='[Date_reported]' role='dimension' type='ordinal' />
      <column datatype='date' name='[Day]' role='dimension' type='ordinal' />
      <column caption='End Date' datatype='string' name='[END_DATE]' role='dimension' type='nominal' />
      <column caption='Country Name' datatype='string' name='[Entity]' role='dimension' type='nominal' />
      <column caption='F1 (country wise vaccine corrected.csv1)' datatype='integer' name='[F1 (country_wise_vaccine_corrected.csv1)]' role='measure' type='quantitative' />
      <column caption='FIRST VACCINE DATE (country wise vaccine corrected.csv1)' datatype='date' name='[FIRST_VACCINE_DATE (country_wise_vaccine_corrected.csv1)]' role='dimension' type='ordinal' />
      <column caption='First Vaccine Date' datatype='date' name='[FIRST_VACCINE_DATE]' role='dimension' type='ordinal' />
      <column caption='Gatherings' datatype='integer' name='[GATHERINGS]' role='measure' type='quantitative' />
      <column caption='Global Index' datatype='integer' name='[GLOBAL_INDEX]' role='measure' type='quantitative' />
      <column datatype='string' name='[ISO3 (country_wise_vaccine_corrected.csv)]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
      <column caption='ISO3 (country wise vaccine corrected.csv1)' datatype='string' name='[ISO3 (country_wise_vaccine_corrected.csv1)]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
      <column caption='ISO3 (vaccination startdate.csv)' datatype='string' name='[ISO3 (vaccination_startdate.csv)]' role='dimension' type='nominal' />
      <column caption='Iso3' datatype='string' name='[ISO3]' role='dimension' type='nominal' />
      <column datatype='integer' name='[Janssen]' role='measure' type='quantitative' />
      <column caption='Masks' datatype='integer' name='[MASKS]' role='measure' type='quantitative' />
      <column caption='Measures In Place' datatype='string' name='[MEASURES_IN_PLACE]' role='dimension' type='nominal' />
      <column caption='Movements' datatype='integer' name='[MOVEMENTS]' role='measure' type='quantitative' />
      <column datatype='integer' name='[Moderna]' role='measure' type='quantitative' />
      <column caption='NUMBER VACCINES TYPES USED (country wise vaccine corrected.csv1)' datatype='real' name='[NUMBER_VACCINES_TYPES_USED (country_wise_vaccine_corrected.csv1)]' role='measure' type='quantitative' />
      <column caption='Number Vaccines Types Used' datatype='integer' name='[NUMBER_VACCINES_TYPES_USED]' role='measure' type='quantitative' />
      <column caption='New cases' datatype='integer' name='[New_cases]' role='measure' type='quantitative' />
      <column caption='New deaths' datatype='integer' name='[New_deaths]' role='measure' type='quantitative' />
      <column datatype='real' name='[PERSONS_FULLY_VACCINATED (country_wise_vaccine_corrected.csv)]' role='measure' type='quantitative' />
      <column caption='PERSONS FULLY VACCINATED (country wise vaccine corrected.csv1)' datatype='real' name='[PERSONS_FULLY_VACCINATED (country_wise_vaccine_corrected.csv1)]' role='measure' type='quantitative' />
      <column caption='Persons Fully Vaccinated' datatype='integer' name='[PERSONS_FULLY_VACCINATED]' role='measure' type='quantitative' />
      <column caption='PERSONS FULLY VACCINATED PER100 (country wise vaccine corrected.csv1)' datatype='real' name='[PERSONS_FULLY_VACCINATED_PER100 (country_wise_vaccine_corrected.csv1)]' role='measure' type='quantitative' />
      <column caption='Persons Fully Vaccinated Per100' datatype='real' name='[PERSONS_FULLY_VACCINATED_PER100]' role='measure' type='quantitative' />
      <column caption='PERSONS VACCINATED 1PLUS DOSE (country wise vaccine corrected.csv1)' datatype='real' name='[PERSONS_VACCINATED_1PLUS_DOSE (country_wise_vaccine_corrected.csv1)]' role='measure' type='quantitative' />
      <column caption='Persons Vaccinated 1Plus Dose' datatype='integer' name='[PERSONS_VACCINATED_1PLUS_DOSE]' role='measure' type='quantitative' />
      <column caption='PERSONS VACCINATED 1PLUS DOSE PER100 (country wise vaccine corrected.csv1)' datatype='real' name='[PERSONS_VACCINATED_1PLUS_DOSE_PER100 (country_wise_vaccine_corrected.csv1)]' role='measure' type='quantitative' />
      <column caption='Persons Vaccinated 1Plus Dose Per100' datatype='real' name='[PERSONS_VACCINATED_1PLUS_DOSE_PER100]' role='measure' type='quantitative' />
      <column caption='Product Name' datatype='string' name='[PRODUCT_NAME]' role='dimension' type='nominal' />
      <column datatype='integer' name='[Pfizer]' role='measure' type='quantitative' />
      <column caption='Schools' datatype='integer' name='[SCHOOLS]' role='measure' type='quantitative' />
      <column caption='Start Date' datatype='date' name='[START_DATE]' role='dimension' type='ordinal' />
      <column datatype='integer' name='[Sinopharm]' role='measure' type='quantitative' />
      <column datatype='integer' name='[Sinovac]' role='measure' type='quantitative' />
      <column datatype='integer' name='[Sputnik V]' role='measure' type='quantitative' />
      <column datatype='integer' name='[TOTAL_VACCINATIONS (country_wise_vaccine_corrected.csv)]' role='measure' type='quantitative' />
      <column caption='TOTAL VACCINATIONS (country wise vaccine corrected.csv1)' datatype='integer' name='[TOTAL_VACCINATIONS (country_wise_vaccine_corrected.csv1)]' role='measure' type='quantitative' />
      <column caption='Total Vaccinations2' datatype='integer' name='[TOTAL_VACCINATIONS]' role='measure' type='quantitative' />
      <column caption='TOTAL VACCINATIONS PER100 (country wise vaccine corrected.csv1)' datatype='real' name='[TOTAL_VACCINATIONS_PER100 (country_wise_vaccine_corrected.csv1)]' role='measure' type='quantitative' />
      <column caption='Total Vaccinations Per100' datatype='real' name='[TOTAL_VACCINATIONS_PER100]' role='measure' type='quantitative' />
      <column caption='Travel' datatype='integer' name='[TRAVEL]' role='measure' type='quantitative' />
      <column caption='Vaccines Used' datatype='string' name='[VACCINES_USED]' role='dimension' type='nominal' />
      <column caption='Vaccine Name' datatype='string' name='[VACCINE_NAME]' role='dimension' type='nominal'>
        <aliases>
          <alias key='&quot;AstraZeneca - Vaxzevria&quot;' value='AstraZeneca' />
          <alias key='&quot;Beijing CNBG - BBIBP-CorV&quot;' value='Beijing CNBG' />
          <alias key='&quot;CanSino - Ad5-nCOV&quot;' value='CanSino' />
          <alias key='&quot;Gamaleya - Sputnik V&quot;' value='Sputnik V' />
          <alias key='&quot;Janssen - Ad26.COV 2.5&quot;' value='Janssen' />
          <alias key='&quot;Moderna - mRNA-1273&quot;' value='Moderna' />
          <alias key='&quot;Pfizer BioNTech - Comirnaty&quot;' value='Pfizer' />
          <alias key='&quot;Sinovac - CoronaVac&quot;' value='Sinovac' />
        </aliases>
      </column>
      <column datatype='string' name='[WHO_REGION (country_wise_vaccine_corrected.csv)]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
      <column caption='WHO REGION (country wise vaccine corrected.csv1)' datatype='string' name='[WHO_REGION (country_wise_vaccine_corrected.csv1)]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
      <column caption='WHO REGION (vaccination-data including type.csv)' datatype='string' name='[WHO_REGION (vaccination-data including type.csv)]' role='dimension' type='nominal' />
      <column caption='Who Region' datatype='string' name='[WHO_REGION]' role='dimension' type='nominal' />
      <column caption='WHO region' datatype='string' name='[WHO_region]' role='dimension' type='nominal' />
      <column datatype='integer' name='[Year]' role='dimension' type='quantitative' />
      <_.fcp.ObjectModelTableType.true...column caption='OWID_corrected.csv' datatype='table' name='[__tableau_internal_object_id__].[OWID_corrected.csv_B4ACD67A87B4404887CB919819A24FEA]' role='measure' type='quantitative' />
      <_.fcp.ObjectModelTableType.true...column caption='WHO-COVID-19-global-data.csv' datatype='table' name='[__tableau_internal_object_id__].[WHO-COVID-19-global-data.csv_B3A824B9636C4E73BDBC43926F7E6899]' role='measure' type='quantitative' />
      <_.fcp.ObjectModelTableType.true...column caption='country-coordinates-world.csv1' datatype='table' name='[__tableau_internal_object_id__].[country-coordinates-world.csv_1D76607D01484E97AEC7FBE946584349]' role='measure' type='quantitative' />
      <_.fcp.ObjectModelTableType.true...column caption='country_wise_vaccine_corrected.csv' datatype='table' name='[__tableau_internal_object_id__].[country_wise_vaccine_corrected.csv_8913991FE5B346E790D318DF97DEDF4D]' role='measure' type='quantitative' />
      <_.fcp.ObjectModelTableType.true...column caption='country_wise_vaccine_corrected.csv1' datatype='table' name='[__tableau_internal_object_id__].[country_wise_vaccine_corrected.csv_A7183516371C43B0BF29EFCB714BF247]' role='measure' type='quantitative' />
      <_.fcp.ObjectModelTableType.true...column caption='covid-vaccine-doses-by-manufacturer-revised.csv' datatype='table' name='[__tableau_internal_object_id__].[covid-vaccine-doses-by-manufacturer-revised.csv_ACE6AD28CF574EC48A4F6EF61F12F02C]' role='measure' type='quantitative' />
      <_.fcp.ObjectModelTableType.true...column caption='income_groups.csv' datatype='table' name='[__tableau_internal_object_id__].[income_groups.csv_D90A031EAC16464D83786B51F53EA51D]' role='measure' type='quantitative' />
      <_.fcp.ObjectModelTableType.true...column caption='phsm-severity-data.csv' datatype='table' name='[__tableau_internal_object_id__].[phsm-severity-data.csv_7B8E0E4A369C47E89D8DF05C2F7CA58E]' role='measure' type='quantitative' />
      <_.fcp.ObjectModelTableType.true...column caption='vaccination-data including type.csv' datatype='table' name='[__tableau_internal_object_id__].[vaccination-data including type.csv_2F8D2B9EF95C4387AD9506E7B554D327]' role='measure' type='quantitative' />
      <_.fcp.ObjectModelTableType.true...column caption='vaccination_startdate.csv' datatype='table' name='[__tableau_internal_object_id__].[vaccination_startdate.csv_69286631C6C440CAACEB7DDA6EBA13A8]' role='measure' type='quantitative' />
      <_.fcp.ObjectModelTableType.true...column caption='vaccinations-by-age-group.csv' datatype='table' name='[__tableau_internal_object_id__].[vaccinations-by-age-group.csv_E0C3689A2C26496B87A222512D2E35DF]' role='measure' type='quantitative' />
      <column caption='Age Group' datatype='string' name='[age_group]' role='dimension' type='nominal' />
      <column caption='Date (Vaccinations-By-Age-Group.Csv)' datatype='date' name='[date (vaccinations-by-age-group.csv)]' role='dimension' type='ordinal' />
      <column caption='Date' datatype='date' name='[date]' role='dimension' type='ordinal' />
      <column caption='Diabetes Prevalence' datatype='real' name='[diabetes_prevalence]' role='measure' type='quantitative' />
      <column caption='Extreme Poverty' datatype='real' name='[extreme_poverty]' role='measure' type='quantitative' />
      <column caption='Female Smokers' datatype='real' name='[female_smokers]' role='measure' type='quantitative' />
      <column caption='Gdp Per Capita' datatype='real' name='[gdp_per_capita]' role='measure' type='quantitative' />
      <column caption='Handwashing Facilities' datatype='real' name='[handwashing_facilities]' role='measure' type='quantitative' />
      <column caption='Human Development Index' datatype='real' name='[human_development_index]' role='measure' type='quantitative' />
      <column caption='Iso Code' datatype='string' name='[iso_code]' role='dimension' type='nominal' />
      <column aggregation='Avg' caption='Latitude (Country-Coordinates-World.Csv1)' datatype='real' name='[latitude (country-coordinates-world.csv1)]' role='measure' semantic-role='[Geographical].[Latitude]' type='quantitative' />
      <column caption='Life Expectancy' datatype='real' name='[life_expectancy]' role='measure' type='quantitative' />
      <column caption='Location' datatype='string' name='[location]' role='dimension' type='nominal' />
      <column aggregation='Avg' caption='Longitude (Country-Coordinates-World.Csv1)' datatype='real' name='[longitude (country-coordinates-world.csv1)]' role='measure' semantic-role='[Geographical].[Longitude]' type='quantitative' />
      <column caption='Male Smokers' datatype='real' name='[male_smokers]' role='measure' type='quantitative' />
      <column caption='Median Age' datatype='real' name='[median_age]' role='measure' type='quantitative' />
      <column caption='New Cases' datatype='real' name='[new_cases]' role='measure' type='quantitative' />
      <column caption='New Cases Per Million' datatype='real' name='[new_cases_per_million]' role='measure' type='quantitative' />
      <column caption='New Deaths' datatype='real' name='[new_deaths]' role='measure' type='quantitative' />
      <column caption='New Deaths Per Million' datatype='real' name='[new_deaths_per_million]' role='measure' type='quantitative' />
      <column caption='New Vaccinations' datatype='integer' name='[new_vaccinations]' role='measure' type='quantitative' />
      <column caption='New Vaccinations Per Million' datatype='integer' name='[new_vaccinations_per_million]' role='measure' type='quantitative' />
      <column caption='People Fully Vaccinated' datatype='integer' name='[people_fully_vaccinated]' role='measure' type='quantitative' />
      <column caption='People Fully Vaccinated Per Hundred (Vaccinations-By-Age-Group.Csv)' datatype='real' name='[people_fully_vaccinated_per_hundred (vaccinations-by-age-group.csv)]' role='measure' type='quantitative' />
      <column caption='People Fully Vaccinated Per Hundred' datatype='real' name='[people_fully_vaccinated_per_hundred]' role='measure' type='quantitative' />
      <column caption='People Vaccinated' datatype='integer' name='[people_vaccinated]' role='measure' type='quantitative' />
      <column caption='People Vaccinated Per Hundred (Vaccinations-By-Age-Group.Csv)' datatype='real' name='[people_vaccinated_per_hundred (vaccinations-by-age-group.csv)]' role='measure' type='quantitative' />
      <column caption='People Vaccinated Per Hundred' datatype='real' name='[people_vaccinated_per_hundred]' role='measure' type='quantitative' />
      <column caption='Population' datatype='integer' name='[population]' role='measure' type='quantitative' />
      <column caption='Population Density' datatype='real' name='[population_density]' role='measure' type='quantitative' />
      <column caption='Positive Rate' datatype='real' name='[positive_rate]' role='measure' type='quantitative' />
      <column caption='Total Cases' datatype='integer' name='[total_cases]' role='measure' type='quantitative' />
      <column caption='Total Cases Per Million' datatype='real' name='[total_cases_per_million]' role='measure' type='quantitative' />
      <column caption='Total Deaths' datatype='integer' name='[total_deaths]' role='measure' type='quantitative' />
      <column caption='Total Deaths Per Million' datatype='real' name='[total_deaths_per_million]' role='measure' type='quantitative' />
      <column caption='Total Vaccinations' datatype='integer' name='[total_vaccinations]' role='measure' type='quantitative' />
      <column caption='Total Vaccinations Per Hundred' datatype='real' name='[total_vaccinations_per_hundred]' role='measure' type='quantitative' />
      <column caption='Vac 0 (Country Wise Vaccine Corrected.Csv1)' datatype='string' name='[vac_0 (country_wise_vaccine_corrected.csv1)]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
      <column caption='Vac 1 (Country Wise Vaccine Corrected.Csv1)' datatype='string' name='[vac_1 (country_wise_vaccine_corrected.csv1)]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
      <column caption='Vac 1' datatype='string' name='[vac_1]' role='dimension' type='nominal' />
      <column caption='Vac 2 (Country Wise Vaccine Corrected.Csv1)' datatype='string' name='[vac_2 (country_wise_vaccine_corrected.csv1)]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
      <column caption='Vac 2' datatype='string' name='[vac_2]' role='dimension' type='nominal' />
      <column caption='Vac 3 (Country Wise Vaccine Corrected.Csv1)' datatype='string' name='[vac_3 (country_wise_vaccine_corrected.csv1)]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
      <column caption='Vac 3' datatype='string' name='[vac_3]' role='dimension' type='nominal' />
      <column caption='Vac 4 (Country Wise Vaccine Corrected.Csv1)' datatype='string' name='[vac_4 (country_wise_vaccine_corrected.csv1)]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
      <column caption='Vac 4' datatype='string' name='[vac_4]' role='dimension' type='nominal' />
      <column caption='Vac 5 (Country Wise Vaccine Corrected.Csv1)' datatype='string' name='[vac_5 (country_wise_vaccine_corrected.csv1)]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
      <column caption='Vac 5' datatype='string' name='[vac_5]' role='dimension' type='nominal' />
      <column caption='Vac 6 (Country Wise Vaccine Corrected.Csv1)' datatype='string' name='[vac_6 (country_wise_vaccine_corrected.csv1)]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
      <column caption='Vac 6' datatype='string' name='[vac_6]' role='dimension' type='nominal' />
      <column caption='Vac 7 (Country Wise Vaccine Corrected.Csv1)' datatype='string' name='[vac_7 (country_wise_vaccine_corrected.csv1)]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
      <column caption='Vac 7' datatype='string' name='[vac_7]' role='dimension' type='nominal' />
      <column caption='Vac 8 (Country Wise Vaccine Corrected.Csv1)' datatype='string' name='[vac_8 (country_wise_vaccine_corrected.csv1)]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
      <column caption='Vac 8' datatype='string' name='[vac_8]' role='dimension' type='nominal' />
      <column caption='vac ID (country wise vaccine corrected.csv1)' datatype='string' name='[vac_ID (country_wise_vaccine_corrected.csv1)]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
      <column-instance column='[PERSONS_FULLY_VACCINATED]' derivation='Attribute' name='[attr:PERSONS_FULLY_VACCINATED:qk]' pivot='key' type='quantitative' />
      <column-instance column='[TOTAL_VACCINATIONS]' derivation='Attribute' name='[attr:TOTAL_VACCINATIONS:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Janssen]' derivation='Avg' name='[avg:Janssen:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Moderna]' derivation='Avg' name='[avg:Moderna:qk]' pivot='key' type='quantitative' />
      <column-instance column='[PERSONS_FULLY_VACCINATED]' derivation='Avg' name='[avg:PERSONS_FULLY_VACCINATED:qk]' pivot='key' type='quantitative' />
      <column-instance column='[PERSONS_FULLY_VACCINATED_PER100]' derivation='Avg' name='[avg:PERSONS_FULLY_VACCINATED_PER100:qk]' pivot='key' type='quantitative' />
      <column-instance column='[PERSONS_VACCINATED_1PLUS_DOSE]' derivation='Avg' name='[avg:PERSONS_VACCINATED_1PLUS_DOSE:qk]' pivot='key' type='quantitative' />
      <column-instance column='[PERSONS_VACCINATED_1PLUS_DOSE_PER100]' derivation='Avg' name='[avg:PERSONS_VACCINATED_1PLUS_DOSE_PER100:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Pfizer]' derivation='Avg' name='[avg:Pfizer:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Sinopharm]' derivation='Avg' name='[avg:Sinopharm:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Sinovac]' derivation='Avg' name='[avg:Sinovac:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Sputnik V]' derivation='Avg' name='[avg:Sputnik V:qk]' pivot='key' type='quantitative' />
      <column-instance column='[TOTAL_VACCINATIONS]' derivation='Avg' name='[avg:TOTAL_VACCINATIONS:qk]' pivot='key' type='quantitative' />
      <column-instance column='[TOTAL_VACCINATIONS_PER100]' derivation='Avg' name='[avg:TOTAL_VACCINATIONS_PER100:qk]' pivot='key' type='quantitative' />
      <column-instance column='[diabetes_prevalence]' derivation='Avg' name='[avg:diabetes_prevalence:qk]' pivot='key' type='quantitative' />
      <column-instance column='[female_smokers]' derivation='Avg' name='[avg:female_smokers:qk]' pivot='key' type='quantitative' />
      <column-instance column='[handwashing_facilities]' derivation='Avg' name='[avg:handwashing_facilities:qk]' pivot='key' type='quantitative' />
      <column-instance column='[human_development_index]' derivation='Avg' name='[avg:human_development_index:qk]' pivot='key' type='quantitative' />
      <column-instance column='[male_smokers]' derivation='Avg' name='[avg:male_smokers:qk]' pivot='key' type='quantitative' />
      <column-instance column='[new_cases]' derivation='Avg' name='[avg:new_cases:qk]' pivot='key' type='quantitative' />
      <column-instance column='[new_deaths]' derivation='Avg' name='[avg:new_deaths:qk]' pivot='key' type='quantitative' />
      <column-instance column='[new_vaccinations]' derivation='Avg' name='[avg:new_vaccinations:qk]' pivot='key' type='quantitative' />
      <column-instance column='[people_fully_vaccinated]' derivation='Avg' name='[avg:people_fully_vaccinated:qk]' pivot='key' type='quantitative' />
      <column-instance column='[population]' derivation='Avg' name='[avg:population:qk]' pivot='key' type='quantitative' />
      <column-instance column='[population_density]' derivation='Avg' name='[avg:population_density:qk]' pivot='key' type='quantitative' />
      <column-instance column='[total_vaccinations]' derivation='Avg' name='[avg:total_vaccinations:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Calculation_489977580833480704]' derivation='User' name='[diff:usr:Calculation_489977580833480704:qk]' pivot='key' type='quantitative'>
        <table-calc diff-options='Relative' ordering-type='Rows' type='Difference'>
          <address>
            <value>-1</value>
          </address>
        </table-calc>
      </column-instance>
      <column-instance column='[AstraZeneca]' derivation='Max' name='[max:AstraZeneca:qk]' pivot='key' type='quantitative' />
      <column-instance column='[CanSino]' derivation='Max' name='[max:CanSino:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Janssen]' derivation='Max' name='[max:Janssen:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Moderna]' derivation='Max' name='[max:Moderna:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Pfizer]' derivation='Max' name='[max:Pfizer:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Sinopharm]' derivation='Max' name='[max:Sinopharm:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Sinovac]' derivation='Max' name='[max:Sinovac:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Sputnik V]' derivation='Max' name='[max:Sputnik V:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Moderna]' derivation='Min' name='[min:Moderna:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Day]' derivation='Month' name='[mn:Day:ok]' pivot='key' type='ordinal' />
      <column-instance column='[date]' derivation='Month' name='[mn:date:ok]' pivot='key' type='ordinal' />
      <column-instance column='[COUNTRY (vaccination-data including type.csv)]' derivation='None' name='[none:COUNTRY (vaccination-data including type.csv):nk]' pivot='key' type='nominal' />
      <column-instance column='[COUNTRY]' derivation='None' name='[none:COUNTRY:nk]' pivot='key' type='nominal' />
      <column-instance column='[Country (WHO-COVID-19-global-data.csv)]' derivation='None' name='[none:Country (WHO-COVID-19-global-data.csv):nk]' pivot='key' type='nominal' />
      <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
      <column-instance column='[VACCINE_NAME]' derivation='None' name='[none:VACCINE_NAME:nk]' pivot='key' type='nominal' />
      <column-instance column='[WHO_REGION (country_wise_vaccine_corrected.csv)]' derivation='None' name='[none:WHO_REGION (country_wise_vaccine_corrected.csv):nk]' pivot='key' type='nominal' />
      <column-instance column='[date]' derivation='Quarter' name='[qr:date:ok]' pivot='key' type='ordinal' />
      <column-instance column='[AstraZeneca]' derivation='Sum' name='[sum:AstraZeneca:qk]' pivot='key' type='quantitative' />
      <column-instance column='[CanSino]' derivation='Sum' name='[sum:CanSino:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Moderna]' derivation='Sum' name='[sum:Moderna:qk]' pivot='key' type='quantitative' />
      <column-instance column='[New_cases]' derivation='Sum' name='[sum:New_cases:qk]' pivot='key' type='quantitative' />
      <column-instance column='[PERSONS_FULLY_VACCINATED (country_wise_vaccine_corrected.csv)]' derivation='Sum' name='[sum:PERSONS_FULLY_VACCINATED (country_wise_vaccine_corrected.csv):qk]' pivot='key' type='quantitative' />
      <column-instance column='[PERSONS_FULLY_VACCINATED]' derivation='Sum' name='[sum:PERSONS_FULLY_VACCINATED:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Pfizer]' derivation='Sum' name='[sum:Pfizer:qk]' pivot='key' type='quantitative' />
      <column-instance column='[TOTAL_VACCINATIONS (country_wise_vaccine_corrected.csv)]' derivation='Sum' name='[sum:TOTAL_VACCINATIONS (country_wise_vaccine_corrected.csv):qk]' pivot='key' type='quantitative' />
      <column-instance column='[TOTAL_VACCINATIONS (country_wise_vaccine_corrected.csv1)]' derivation='Sum' name='[sum:TOTAL_VACCINATIONS (country_wise_vaccine_corrected.csv1):qk]' pivot='key' type='quantitative' />
      <column-instance column='[TOTAL_VACCINATIONS]' derivation='Sum' name='[sum:TOTAL_VACCINATIONS:qk]' pivot='key' type='quantitative' />
      <column-instance column='[new_cases]' derivation='Sum' name='[sum:new_cases:qk]' pivot='key' type='quantitative' />
      <column-instance column='[new_deaths]' derivation='Sum' name='[sum:new_deaths:qk]' pivot='key' type='quantitative' />
      <column-instance column='[new_vaccinations]' derivation='Sum' name='[sum:new_vaccinations:qk]' pivot='key' type='quantitative' />
      <column-instance column='[people_fully_vaccinated]' derivation='Sum' name='[sum:people_fully_vaccinated:qk]' pivot='key' type='quantitative' />
      <column-instance column='[people_fully_vaccinated_per_hundred (vaccinations-by-age-group.csv)]' derivation='Sum' name='[sum:people_fully_vaccinated_per_hundred (vaccinations-by-age-group.csv):qk]' pivot='key' type='quantitative' />
      <column-instance column='[people_vaccinated_per_hundred (vaccinations-by-age-group.csv)]' derivation='Sum' name='[sum:people_vaccinated_per_hundred (vaccinations-by-age-group.csv):qk]' pivot='key' type='quantitative' />
      <column-instance column='[Calculation_489977580833480704]' derivation='User' name='[usr:Calculation_489977580833480704:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Calculation_489977580833480704]' derivation='User' name='[usr:Calculation_489977580833480704:vtavg:qk]' pivot='key' type='quantitative' visual-totals='Avg' />
      <column-instance column='[Calculation_489977581003325443]' derivation='User' name='[usr:Calculation_489977581003325443:qk]' pivot='key' type='quantitative' />
      <group hidden='true' name='[Exclusions (Country,MONTH(Date))]' name-style='unqualified' user:auto-column='exclude'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[none:Country:nk]' />
          <groupfilter function='level-members' level='[mn:date:ok]' />
        </groupfilter>
      </group>
      <layout _.fcp.SchemaViewerObjectModel.false...dim-percentage='0.5' _.fcp.SchemaViewerObjectModel.false...measure-percentage='0.4' _.fcp.SchemaViewerObjectModel.true...common-percentage='1' _.fcp.SchemaViewerObjectModel.true...user-set-layout-v2='true' dim-ordering='alphabetic' measure-ordering='alphabetic' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[:Measure Names]' palette='tableau-20' type='palette'>
            <map to='#17becf'>
              <bucket>&quot;[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[avg:new_vaccinations:qk]&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[avg:diabetes_prevalence:qk]&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[avg:new_deaths:qk]&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[max:AstraZeneca:qk]&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[sum:new_cases:qk]&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[sum:new_deaths:qk]&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[avg:people_fully_vaccinated:qk]&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[max:Pfizer:qk]&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[sum:TOTAL_VACCINATIONS (country_wise_vaccine_corrected.csv1):qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[avg:Pfizer:qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[avg:population_density:qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[diff:usr:Calculation_489977580833480704:qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[sum:AstraZeneca:qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[sum:Pfizer:qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[usr:Calculation_489977580833480704:qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[usr:Calculation_489977580833480704:vtavg:qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[usr:Calculation1:qk]&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[attr:TOTAL_VACCINATIONS:qk]&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[avg:TOTAL_VACCINATIONS:qk]&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[sum:TOTAL_VACCINATIONS:qk]&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[sum:people_fully_vaccinated:qk]&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[max:Sinopharm:qk]&quot;</bucket>
            </map>
            <map to='#9c755f'>
              <bucket>&quot;[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[avg:total_vaccinations:qk]&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[avg:female_smokers:qk]&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[max:CanSino:qk]&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[sum:TOTAL_VACCINATIONS (country_wise_vaccine_corrected.csv):qk]&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[avg:new_cases:qk]&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[max:Sinovac:qk]&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[sum:New_cases:qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[attr:PERSONS_FULLY_VACCINATED:qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[avg:PERSONS_FULLY_VACCINATED:qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[none:COUNTRY (vaccination-data including type.csv):nk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[sum:PERSONS_FULLY_VACCINATED:qk]&quot;</bucket>
            </map>
            <map to='#edc948'>
              <bucket>&quot;[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[sum:PERSONS_FULLY_VACCINATED (country_wise_vaccine_corrected.csv):qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[avg:Moderna:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[min:Moderna:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[sum:CanSino:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[sum:Moderna:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[sum:new_vaccinations:qk]&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[avg:handwashing_facilities:qk]&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[avg:male_smokers:qk]&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[max:Janssen:qk]&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[usr:Calculation_489977581003325443:qk]&quot;</bucket>
            </map>
            <map to='#ff9896'>
              <bucket>&quot;[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[max:Sputnik V:qk]&quot;</bucket>
            </map>
            <map to='#ff9da7'>
              <bucket>&quot;[federated.1pylrsr1mlnqmt1bo4mju0513a1x]&quot;</bucket>
            </map>
            <map to='#ff9da7'>
              <bucket>&quot;[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[avg:population:qk]&quot;</bucket>
            </map>
            <map to='#ffbb78'>
              <bucket>&quot;[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[avg:human_development_index:qk]&quot;</bucket>
            </map>
            <map to='#ffbb78'>
              <bucket>&quot;[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[max:Moderna:qk]&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='shape' field='[none:Country:nk]' type='shape'>
            <map to='Flags/France.png'>
              <bucket>&quot;France&quot;</bucket>
            </map>
            <map to='Flags/India.png'>
              <bucket>&quot;India&quot;</bucket>
            </map>
            <map to='Flags/Japan.png'>
              <bucket>&quot;Japan&quot;</bucket>
            </map>
            <map to='Flags/Russia.png'>
              <bucket>&quot;Russia&quot;</bucket>
            </map>
            <map to='Flags/UK.png'>
              <bucket>&quot;United Kingdom&quot;</bucket>
            </map>
            <map to='Flags/USA.png'>
              <bucket>&quot;United States&quot;</bucket>
            </map>
            <map to='Flags/brazil.png'>
              <bucket>&quot;Brazil&quot;</bucket>
            </map>
            <map to='Flags/china.png'>
              <bucket>&quot;China&quot;</bucket>
            </map>
            <map to='Flags/germany.png'>
              <bucket>&quot;Germany&quot;</bucket>
            </map>
            <map to='Flags/indonesia.png'>
              <bucket>&quot;Indonesia&quot;</bucket>
            </map>
            <map to='Flags/italy.png'>
              <bucket>&quot;Italy&quot;</bucket>
            </map>
            <map to='Flags/italy.png'>
              <bucket>&quot;Turkey&quot;</bucket>
            </map>
            <map to='asterisk'>
              <bucket>&quot;Angola&quot;</bucket>
            </map>
            <map to='asterisk'>
              <bucket>&quot;Bahrain&quot;</bucket>
            </map>
            <map to='asterisk'>
              <bucket>&quot;Bonaire Sint Eustatius and Saba&quot;</bucket>
            </map>
            <map to='asterisk'>
              <bucket>&quot;Botswana&quot;</bucket>
            </map>
            <map to='asterisk'>
              <bucket>&quot;Chad&quot;</bucket>
            </map>
            <map to='asterisk'>
              <bucket>&quot;Czechia&quot;</bucket>
            </map>
            <map to='asterisk'>
              <bucket>&quot;Eswatini&quot;</bucket>
            </map>
            <map to='asterisk'>
              <bucket>&quot;Ghana&quot;</bucket>
            </map>
            <map to='asterisk'>
              <bucket>&quot;Honduras&quot;</bucket>
            </map>
            <map to='asterisk'>
              <bucket>&quot;International&quot;</bucket>
            </map>
            <map to='asterisk'>
              <bucket>&quot;Laos&quot;</bucket>
            </map>
            <map to='asterisk'>
              <bucket>&quot;Lesotho&quot;</bucket>
            </map>
            <map to='asterisk'>
              <bucket>&quot;Malta&quot;</bucket>
            </map>
            <map to='asterisk'>
              <bucket>&quot;Myanmar&quot;</bucket>
            </map>
            <map to='asterisk'>
              <bucket>&quot;Niue&quot;</bucket>
            </map>
            <map to='asterisk'>
              <bucket>&quot;Poland&quot;</bucket>
            </map>
            <map to='asterisk'>
              <bucket>&quot;San Marino&quot;</bucket>
            </map>
            <map to='asterisk'>
              <bucket>&quot;Solomon Islands&quot;</bucket>
            </map>
            <map to='asterisk'>
              <bucket>&quot;Tajikistan&quot;</bucket>
            </map>
            <map to='asterisk'>
              <bucket>&quot;Ukraine&quot;</bucket>
            </map>
            <map to='circle'>
              <bucket>&quot;Afghanistan&quot;</bucket>
            </map>
            <map to='circle'>
              <bucket>&quot;Australia&quot;</bucket>
            </map>
            <map to='circle'>
              <bucket>&quot;Benin&quot;</bucket>
            </map>
            <map to='circle'>
              <bucket>&quot;Cameroon&quot;</bucket>
            </map>
            <map to='circle'>
              <bucket>&quot;Costa Rica&quot;</bucket>
            </map>
            <map to='circle'>
              <bucket>&quot;Egypt&quot;</bucket>
            </map>
            <map to='circle'>
              <bucket>&quot;Gabon&quot;</bucket>
            </map>
            <map to='circle'>
              <bucket>&quot;Guernsey&quot;</bucket>
            </map>
            <map to='circle'>
              <bucket>&quot;Guinea&quot;</bucket>
            </map>
            <map to='circle'>
              <bucket>&quot;Iran&quot;</bucket>
            </map>
            <map to='circle'>
              <bucket>&quot;Isle of Man&quot;</bucket>
            </map>
            <map to='circle'>
              <bucket>&quot;Kosovo&quot;</bucket>
            </map>
            <map to='circle'>
              <bucket>&quot;Madagascar&quot;</bucket>
            </map>
            <map to='circle'>
              <bucket>&quot;Malawi&quot;</bucket>
            </map>
            <map to='circle'>
              <bucket>&quot;Montenegro&quot;</bucket>
            </map>
            <map to='circle'>
              <bucket>&quot;New Zealand&quot;</bucket>
            </map>
            <map to='circle'>
              <bucket>&quot;Palau&quot;</bucket>
            </map>
            <map to='circle'>
              <bucket>&quot;Papua New Guinea&quot;</bucket>
            </map>
            <map to='circle'>
              <bucket>&quot;Saint Kitts and Nevis&quot;</bucket>
            </map>
            <map to='circle'>
              <bucket>&quot;Sierra Leone&quot;</bucket>
            </map>
            <map to='circle'>
              <bucket>&quot;Sudan&quot;</bucket>
            </map>
            <map to='circle'>
              <bucket>&quot;Syria&quot;</bucket>
            </map>
            <map to='circle'>
              <bucket>&quot;Timor&quot;</bucket>
            </map>
            <map to='circle'>
              <bucket>&quot;Zimbabwe&quot;</bucket>
            </map>
            <map to='diamond'>
              <bucket>&quot;Anguilla&quot;</bucket>
            </map>
            <map to='diamond'>
              <bucket>&quot;Bangladesh&quot;</bucket>
            </map>
            <map to='diamond'>
              <bucket>&quot;Cape Verde&quot;</bucket>
            </map>
            <map to='diamond'>
              <bucket>&quot;Chile&quot;</bucket>
            </map>
            <map to='diamond'>
              <bucket>&quot;Denmark&quot;</bucket>
            </map>
            <map to='diamond'>
              <bucket>&quot;Ethiopia&quot;</bucket>
            </map>
            <map to='diamond'>
              <bucket>&quot;Gibraltar&quot;</bucket>
            </map>
            <map to='diamond'>
              <bucket>&quot;Iceland&quot;</bucket>
            </map>
            <map to='diamond'>
              <bucket>&quot;Jersey&quot;</bucket>
            </map>
            <map to='diamond'>
              <bucket>&quot;Liberia&quot;</bucket>
            </map>
            <map to='diamond'>
              <bucket>&quot;Marshall Islands&quot;</bucket>
            </map>
            <map to='diamond'>
              <bucket>&quot;Mauritania&quot;</bucket>
            </map>
            <map to='diamond'>
              <bucket>&quot;Namibia&quot;</bucket>
            </map>
            <map to='diamond'>
              <bucket>&quot;North Macedonia&quot;</bucket>
            </map>
            <map to='diamond'>
              <bucket>&quot;Palestine&quot;</bucket>
            </map>
            <map to='diamond'>
              <bucket>&quot;Portugal&quot;</bucket>
            </map>
            <map to='diamond'>
              <bucket>&quot;Sao Tome and Principe&quot;</bucket>
            </map>
            <map to='diamond'>
              <bucket>&quot;Somalia&quot;</bucket>
            </map>
            <map to='diamond'>
              <bucket>&quot;Thailand&quot;</bucket>
            </map>
            <map to='diamond'>
              <bucket>&quot;Tokelau&quot;</bucket>
            </map>
            <map to='diamond'>
              <bucket>&quot;Uruguay&quot;</bucket>
            </map>
            <map to='down-triangle'>
              <bucket>&quot;Argentina&quot;</bucket>
            </map>
            <map to='down-triangle'>
              <bucket>&quot;Belarus&quot;</bucket>
            </map>
            <map to='down-triangle'>
              <bucket>&quot;Bulgaria&quot;</bucket>
            </map>
            <map to='down-triangle'>
              <bucket>&quot;Comoros&quot;</bucket>
            </map>
            <map to='down-triangle'>
              <bucket>&quot;Cote d&apos;Ivoire&quot;</bucket>
            </map>
            <map to='down-triangle'>
              <bucket>&quot;Dominica&quot;</bucket>
            </map>
            <map to='down-triangle'>
              <bucket>&quot;Finland&quot;</bucket>
            </map>
            <map to='down-triangle'>
              <bucket>&quot;Greenland&quot;</bucket>
            </map>
            <map to='down-triangle'>
              <bucket>&quot;Hong Kong&quot;</bucket>
            </map>
            <map to='down-triangle'>
              <bucket>&quot;Hungary&quot;</bucket>
            </map>
            <map to='down-triangle'>
              <bucket>&quot;Kazakhstan&quot;</bucket>
            </map>
            <map to='down-triangle'>
              <bucket>&quot;Liechtenstein&quot;</bucket>
            </map>
            <map to='down-triangle'>
              <bucket>&quot;Mexico&quot;</bucket>
            </map>
            <map to='down-triangle'>
              <bucket>&quot;Nepal&quot;</bucket>
            </map>
            <map to='down-triangle'>
              <bucket>&quot;Oman&quot;</bucket>
            </map>
            <map to='down-triangle'>
              <bucket>&quot;Romania&quot;</bucket>
            </map>
            <map to='down-triangle'>
              <bucket>&quot;Senegal&quot;</bucket>
            </map>
            <map to='down-triangle'>
              <bucket>&quot;South Sudan&quot;</bucket>
            </map>
            <map to='down-triangle'>
              <bucket>&quot;Tonga&quot;</bucket>
            </map>
            <map to='down-triangle'>
              <bucket>&quot;Venezuela&quot;</bucket>
            </map>
            <map to='down-triangle'>
              <bucket>&quot;Wallis and Futuna&quot;</bucket>
            </map>
            <map to='left-triangle'>
              <bucket>&quot;Armenia&quot;</bucket>
            </map>
            <map to='left-triangle'>
              <bucket>&quot;Belgium&quot;</bucket>
            </map>
            <map to='left-triangle'>
              <bucket>&quot;Burkina Faso&quot;</bucket>
            </map>
            <map to='left-triangle'>
              <bucket>&quot;Congo&quot;</bucket>
            </map>
            <map to='left-triangle'>
              <bucket>&quot;Curacao&quot;</bucket>
            </map>
            <map to='left-triangle'>
              <bucket>&quot;Dominican Republic&quot;</bucket>
            </map>
            <map to='left-triangle'>
              <bucket>&quot;Grenada&quot;</bucket>
            </map>
            <map to='left-triangle'>
              <bucket>&quot;Iraq&quot;</bucket>
            </map>
            <map to='left-triangle'>
              <bucket>&quot;Kenya&quot;</bucket>
            </map>
            <map to='left-triangle'>
              <bucket>&quot;Lithuania&quot;</bucket>
            </map>
            <map to='left-triangle'>
              <bucket>&quot;Monaco&quot;</bucket>
            </map>
            <map to='left-triangle'>
              <bucket>&quot;Netherlands&quot;</bucket>
            </map>
            <map to='left-triangle'>
              <bucket>&quot;Pakistan&quot;</bucket>
            </map>
            <map to='left-triangle'>
              <bucket>&quot;Rwanda&quot;</bucket>
            </map>
            <map to='left-triangle'>
              <bucket>&quot;Serbia&quot;</bucket>
            </map>
            <map to='left-triangle'>
              <bucket>&quot;Sint Maarten (Dutch part)&quot;</bucket>
            </map>
            <map to='left-triangle'>
              <bucket>&quot;Spain&quot;</bucket>
            </map>
            <map to='left-triangle'>
              <bucket>&quot;Tanzania&quot;</bucket>
            </map>
            <map to='left-triangle'>
              <bucket>&quot;Trinidad and Tobago&quot;</bucket>
            </map>
            <map to='left-triangle'>
              <bucket>&quot;United Arab Emirates&quot;</bucket>
            </map>
            <map to='left-triangle'>
              <bucket>&quot;Vatican&quot;</bucket>
            </map>
            <map to='left-triangle'>
              <bucket>&quot;Yemen&quot;</bucket>
            </map>
            <map to='plus'>
              <bucket>&quot;Algeria&quot;</bucket>
            </map>
            <map to='plus'>
              <bucket>&quot;Azerbaijan&quot;</bucket>
            </map>
            <map to='plus'>
              <bucket>&quot;Bhutan&quot;</bucket>
            </map>
            <map to='plus'>
              <bucket>&quot;Burundi&quot;</bucket>
            </map>
            <map to='plus'>
              <bucket>&quot;Cayman Islands&quot;</bucket>
            </map>
            <map to='plus'>
              <bucket>&quot;Cuba&quot;</bucket>
            </map>
            <map to='plus'>
              <bucket>&quot;Equatorial Guinea&quot;</bucket>
            </map>
            <map to='plus'>
              <bucket>&quot;Faeroe Islands&quot;</bucket>
            </map>
            <map to='plus'>
              <bucket>&quot;Georgia&quot;</bucket>
            </map>
            <map to='plus'>
              <bucket>&quot;Guyana&quot;</bucket>
            </map>
            <map to='plus'>
              <bucket>&quot;Kuwait&quot;</bucket>
            </map>
            <map to='plus'>
              <bucket>&quot;Latvia&quot;</bucket>
            </map>
            <map to='plus'>
              <bucket>&quot;Maldives&quot;</bucket>
            </map>
            <map to='plus'>
              <bucket>&quot;Moldova&quot;</bucket>
            </map>
            <map to='plus'>
              <bucket>&quot;Morocco&quot;</bucket>
            </map>
            <map to='plus'>
              <bucket>&quot;Niger&quot;</bucket>
            </map>
            <map to='plus'>
              <bucket>&quot;Peru&quot;</bucket>
            </map>
            <map to='plus'>
              <bucket>&quot;Saint Vincent and the Grenadines&quot;</bucket>
            </map>
            <map to='plus'>
              <bucket>&quot;Slovakia&quot;</bucket>
            </map>
            <map to='plus'>
              <bucket>&quot;Sweden&quot;</bucket>
            </map>
            <map to='plus'>
              <bucket>&quot;Tuvalu&quot;</bucket>
            </map>
            <map to='right-triangle'>
              <bucket>&quot;Aruba&quot;</bucket>
            </map>
            <map to='right-triangle'>
              <bucket>&quot;Belize&quot;</bucket>
            </map>
            <map to='right-triangle'>
              <bucket>&quot;Brunei&quot;</bucket>
            </map>
            <map to='right-triangle'>
              <bucket>&quot;Cambodia&quot;</bucket>
            </map>
            <map to='right-triangle'>
              <bucket>&quot;Cook Islands&quot;</bucket>
            </map>
            <map to='right-triangle'>
              <bucket>&quot;Ecuador&quot;</bucket>
            </map>
            <map to='right-triangle'>
              <bucket>&quot;French Polynesia&quot;</bucket>
            </map>
            <map to='right-triangle'>
              <bucket>&quot;Guatemala&quot;</bucket>
            </map>
            <map to='right-triangle'>
              <bucket>&quot;Ireland&quot;</bucket>
            </map>
            <map to='right-triangle'>
              <bucket>&quot;Kiribati&quot;</bucket>
            </map>
            <map to='right-triangle'>
              <bucket>&quot;Luxembourg&quot;</bucket>
            </map>
            <map to='right-triangle'>
              <bucket>&quot;Mongolia&quot;</bucket>
            </map>
            <map to='right-triangle'>
              <bucket>&quot;New Caledonia&quot;</bucket>
            </map>
            <map to='right-triangle'>
              <bucket>&quot;Panama&quot;</bucket>
            </map>
            <map to='right-triangle'>
              <bucket>&quot;Saint Helena&quot;</bucket>
            </map>
            <map to='right-triangle'>
              <bucket>&quot;Seychelles&quot;</bucket>
            </map>
            <map to='right-triangle'>
              <bucket>&quot;South Korea&quot;</bucket>
            </map>
            <map to='right-triangle'>
              <bucket>&quot;Sri Lanka&quot;</bucket>
            </map>
            <map to='right-triangle'>
              <bucket>&quot;Tunisia&quot;</bucket>
            </map>
            <map to='right-triangle'>
              <bucket>&quot;Uzbekistan&quot;</bucket>
            </map>
            <map to='right-triangle'>
              <bucket>&quot;Vietnam&quot;</bucket>
            </map>
            <map to='right-triangle'>
              <bucket>&quot;Zambia&quot;</bucket>
            </map>
            <map to='square'>
              <bucket>&quot;Albania&quot;</bucket>
            </map>
            <map to='square'>
              <bucket>&quot;Austria&quot;</bucket>
            </map>
            <map to='square'>
              <bucket>&quot;Bermuda&quot;</bucket>
            </map>
            <map to='square'>
              <bucket>&quot;Canada&quot;</bucket>
            </map>
            <map to='square'>
              <bucket>&quot;Croatia&quot;</bucket>
            </map>
            <map to='square'>
              <bucket>&quot;Democratic Republic of Congo&quot;</bucket>
            </map>
            <map to='square'>
              <bucket>&quot;El Salvador&quot;</bucket>
            </map>
            <map to='square'>
              <bucket>&quot;Gambia&quot;</bucket>
            </map>
            <map to='square'>
              <bucket>&quot;Guinea-Bissau&quot;</bucket>
            </map>
            <map to='square'>
              <bucket>&quot;Israel&quot;</bucket>
            </map>
            <map to='square'>
              <bucket>&quot;Kyrgyzstan&quot;</bucket>
            </map>
            <map to='square'>
              <bucket>&quot;Malaysia&quot;</bucket>
            </map>
            <map to='square'>
              <bucket>&quot;Micronesia (country)&quot;</bucket>
            </map>
            <map to='square'>
              <bucket>&quot;Montserrat&quot;</bucket>
            </map>
            <map to='square'>
              <bucket>&quot;Nicaragua&quot;</bucket>
            </map>
            <map to='square'>
              <bucket>&quot;Northern Cyprus&quot;</bucket>
            </map>
            <map to='square'>
              <bucket>&quot;Paraguay&quot;</bucket>
            </map>
            <map to='square'>
              <bucket>&quot;Saint Lucia&quot;</bucket>
            </map>
            <map to='square'>
              <bucket>&quot;Singapore&quot;</bucket>
            </map>
            <map to='square'>
              <bucket>&quot;Suriname&quot;</bucket>
            </map>
            <map to='square'>
              <bucket>&quot;Turks and Caicos Islands&quot;</bucket>
            </map>
            <map to='times'>
              <bucket>&quot;Andorra&quot;</bucket>
            </map>
            <map to='times'>
              <bucket>&quot;Bahamas&quot;</bucket>
            </map>
            <map to='times'>
              <bucket>&quot;Bolivia&quot;</bucket>
            </map>
            <map to='times'>
              <bucket>&quot;Bosnia and Herzegovina&quot;</bucket>
            </map>
            <map to='times'>
              <bucket>&quot;Central African Republic&quot;</bucket>
            </map>
            <map to='times'>
              <bucket>&quot;Cyprus&quot;</bucket>
            </map>
            <map to='times'>
              <bucket>&quot;Eritrea&quot;</bucket>
            </map>
            <map to='times'>
              <bucket>&quot;Estonia&quot;</bucket>
            </map>
            <map to='times'>
              <bucket>&quot;Haiti&quot;</bucket>
            </map>
            <map to='times'>
              <bucket>&quot;Jamaica&quot;</bucket>
            </map>
            <map to='times'>
              <bucket>&quot;Lebanon&quot;</bucket>
            </map>
            <map to='times'>
              <bucket>&quot;Macao&quot;</bucket>
            </map>
            <map to='times'>
              <bucket>&quot;Mali&quot;</bucket>
            </map>
            <map to='times'>
              <bucket>&quot;Mozambique&quot;</bucket>
            </map>
            <map to='times'>
              <bucket>&quot;Nigeria&quot;</bucket>
            </map>
            <map to='times'>
              <bucket>&quot;Philippines&quot;</bucket>
            </map>
            <map to='times'>
              <bucket>&quot;Samoa&quot;</bucket>
            </map>
            <map to='times'>
              <bucket>&quot;Slovenia&quot;</bucket>
            </map>
            <map to='times'>
              <bucket>&quot;Switzerland&quot;</bucket>
            </map>
            <map to='times'>
              <bucket>&quot;Turkmenistan&quot;</bucket>
            </map>
            <map to='times'>
              <bucket>&quot;Uganda&quot;</bucket>
            </map>
            <map to='triangle'>
              <bucket>&quot;Antigua and Barbuda&quot;</bucket>
            </map>
            <map to='triangle'>
              <bucket>&quot;Barbados&quot;</bucket>
            </map>
            <map to='triangle'>
              <bucket>&quot;British Virgin Islands&quot;</bucket>
            </map>
            <map to='triangle'>
              <bucket>&quot;Colombia&quot;</bucket>
            </map>
            <map to='triangle'>
              <bucket>&quot;Djibouti&quot;</bucket>
            </map>
            <map to='triangle'>
              <bucket>&quot;Falkland Islands&quot;</bucket>
            </map>
            <map to='triangle'>
              <bucket>&quot;Fiji&quot;</bucket>
            </map>
            <map to='triangle'>
              <bucket>&quot;Greece&quot;</bucket>
            </map>
            <map to='triangle'>
              <bucket>&quot;Jordan&quot;</bucket>
            </map>
            <map to='triangle'>
              <bucket>&quot;Libya&quot;</bucket>
            </map>
            <map to='triangle'>
              <bucket>&quot;Mauritius&quot;</bucket>
            </map>
            <map to='triangle'>
              <bucket>&quot;Nauru&quot;</bucket>
            </map>
            <map to='triangle'>
              <bucket>&quot;Norway&quot;</bucket>
            </map>
            <map to='triangle'>
              <bucket>&quot;Pitcairn&quot;</bucket>
            </map>
            <map to='triangle'>
              <bucket>&quot;Qatar&quot;</bucket>
            </map>
            <map to='triangle'>
              <bucket>&quot;Saudi Arabia&quot;</bucket>
            </map>
            <map to='triangle'>
              <bucket>&quot;South Africa&quot;</bucket>
            </map>
            <map to='triangle'>
              <bucket>&quot;Taiwan&quot;</bucket>
            </map>
            <map to='triangle'>
              <bucket>&quot;Togo&quot;</bucket>
            </map>
            <map to='triangle'>
              <bucket>&quot;Vanuatu&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='shape' field='[none:COUNTRY:nk]' type='shape'>
            <map to='asterisk'>
              <bucket>&quot;Andorra&quot;</bucket>
            </map>
            <map to='asterisk'>
              <bucket>&quot;Bahamas&quot;</bucket>
            </map>
            <map to='asterisk'>
              <bucket>&quot;Bolivia (Plurinational State of)&quot;</bucket>
            </map>
            <map to='asterisk'>
              <bucket>&quot;Cabo Verde&quot;</bucket>
            </map>
            <map to='asterisk'>
              <bucket>&quot;Comoros&quot;</bucket>
            </map>
            <map to='asterisk'>
              <bucket>&quot;Democratic Republic of the Congo&quot;</bucket>
            </map>
            <map to='asterisk'>
              <bucket>&quot;Eswatini&quot;</bucket>
            </map>
            <map to='asterisk'>
              <bucket>&quot;Gambia&quot;</bucket>
            </map>
            <map to='asterisk'>
              <bucket>&quot;Guatemala&quot;</bucket>
            </map>
            <map to='asterisk'>
              <bucket>&quot;Indonesia&quot;</bucket>
            </map>
            <map to='asterisk'>
              <bucket>&quot;Jordan&quot;</bucket>
            </map>
            <map to='asterisk'>
              <bucket>&quot;Lesotho&quot;</bucket>
            </map>
            <map to='asterisk'>
              <bucket>&quot;Mali&quot;</bucket>
            </map>
            <map to='asterisk'>
              <bucket>&quot;Montenegro&quot;</bucket>
            </map>
            <map to='asterisk'>
              <bucket>&quot;New Zealand&quot;</bucket>
            </map>
            <map to='asterisk'>
              <bucket>&quot;Pakistan&quot;</bucket>
            </map>
            <map to='asterisk'>
              <bucket>&quot;Puerto Rico&quot;</bucket>
            </map>
            <map to='asterisk'>
              <bucket>&quot;Saint Lucia&quot;</bucket>
            </map>
            <map to='asterisk'>
              <bucket>&quot;Singapore&quot;</bucket>
            </map>
            <map to='asterisk'>
              <bucket>&quot;Sri Lanka&quot;</bucket>
            </map>
            <map to='asterisk'>
              <bucket>&quot;Togo&quot;</bucket>
            </map>
            <map to='asterisk'>
              <bucket>&quot;Ukraine&quot;</bucket>
            </map>
            <map to='asterisk'>
              <bucket>&quot;Yemen&quot;</bucket>
            </map>
            <map to='circle'>
              <bucket>&quot;Afghanistan&quot;</bucket>
            </map>
            <map to='circle'>
              <bucket>&quot;Aruba&quot;</bucket>
            </map>
            <map to='circle'>
              <bucket>&quot;Belize&quot;</bucket>
            </map>
            <map to='circle'>
              <bucket>&quot;British Virgin Islands&quot;</bucket>
            </map>
            <map to='circle'>
              <bucket>&quot;Chad&quot;</bucket>
            </map>
            <map to='circle'>
              <bucket>&quot;Cuba&quot;</bucket>
            </map>
            <map to='circle'>
              <bucket>&quot;Egypt&quot;</bucket>
            </map>
            <map to='circle'>
              <bucket>&quot;France&quot;</bucket>
            </map>
            <map to='circle'>
              <bucket>&quot;Greenland&quot;</bucket>
            </map>
            <map to='circle'>
              <bucket>&quot;Honduras&quot;</bucket>
            </map>
            <map to='circle'>
              <bucket>&quot;Italy&quot;</bucket>
            </map>
            <map to='circle'>
              <bucket>&quot;Kyrgyzstan&quot;</bucket>
            </map>
            <map to='circle'>
              <bucket>&quot;Madagascar&quot;</bucket>
            </map>
            <map to='circle'>
              <bucket>&quot;Mexico&quot;</bucket>
            </map>
            <map to='circle'>
              <bucket>&quot;Nauru&quot;</bucket>
            </map>
            <map to='circle'>
              <bucket>&quot;Northern Mariana Islands (Commonwealth of the)&quot;</bucket>
            </map>
            <map to='circle'>
              <bucket>&quot;Philippines&quot;</bucket>
            </map>
            <map to='circle'>
              <bucket>&quot;Rwanda&quot;</bucket>
            </map>
            <map to='circle'>
              <bucket>&quot;Senegal&quot;</bucket>
            </map>
            <map to='circle'>
              <bucket>&quot;Somalia&quot;</bucket>
            </map>
            <map to='circle'>
              <bucket>&quot;Tajikistan&quot;</bucket>
            </map>
            <map to='circle'>
              <bucket>&quot;Turkmenistan&quot;</bucket>
            </map>
            <map to='circle'>
              <bucket>&quot;Vanuatu&quot;</bucket>
            </map>
            <map to='diamond'>
              <bucket>&quot;Angola&quot;</bucket>
            </map>
            <map to='diamond'>
              <bucket>&quot;Bahrain&quot;</bucket>
            </map>
            <map to='diamond'>
              <bucket>&quot;Bonaire&quot;</bucket>
            </map>
            <map to='diamond'>
              <bucket>&quot;Cambodia&quot;</bucket>
            </map>
            <map to='diamond'>
              <bucket>&quot;Congo&quot;</bucket>
            </map>
            <map to='diamond'>
              <bucket>&quot;Denmark&quot;</bucket>
            </map>
            <map to='diamond'>
              <bucket>&quot;Ethiopia&quot;</bucket>
            </map>
            <map to='diamond'>
              <bucket>&quot;Georgia&quot;</bucket>
            </map>
            <map to='diamond'>
              <bucket>&quot;Guernsey&quot;</bucket>
            </map>
            <map to='diamond'>
              <bucket>&quot;Iran (Islamic Republic of)&quot;</bucket>
            </map>
            <map to='diamond'>
              <bucket>&quot;Kazakhstan&quot;</bucket>
            </map>
            <map to='diamond'>
              <bucket>&quot;Liberia&quot;</bucket>
            </map>
            <map to='diamond'>
              <bucket>&quot;Malta&quot;</bucket>
            </map>
            <map to='diamond'>
              <bucket>&quot;Montserrat&quot;</bucket>
            </map>
            <map to='diamond'>
              <bucket>&quot;Nicaragua&quot;</bucket>
            </map>
            <map to='diamond'>
              <bucket>&quot;Palau&quot;</bucket>
            </map>
            <map to='diamond'>
              <bucket>&quot;Qatar&quot;</bucket>
            </map>
            <map to='diamond'>
              <bucket>&quot;Saint Vincent and the Grenadines&quot;</bucket>
            </map>
            <map to='diamond'>
              <bucket>&quot;Sint Eustatius&quot;</bucket>
            </map>
            <map to='diamond'>
              <bucket>&quot;Sudan&quot;</bucket>
            </map>
            <map to='diamond'>
              <bucket>&quot;Tokelau&quot;</bucket>
            </map>
            <map to='diamond'>
              <bucket>&quot;United Arab Emirates&quot;</bucket>
            </map>
            <map to='diamond'>
              <bucket>&quot;Zambia&quot;</bucket>
            </map>
            <map to='down-triangle'>
              <bucket>&quot;Antigua and Barbuda&quot;</bucket>
            </map>
            <map to='down-triangle'>
              <bucket>&quot;Barbados&quot;</bucket>
            </map>
            <map to='down-triangle'>
              <bucket>&quot;Bosnia and Herzegovina&quot;</bucket>
            </map>
            <map to='down-triangle'>
              <bucket>&quot;Canada&quot;</bucket>
            </map>
            <map to='down-triangle'>
              <bucket>&quot;Costa Rica&quot;</bucket>
            </map>
            <map to='down-triangle'>
              <bucket>&quot;Dominica&quot;</bucket>
            </map>
            <map to='down-triangle'>
              <bucket>&quot;Faroe Islands&quot;</bucket>
            </map>
            <map to='down-triangle'>
              <bucket>&quot;Ghana&quot;</bucket>
            </map>
            <map to='down-triangle'>
              <bucket>&quot;Guinea-Bissau&quot;</bucket>
            </map>
            <map to='down-triangle'>
              <bucket>&quot;Ireland&quot;</bucket>
            </map>
            <map to='down-triangle'>
              <bucket>&quot;Kiribati&quot;</bucket>
            </map>
            <map to='down-triangle'>
              <bucket>&quot;Liechtenstein&quot;</bucket>
            </map>
            <map to='down-triangle'>
              <bucket>&quot;Martinique&quot;</bucket>
            </map>
            <map to='down-triangle'>
              <bucket>&quot;Mozambique&quot;</bucket>
            </map>
            <map to='down-triangle'>
              <bucket>&quot;Nigeria&quot;</bucket>
            </map>
            <map to='down-triangle'>
              <bucket>&quot;Papua New Guinea&quot;</bucket>
            </map>
            <map to='down-triangle'>
              <bucket>&quot;Republic of Moldova&quot;</bucket>
            </map>
            <map to='down-triangle'>
              <bucket>&quot;San Marino&quot;</bucket>
            </map>
            <map to='down-triangle'>
              <bucket>&quot;Slovakia&quot;</bucket>
            </map>
            <map to='down-triangle'>
              <bucket>&quot;Sweden&quot;</bucket>
            </map>
            <map to='down-triangle'>
              <bucket>&quot;Trinidad and Tobago&quot;</bucket>
            </map>
            <map to='down-triangle'>
              <bucket>&quot;United States of America&quot;</bucket>
            </map>
            <map to='left-triangle'>
              <bucket>&quot;Argentina&quot;</bucket>
            </map>
            <map to='left-triangle'>
              <bucket>&quot;Belarus&quot;</bucket>
            </map>
            <map to='left-triangle'>
              <bucket>&quot;Botswana&quot;</bucket>
            </map>
            <map to='left-triangle'>
              <bucket>&quot;Cayman Islands&quot;</bucket>
            </map>
            <map to='left-triangle'>
              <bucket>&quot;Côte d’Ivoire&quot;</bucket>
            </map>
            <map to='left-triangle'>
              <bucket>&quot;Dominican Republic&quot;</bucket>
            </map>
            <map to='left-triangle'>
              <bucket>&quot;Fiji&quot;</bucket>
            </map>
            <map to='left-triangle'>
              <bucket>&quot;Gibraltar&quot;</bucket>
            </map>
            <map to='left-triangle'>
              <bucket>&quot;Guyana&quot;</bucket>
            </map>
            <map to='left-triangle'>
              <bucket>&quot;Isle of Man&quot;</bucket>
            </map>
            <map to='left-triangle'>
              <bucket>&quot;Kosovo&quot;</bucket>
            </map>
            <map to='left-triangle'>
              <bucket>&quot;Lithuania&quot;</bucket>
            </map>
            <map to='left-triangle'>
              <bucket>&quot;Mauritania&quot;</bucket>
            </map>
            <map to='left-triangle'>
              <bucket>&quot;Myanmar&quot;</bucket>
            </map>
            <map to='left-triangle'>
              <bucket>&quot;Niue&quot;</bucket>
            </map>
            <map to='left-triangle'>
              <bucket>&quot;Paraguay&quot;</bucket>
            </map>
            <map to='left-triangle'>
              <bucket>&quot;Romania&quot;</bucket>
            </map>
            <map to='left-triangle'>
              <bucket>&quot;Sao Tome and Principe&quot;</bucket>
            </map>
            <map to='left-triangle'>
              <bucket>&quot;Slovenia&quot;</bucket>
            </map>
            <map to='left-triangle'>
              <bucket>&quot;Switzerland&quot;</bucket>
            </map>
            <map to='left-triangle'>
              <bucket>&quot;Tunisia&quot;</bucket>
            </map>
            <map to='left-triangle'>
              <bucket>&quot;Uruguay&quot;</bucket>
            </map>
            <map to='plus'>
              <bucket>&quot;Algeria&quot;</bucket>
            </map>
            <map to='plus'>
              <bucket>&quot;Austria&quot;</bucket>
            </map>
            <map to='plus'>
              <bucket>&quot;Bermuda&quot;</bucket>
            </map>
            <map to='plus'>
              <bucket>&quot;Bulgaria&quot;</bucket>
            </map>
            <map to='plus'>
              <bucket>&quot;China&quot;</bucket>
            </map>
            <map to='plus'>
              <bucket>&quot;Cyprus&quot;</bucket>
            </map>
            <map to='plus'>
              <bucket>&quot;Equatorial Guinea&quot;</bucket>
            </map>
            <map to='plus'>
              <bucket>&quot;French Polynesia&quot;</bucket>
            </map>
            <map to='plus'>
              <bucket>&quot;Guadeloupe&quot;</bucket>
            </map>
            <map to='plus'>
              <bucket>&quot;Iceland&quot;</bucket>
            </map>
            <map to='plus'>
              <bucket>&quot;Japan&quot;</bucket>
            </map>
            <map to='plus'>
              <bucket>&quot;Latvia&quot;</bucket>
            </map>
            <map to='plus'>
              <bucket>&quot;Malaysia&quot;</bucket>
            </map>
            <map to='plus'>
              <bucket>&quot;Monaco&quot;</bucket>
            </map>
            <map to='plus'>
              <bucket>&quot;Netherlands&quot;</bucket>
            </map>
            <map to='plus'>
              <bucket>&quot;occupied Palestinian territory&quot;</bucket>
            </map>
            <map to='plus'>
              <bucket>&quot;Poland&quot;</bucket>
            </map>
            <map to='plus'>
              <bucket>&quot;Saint Helena&quot;</bucket>
            </map>
            <map to='plus'>
              <bucket>&quot;Seychelles&quot;</bucket>
            </map>
            <map to='plus'>
              <bucket>&quot;South Sudan&quot;</bucket>
            </map>
            <map to='plus'>
              <bucket>&quot;The United Kingdom&quot;</bucket>
            </map>
            <map to='plus'>
              <bucket>&quot;Tuvalu&quot;</bucket>
            </map>
            <map to='plus'>
              <bucket>&quot;Viet Nam&quot;</bucket>
            </map>
            <map to='right-triangle'>
              <bucket>&quot;Armenia&quot;</bucket>
            </map>
            <map to='right-triangle'>
              <bucket>&quot;Belgium&quot;</bucket>
            </map>
            <map to='right-triangle'>
              <bucket>&quot;Brazil&quot;</bucket>
            </map>
            <map to='right-triangle'>
              <bucket>&quot;Central African Republic&quot;</bucket>
            </map>
            <map to='right-triangle'>
              <bucket>&quot;Croatia&quot;</bucket>
            </map>
            <map to='right-triangle'>
              <bucket>&quot;Ecuador&quot;</bucket>
            </map>
            <map to='right-triangle'>
              <bucket>&quot;Finland&quot;</bucket>
            </map>
            <map to='right-triangle'>
              <bucket>&quot;Greece&quot;</bucket>
            </map>
            <map to='right-triangle'>
              <bucket>&quot;Haiti&quot;</bucket>
            </map>
            <map to='right-triangle'>
              <bucket>&quot;Israel&quot;</bucket>
            </map>
            <map to='right-triangle'>
              <bucket>&quot;Kuwait&quot;</bucket>
            </map>
            <map to='right-triangle'>
              <bucket>&quot;Luxembourg&quot;</bucket>
            </map>
            <map to='right-triangle'>
              <bucket>&quot;Mauritius&quot;</bucket>
            </map>
            <map to='right-triangle'>
              <bucket>&quot;Namibia&quot;</bucket>
            </map>
            <map to='right-triangle'>
              <bucket>&quot;North Macedonia&quot;</bucket>
            </map>
            <map to='right-triangle'>
              <bucket>&quot;Peru&quot;</bucket>
            </map>
            <map to='right-triangle'>
              <bucket>&quot;Russian Federation&quot;</bucket>
            </map>
            <map to='right-triangle'>
              <bucket>&quot;Saudi Arabia&quot;</bucket>
            </map>
            <map to='right-triangle'>
              <bucket>&quot;Solomon Islands&quot;</bucket>
            </map>
            <map to='right-triangle'>
              <bucket>&quot;Syrian Arab Republic&quot;</bucket>
            </map>
            <map to='right-triangle'>
              <bucket>&quot;Turkey&quot;</bucket>
            </map>
            <map to='right-triangle'>
              <bucket>&quot;Uzbekistan&quot;</bucket>
            </map>
            <map to='square'>
              <bucket>&quot;Albania&quot;</bucket>
            </map>
            <map to='square'>
              <bucket>&quot;Australia&quot;</bucket>
            </map>
            <map to='square'>
              <bucket>&quot;Benin&quot;</bucket>
            </map>
            <map to='square'>
              <bucket>&quot;Brunei Darussalam&quot;</bucket>
            </map>
            <map to='square'>
              <bucket>&quot;Chile&quot;</bucket>
            </map>
            <map to='square'>
              <bucket>&quot;Curaçao&quot;</bucket>
            </map>
            <map to='square'>
              <bucket>&quot;El Salvador&quot;</bucket>
            </map>
            <map to='square'>
              <bucket>&quot;French Guiana&quot;</bucket>
            </map>
            <map to='square'>
              <bucket>&quot;Grenada&quot;</bucket>
            </map>
            <map to='square'>
              <bucket>&quot;Hungary&quot;</bucket>
            </map>
            <map to='square'>
              <bucket>&quot;Jamaica&quot;</bucket>
            </map>
            <map to='square'>
              <bucket>&quot;Lao People&apos;s Democratic Republic&quot;</bucket>
            </map>
            <map to='square'>
              <bucket>&quot;Malawi&quot;</bucket>
            </map>
            <map to='square'>
              <bucket>&quot;Micronesia (Federated States of)&quot;</bucket>
            </map>
            <map to='square'>
              <bucket>&quot;Nepal&quot;</bucket>
            </map>
            <map to='square'>
              <bucket>&quot;Norway&quot;</bucket>
            </map>
            <map to='square'>
              <bucket>&quot;Pitcairn Islands&quot;</bucket>
            </map>
            <map to='square'>
              <bucket>&quot;Saba&quot;</bucket>
            </map>
            <map to='square'>
              <bucket>&quot;Serbia&quot;</bucket>
            </map>
            <map to='square'>
              <bucket>&quot;South Africa&quot;</bucket>
            </map>
            <map to='square'>
              <bucket>&quot;Thailand&quot;</bucket>
            </map>
            <map to='square'>
              <bucket>&quot;Turks and Caicos Islands&quot;</bucket>
            </map>
            <map to='square'>
              <bucket>&quot;Venezuela (Bolivarian Republic of)&quot;</bucket>
            </map>
            <map to='times'>
              <bucket>&quot;American Samoa&quot;</bucket>
            </map>
            <map to='times'>
              <bucket>&quot;Azerbaijan&quot;</bucket>
            </map>
            <map to='times'>
              <bucket>&quot;Bhutan&quot;</bucket>
            </map>
            <map to='times'>
              <bucket>&quot;Burkina Faso&quot;</bucket>
            </map>
            <map to='times'>
              <bucket>&quot;Colombia&quot;</bucket>
            </map>
            <map to='times'>
              <bucket>&quot;Czechia&quot;</bucket>
            </map>
            <map to='times'>
              <bucket>&quot;Estonia&quot;</bucket>
            </map>
            <map to='times'>
              <bucket>&quot;Gabon&quot;</bucket>
            </map>
            <map to='times'>
              <bucket>&quot;Guam&quot;</bucket>
            </map>
            <map to='times'>
              <bucket>&quot;India&quot;</bucket>
            </map>
            <map to='times'>
              <bucket>&quot;Jersey&quot;</bucket>
            </map>
            <map to='times'>
              <bucket>&quot;Lebanon&quot;</bucket>
            </map>
            <map to='times'>
              <bucket>&quot;Maldives&quot;</bucket>
            </map>
            <map to='times'>
              <bucket>&quot;Mongolia&quot;</bucket>
            </map>
            <map to='times'>
              <bucket>&quot;New Caledonia&quot;</bucket>
            </map>
            <map to='times'>
              <bucket>&quot;Oman&quot;</bucket>
            </map>
            <map to='times'>
              <bucket>&quot;Portugal&quot;</bucket>
            </map>
            <map to='times'>
              <bucket>&quot;Saint Kitts and Nevis&quot;</bucket>
            </map>
            <map to='times'>
              <bucket>&quot;Sierra Leone&quot;</bucket>
            </map>
            <map to='times'>
              <bucket>&quot;Spain&quot;</bucket>
            </map>
            <map to='times'>
              <bucket>&quot;Timor-Leste&quot;</bucket>
            </map>
            <map to='times'>
              <bucket>&quot;Uganda&quot;</bucket>
            </map>
            <map to='times'>
              <bucket>&quot;Wallis and Futuna&quot;</bucket>
            </map>
            <map to='triangle'>
              <bucket>&quot;Anguilla&quot;</bucket>
            </map>
            <map to='triangle'>
              <bucket>&quot;Bangladesh&quot;</bucket>
            </map>
            <map to='triangle'>
              <bucket>&quot;Bonaire, Sint Eustatius and Saba&quot;</bucket>
            </map>
            <map to='triangle'>
              <bucket>&quot;Cameroon&quot;</bucket>
            </map>
            <map to='triangle'>
              <bucket>&quot;Cook Islands&quot;</bucket>
            </map>
            <map to='triangle'>
              <bucket>&quot;Djibouti&quot;</bucket>
            </map>
            <map to='triangle'>
              <bucket>&quot;Falkland Islands (Malvinas)&quot;</bucket>
            </map>
            <map to='triangle'>
              <bucket>&quot;Germany&quot;</bucket>
            </map>
            <map to='triangle'>
              <bucket>&quot;Guinea&quot;</bucket>
            </map>
            <map to='triangle'>
              <bucket>&quot;Iraq&quot;</bucket>
            </map>
            <map to='triangle'>
              <bucket>&quot;Kenya&quot;</bucket>
            </map>
            <map to='triangle'>
              <bucket>&quot;Libya&quot;</bucket>
            </map>
            <map to='triangle'>
              <bucket>&quot;Marshall Islands&quot;</bucket>
            </map>
            <map to='triangle'>
              <bucket>&quot;Morocco&quot;</bucket>
            </map>
            <map to='triangle'>
              <bucket>&quot;Niger&quot;</bucket>
            </map>
            <map to='triangle'>
              <bucket>&quot;Panama&quot;</bucket>
            </map>
            <map to='triangle'>
              <bucket>&quot;Republic of Korea&quot;</bucket>
            </map>
            <map to='triangle'>
              <bucket>&quot;Samoa&quot;</bucket>
            </map>
            <map to='triangle'>
              <bucket>&quot;Sint Maarten&quot;</bucket>
            </map>
            <map to='triangle'>
              <bucket>&quot;Suriname&quot;</bucket>
            </map>
            <map to='triangle'>
              <bucket>&quot;Tonga&quot;</bucket>
            </map>
            <map to='triangle'>
              <bucket>&quot;United Republic of Tanzania&quot;</bucket>
            </map>
            <map to='triangle'>
              <bucket>&quot;Zimbabwe&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:Country (WHO-COVID-19-global-data.csv):nk]&#10;[:Measure Names]' type='palette'>
            <map-pri to='multiordinal_blue_10_0'>
              <bucket>%null%</bucket>
            </map-pri>
            <map-pri to='multiordinal_blue_10_0'>
              <bucket>&quot;Afghanistan&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_blue_10_0'>
              <bucket>&quot;Australia&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_blue_10_0'>
              <bucket>&quot;Benin&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_blue_10_0'>
              <bucket>&quot;Cameroon&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_blue_10_0'>
              <bucket>&quot;Costa Rica&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_blue_10_0'>
              <bucket>&quot;Côte d’Ivoire&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_blue_10_0'>
              <bucket>&quot;Egypt&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_blue_10_0'>
              <bucket>&quot;Falkland Islands (Malvinas)&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_blue_10_0'>
              <bucket>&quot;Gabon&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_blue_10_0'>
              <bucket>&quot;Guinea&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_blue_10_0'>
              <bucket>&quot;Iran (Islamic Republic of)&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_blue_10_0'>
              <bucket>&quot;Isle of Man&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_blue_10_0'>
              <bucket>&quot;Kyrgyzstan&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_blue_10_0'>
              <bucket>&quot;Malaysia&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_blue_10_0'>
              <bucket>&quot;Montenegro&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_blue_10_0'>
              <bucket>&quot;New Zealand&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_blue_10_0'>
              <bucket>&quot;Other&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_blue_10_0'>
              <bucket>&quot;Panama&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_blue_10_0'>
              <bucket>&quot;Saint Helena&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_blue_10_0'>
              <bucket>&quot;Seychelles&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_blue_10_0'>
              <bucket>&quot;Sri Lanka&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_blue_10_0'>
              <bucket>&quot;Syrian Arab Republic&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_blue_10_0'>
              <bucket>&quot;Tunisia&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_blue_10_0'>
              <bucket>&quot;Yemen&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_brown_10_0'>
              <bucket>&quot;Aruba&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_brown_10_0'>
              <bucket>&quot;Belize&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_brown_10_0'>
              <bucket>&quot;Cabo Verde&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_brown_10_0'>
              <bucket>&quot;Cambodia&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_brown_10_0'>
              <bucket>&quot;Cook Islands&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_brown_10_0'>
              <bucket>&quot;Ecuador&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_brown_10_0'>
              <bucket>&quot;French Polynesia&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_brown_10_0'>
              <bucket>&quot;Guam&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_brown_10_0'>
              <bucket>&quot;Guatemala&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_brown_10_0'>
              <bucket>&quot;Ireland&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_brown_10_0'>
              <bucket>&quot;Kiribati&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_brown_10_0'>
              <bucket>&quot;Malawi&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_brown_10_0'>
              <bucket>&quot;Mongolia&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_brown_10_0'>
              <bucket>&quot;New Caledonia&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_brown_10_0'>
              <bucket>&quot;Northern Mariana Islands (Commonwealth of the)&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_brown_10_0'>
              <bucket>&quot;Palau&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_brown_10_0'>
              <bucket>&quot;Rwanda&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_brown_10_0'>
              <bucket>&quot;Saba&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_brown_10_0'>
              <bucket>&quot;Serbia&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_brown_10_0'>
              <bucket>&quot;Spain&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_brown_10_0'>
              <bucket>&quot;Trinidad and Tobago&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_brown_10_0'>
              <bucket>&quot;United Arab Emirates&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_brown_10_0'>
              <bucket>&quot;United States Virgin Islands&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_brown_10_0'>
              <bucket>&quot;Wallis and Futuna&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_gold_10_0'>
              <bucket>&quot;Andorra&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_gold_10_0'>
              <bucket>&quot;Bahamas&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_gold_10_0'>
              <bucket>&quot;Bosnia and Herzegovina&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_gold_10_0'>
              <bucket>&quot;Central African Republic&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_gold_10_0'>
              <bucket>&quot;Curaçao&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_gold_10_0'>
              <bucket>&quot;Cyprus&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_gold_10_0'>
              <bucket>&quot;Estonia&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_gold_10_0'>
              <bucket>&quot;Germany&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_gold_10_0'>
              <bucket>&quot;Haiti&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_gold_10_0'>
              <bucket>&quot;Hungary&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_gold_10_0'>
              <bucket>&quot;Jamaica&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_gold_10_0'>
              <bucket>&quot;Kosovo[1]&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_gold_10_0'>
              <bucket>&quot;Lesotho&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_gold_10_0'>
              <bucket>&quot;Malta&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_gold_10_0'>
              <bucket>&quot;Mozambique&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_gold_10_0'>
              <bucket>&quot;Nigeria&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_gold_10_0'>
              <bucket>&quot;Peru&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_gold_10_0'>
              <bucket>&quot;Republic of Korea&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_gold_10_0'>
              <bucket>&quot;Saint Vincent and the Grenadines&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_gold_10_0'>
              <bucket>&quot;Slovakia&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_gold_10_0'>
              <bucket>&quot;Sweden&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_gold_10_0'>
              <bucket>&quot;The United Kingdom&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_gold_10_0'>
              <bucket>&quot;Turks and Caicos Islands&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_gold_10_0'>
              <bucket>&quot;Venezuela (Bolivarian Republic of)&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_gray_10_0'>
              <bucket>&quot;Antigua and Barbuda&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_gray_10_0'>
              <bucket>&quot;Barbados&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_gray_10_0'>
              <bucket>&quot;Bolivia (Plurinational State of)&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_gray_10_0'>
              <bucket>&quot;British Virgin Islands&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_gray_10_0'>
              <bucket>&quot;Colombia&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_gray_10_0'>
              <bucket>&quot;Djibouti&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_gray_10_0'>
              <bucket>&quot;Eritrea&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_gray_10_0'>
              <bucket>&quot;Fiji&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_gray_10_0'>
              <bucket>&quot;Greece&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_gray_10_0'>
              <bucket>&quot;India&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_gray_10_0'>
              <bucket>&quot;Jordan&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_gray_10_0'>
              <bucket>&quot;Lao People&apos;s Democratic Republic&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_gray_10_0'>
              <bucket>&quot;Liechtenstein&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_gray_10_0'>
              <bucket>&quot;Mauritius&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_gray_10_0'>
              <bucket>&quot;Nauru&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_gray_10_0'>
              <bucket>&quot;Norway&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_gray_10_0'>
              <bucket>&quot;Portugal&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_gray_10_0'>
              <bucket>&quot;Saint Martin&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_gray_10_0'>
              <bucket>&quot;Sao Tome and Principe&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_gray_10_0'>
              <bucket>&quot;Sint Eustatius&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_gray_10_0'>
              <bucket>&quot;Somalia&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_gray_10_0'>
              <bucket>&quot;Thailand&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_gray_10_0'>
              <bucket>&quot;Ukraine&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_green_10_0'>
              <bucket>&quot;Algeria&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_green_10_0'>
              <bucket>&quot;Azerbaijan&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_green_10_0'>
              <bucket>&quot;Bhutan&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_green_10_0'>
              <bucket>&quot;Brunei Darussalam&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_green_10_0'>
              <bucket>&quot;Cayman Islands&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_green_10_0'>
              <bucket>&quot;Cuba&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_green_10_0'>
              <bucket>&quot;Equatorial Guinea&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_green_10_0'>
              <bucket>&quot;Georgia&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_green_10_0'>
              <bucket>&quot;Guernsey&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_green_10_0'>
              <bucket>&quot;Guyana&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_green_10_0'>
              <bucket>&quot;Italy&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_green_10_0'>
              <bucket>&quot;Lebanon&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_green_10_0'>
              <bucket>&quot;Mali&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_green_10_0'>
              <bucket>&quot;Martinique&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_green_10_0'>
              <bucket>&quot;Morocco&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_green_10_0'>
              <bucket>&quot;Niger&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_green_10_0'>
              <bucket>&quot;Paraguay&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_green_10_0'>
              <bucket>&quot;Saint Barthélemy&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_green_10_0'>
              <bucket>&quot;Saint Lucia&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_green_10_0'>
              <bucket>&quot;Singapore&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_green_10_0'>
              <bucket>&quot;Suriname&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_green_10_0'>
              <bucket>&quot;Turkmenistan&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_green_10_0'>
              <bucket>&quot;United States of America&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_green_10_0'>
              <bucket>&quot;Zimbabwe&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_orange_10_0'>
              <bucket>&quot;Albania&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_orange_10_0'>
              <bucket>&quot;Austria&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_orange_10_0'>
              <bucket>&quot;Bermuda&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_orange_10_0'>
              <bucket>&quot;Canada&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_orange_10_0'>
              <bucket>&quot;Croatia&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_orange_10_0'>
              <bucket>&quot;Democratic People&apos;s Republic of Korea&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_orange_10_0'>
              <bucket>&quot;El Salvador&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_orange_10_0'>
              <bucket>&quot;Faroe Islands&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_orange_10_0'>
              <bucket>&quot;Gambia&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_orange_10_0'>
              <bucket>&quot;Guinea-Bissau&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_orange_10_0'>
              <bucket>&quot;Israel&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_orange_10_0'>
              <bucket>&quot;Latvia&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_orange_10_0'>
              <bucket>&quot;Maldives&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_orange_10_0'>
              <bucket>&quot;Montserrat&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_orange_10_0'>
              <bucket>&quot;Nicaragua&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_orange_10_0'>
              <bucket>&quot;occupied Palestinian territory, including east Jerusalem&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_orange_10_0'>
              <bucket>&quot;Papua New Guinea&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_orange_10_0'>
              <bucket>&quot;Puerto Rico&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_orange_10_0'>
              <bucket>&quot;Saint Kitts and Nevis&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_orange_10_0'>
              <bucket>&quot;Sierra Leone&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_orange_10_0'>
              <bucket>&quot;Sudan&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_orange_10_0'>
              <bucket>&quot;Turkey&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_orange_10_0'>
              <bucket>&quot;United Republic of Tanzania&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_orange_10_0'>
              <bucket>&quot;Uzbekistan&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_orange_10_0'>
              <bucket>&quot;Zambia&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_pink_10_0'>
              <bucket>&quot;Argentina&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_pink_10_0'>
              <bucket>&quot;Belarus&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_pink_10_0'>
              <bucket>&quot;Bonaire&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_pink_10_0'>
              <bucket>&quot;Bulgaria&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_pink_10_0'>
              <bucket>&quot;Comoros&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_pink_10_0'>
              <bucket>&quot;Democratic Republic of the Congo&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_pink_10_0'>
              <bucket>&quot;Dominica&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_pink_10_0'>
              <bucket>&quot;Finland&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_pink_10_0'>
              <bucket>&quot;Greenland&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_pink_10_0'>
              <bucket>&quot;Indonesia&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_pink_10_0'>
              <bucket>&quot;Kazakhstan&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_pink_10_0'>
              <bucket>&quot;Lithuania&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_pink_10_0'>
              <bucket>&quot;Mayotte&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_pink_10_0'>
              <bucket>&quot;Mexico&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_pink_10_0'>
              <bucket>&quot;Nepal&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_pink_10_0'>
              <bucket>&quot;Oman&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_pink_10_0'>
              <bucket>&quot;Qatar&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_pink_10_0'>
              <bucket>&quot;Russian Federation&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_pink_10_0'>
              <bucket>&quot;Saudi Arabia&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_pink_10_0'>
              <bucket>&quot;Sint Maarten&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_pink_10_0'>
              <bucket>&quot;South Africa&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_pink_10_0'>
              <bucket>&quot;Togo&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_pink_10_0'>
              <bucket>&quot;Uruguay&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_purple_10_0'>
              <bucket>&quot;Armenia&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_purple_10_0'>
              <bucket>&quot;Belgium&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_purple_10_0'>
              <bucket>&quot;Burkina Faso&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_purple_10_0'>
              <bucket>&quot;Burundi&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_purple_10_0'>
              <bucket>&quot;Congo&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_purple_10_0'>
              <bucket>&quot;Dominican Republic&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_purple_10_0'>
              <bucket>&quot;France&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_purple_10_0'>
              <bucket>&quot;Grenada&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_purple_10_0'>
              <bucket>&quot;Guadeloupe&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_purple_10_0'>
              <bucket>&quot;Iraq&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_purple_10_0'>
              <bucket>&quot;Kenya&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_purple_10_0'>
              <bucket>&quot;Luxembourg&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_purple_10_0'>
              <bucket>&quot;Micronesia (Federated States of)&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_purple_10_0'>
              <bucket>&quot;Monaco&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_purple_10_0'>
              <bucket>&quot;Netherlands&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_purple_10_0'>
              <bucket>&quot;Pakistan&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_purple_10_0'>
              <bucket>&quot;Pitcairn Islands&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_purple_10_0'>
              <bucket>&quot;Romania&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_purple_10_0'>
              <bucket>&quot;Senegal&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_purple_10_0'>
              <bucket>&quot;South Sudan&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_purple_10_0'>
              <bucket>&quot;Tokelau&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_purple_10_0'>
              <bucket>&quot;Tonga&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_purple_10_0'>
              <bucket>&quot;Vanuatu&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_red_10_0'>
              <bucket>&quot;American Samoa&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_red_10_0'>
              <bucket>&quot;Anguilla&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_red_10_0'>
              <bucket>&quot;Bangladesh&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_red_10_0'>
              <bucket>&quot;Brazil&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_red_10_0'>
              <bucket>&quot;Chile&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_red_10_0'>
              <bucket>&quot;Denmark&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_red_10_0'>
              <bucket>&quot;Ethiopia&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_red_10_0'>
              <bucket>&quot;French Guiana&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_red_10_0'>
              <bucket>&quot;Gibraltar&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_red_10_0'>
              <bucket>&quot;Iceland&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_red_10_0'>
              <bucket>&quot;Jersey&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_red_10_0'>
              <bucket>&quot;Libya&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_red_10_0'>
              <bucket>&quot;Madagascar&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_red_10_0'>
              <bucket>&quot;Mauritania&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_red_10_0'>
              <bucket>&quot;Namibia&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_red_10_0'>
              <bucket>&quot;North Macedonia&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_red_10_0'>
              <bucket>&quot;Poland&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_red_10_0'>
              <bucket>&quot;Réunion&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_red_10_0'>
              <bucket>&quot;Saint Pierre and Miquelon&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_red_10_0'>
              <bucket>&quot;San Marino&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_red_10_0'>
              <bucket>&quot;Solomon Islands&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_red_10_0'>
              <bucket>&quot;Tajikistan&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_red_10_0'>
              <bucket>&quot;Uganda&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_teal_10_0'>
              <bucket>&quot;Angola&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_teal_10_0'>
              <bucket>&quot;Bahrain&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_teal_10_0'>
              <bucket>&quot;Botswana&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_teal_10_0'>
              <bucket>&quot;Chad&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_teal_10_0'>
              <bucket>&quot;China&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_teal_10_0'>
              <bucket>&quot;Czechia&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_teal_10_0'>
              <bucket>&quot;Eswatini&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_teal_10_0'>
              <bucket>&quot;Ghana&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_teal_10_0'>
              <bucket>&quot;Holy See&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_teal_10_0'>
              <bucket>&quot;Honduras&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_teal_10_0'>
              <bucket>&quot;Japan&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_teal_10_0'>
              <bucket>&quot;Kuwait&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_teal_10_0'>
              <bucket>&quot;Liberia&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_teal_10_0'>
              <bucket>&quot;Marshall Islands&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_teal_10_0'>
              <bucket>&quot;Myanmar&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_teal_10_0'>
              <bucket>&quot;Niue&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_teal_10_0'>
              <bucket>&quot;Philippines&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_teal_10_0'>
              <bucket>&quot;Republic of Moldova&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_teal_10_0'>
              <bucket>&quot;Samoa&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_teal_10_0'>
              <bucket>&quot;Slovenia&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_teal_10_0'>
              <bucket>&quot;Switzerland&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_teal_10_0'>
              <bucket>&quot;Timor-Leste&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_teal_10_0'>
              <bucket>&quot;Tuvalu&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_teal_10_0'>
              <bucket>&quot;Viet Nam&quot;</bucket>
            </map-pri>
          </encoding>
          <encoding attr='color' field='[none:WHO_REGION (country_wise_vaccine_corrected.csv):nk]' type='palette'>
            <map to='#4e79a7'>
              <bucket>&quot;AMRO&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;WPRO&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;EURO&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[Age Group (group)]' type='palette'>
            <map to='#4e79a7'>
              <bucket>&quot;Non-EU Countries&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;70-80&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;55-70&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;0-17&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;40-55&quot;</bucket>
            </map>
            <map to='#edc948'>
              <bucket>&quot;80+&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;18-40&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[:Measure Names]&#10;[none:VACCINE_NAME:nk]' type='palette'>
            <map to='#1f77b4'>
              <multibucket>
                <bucket>&quot;[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[avg:new_vaccinations:qk]&quot;</bucket>
                <bucket>&quot;AstraZeneca - Vaxzevria&quot;</bucket>
              </multibucket>
            </map>
            <map to='#7f7f7f'>
              <multibucket>
                <bucket>&quot;[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[avg:new_vaccinations:qk]&quot;</bucket>
                <bucket>&quot;Novavax - Covavax&quot;</bucket>
              </multibucket>
            </map>
            <map to='#8c564b'>
              <multibucket>
                <bucket>&quot;[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[avg:new_vaccinations:qk]&quot;</bucket>
                <bucket>&quot;CanSino - Ad5-nCOV&quot;</bucket>
              </multibucket>
            </map>
            <map to='#9467bd'>
              <multibucket>
                <bucket>&quot;[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[avg:new_vaccinations:qk]&quot;</bucket>
                <bucket>&quot;Sinovac - CoronaVac&quot;</bucket>
              </multibucket>
            </map>
            <map to='#98df8a'>
              <multibucket>
                <bucket>&quot;[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[avg:new_vaccinations:qk]&quot;</bucket>
                <bucket>&quot;Beijing CNBG - BBIBP-CorV&quot;</bucket>
              </multibucket>
            </map>
            <map to='#bcbd22'>
              <multibucket>
                <bucket>&quot;[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[avg:new_vaccinations:qk]&quot;</bucket>
                <bucket>&quot;Gamaleya - Sputnik V&quot;</bucket>
              </multibucket>
            </map>
            <map to='#e377c2'>
              <multibucket>
                <bucket>&quot;[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[avg:new_vaccinations:qk]&quot;</bucket>
                <bucket>&quot;Moderna - mRNA-1273&quot;</bucket>
              </multibucket>
            </map>
            <map to='#ff7f0e'>
              <multibucket>
                <bucket>&quot;[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[avg:new_vaccinations:qk]&quot;</bucket>
                <bucket>&quot;Janssen - Ad26.COV 2.5&quot;</bucket>
              </multibucket>
            </map>
            <map to='#ffbb78'>
              <multibucket>
                <bucket>&quot;[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[avg:new_vaccinations:qk]&quot;</bucket>
                <bucket>&quot;Pfizer BioNTech - Comirnaty&quot;</bucket>
              </multibucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:VACCINE_NAME:nk]' palette='tableau-10-medium' type='palette'>
            <map to='#67bf5c'>
              <bucket>&quot;Beijing CNBG - BBIBP-CorV&quot;</bucket>
            </map>
            <map to='#729ece'>
              <bucket>&quot;Pfizer BioNTech - Comirnaty&quot;</bucket>
            </map>
            <map to='#a2a2a2'>
              <bucket>&quot;Novavax - Covavax&quot;</bucket>
            </map>
            <map to='#a8786e'>
              <bucket>&quot;Janssen - Ad26.COV 2.5&quot;</bucket>
            </map>
            <map to='#ad8bc9'>
              <bucket>&quot;Gamaleya - Sputnik V&quot;</bucket>
            </map>
            <map to='#cdcc5d'>
              <bucket>&quot;Sinovac - CoronaVac&quot;</bucket>
            </map>
            <map to='#ed665d'>
              <bucket>&quot;CanSino - Ad5-nCOV&quot;</bucket>
            </map>
            <map to='#ed97ca'>
              <bucket>&quot;Moderna - mRNA-1273&quot;</bucket>
            </map>
            <map to='#ff9e4a'>
              <bucket>&quot;AstraZeneca - Vaxzevria&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[qr:date:ok]' type='palette'>
            <map to='#4e79a7'>
              <bucket>4</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>3</bucket>
            </map>
            <map to='#e15759'>
              <bucket>2</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>1</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:Country:nk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;Estonia&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Spain&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Austria&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Luxembourg&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Croatia&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Portugal&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Hong Kong&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Hungary&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Finland&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;South Korea&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Sweden&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Cyprus&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Romania&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Liechtenstein&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Belgium&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Malta&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Japan&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Czechia&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Slovakia&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Iceland&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;United States&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Ireland&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Latvia&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Lithuania&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;France&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Switzerland&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Denmark&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Slovenia&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Bulgaria&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Netherlands&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Italy&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Germany&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Uruguay&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Chile&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Poland&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
      <filter class='categorical' column='[mn:Day:ok]' filter-group='2'>
        <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
          <groupfilter from='1' function='range' level='[mn:Day:ok]' to='8' />
          <groupfilter function='member' level='[mn:Day:ok]' member='12' />
        </groupfilter>
      </filter>
      <_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
        <objects>
          <object caption='OWID_corrected.csv' id='OWID_corrected.csv_B4ACD67A87B4404887CB919819A24FEA'>
            <properties context=''>
              <relation connection='textscan.1xrlmwr0zh07gg14s1uvu0l5qztj' name='OWID_corrected.csv' table='[OWID_corrected#csv]' type='table'>
                <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
                  <column datatype='string' name='iso_code' ordinal='0' />
                  <column datatype='string' name='Country' ordinal='1' />
                  <column datatype='date' name='date' ordinal='2' />
                  <column datatype='integer' name='total_cases' ordinal='3' />
                  <column datatype='real' name='new_cases' ordinal='4' />
                  <column datatype='integer' name='total_deaths' ordinal='5' />
                  <column datatype='real' name='new_deaths' ordinal='6' />
                  <column datatype='real' name='total_cases_per_million' ordinal='7' />
                  <column datatype='real' name='new_cases_per_million' ordinal='8' />
                  <column datatype='real' name='total_deaths_per_million' ordinal='9' />
                  <column datatype='real' name='new_deaths_per_million' ordinal='10' />
                  <column datatype='real' name='positive_rate' ordinal='11' />
                  <column datatype='integer' name='total_vaccinations' ordinal='12' />
                  <column datatype='integer' name='people_vaccinated' ordinal='13' />
                  <column datatype='integer' name='people_fully_vaccinated' ordinal='14' />
                  <column datatype='integer' name='new_vaccinations' ordinal='15' />
                  <column datatype='real' name='total_vaccinations_per_hundred' ordinal='16' />
                  <column datatype='real' name='people_vaccinated_per_hundred' ordinal='17' />
                  <column datatype='real' name='people_fully_vaccinated_per_hundred' ordinal='18' />
                  <column datatype='integer' name='new_vaccinations_per_million' ordinal='19' />
                  <column datatype='integer' name='population' ordinal='20' />
                  <column datatype='real' name='population_density' ordinal='21' />
                  <column datatype='real' name='median_age' ordinal='22' />
                  <column datatype='real' name='gdp_per_capita' ordinal='23' />
                  <column datatype='real' name='extreme_poverty' ordinal='24' />
                  <column datatype='real' name='diabetes_prevalence' ordinal='25' />
                  <column datatype='real' name='female_smokers' ordinal='26' />
                  <column datatype='real' name='male_smokers' ordinal='27' />
                  <column datatype='real' name='handwashing_facilities' ordinal='28' />
                  <column datatype='real' name='life_expectancy' ordinal='29' />
                  <column datatype='real' name='human_development_index' ordinal='30' />
                </columns>
              </relation>
            </properties>
          </object>
          <object caption='WHO-COVID-19-global-data.csv' id='WHO-COVID-19-global-data.csv_B3A824B9636C4E73BDBC43926F7E6899'>
            <properties context=''>
              <relation connection='textscan.1xrlmwr0zh07gg14s1uvu0l5qztj' name='WHO-COVID-19-global-data.csv' table='[WHO-COVID-19-global-data#csv]' type='table'>
                <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
                  <column datatype='date' name='Date_reported' ordinal='0' />
                  <column datatype='string' name='Country_code' ordinal='1' />
                  <column datatype='string' name='Country' ordinal='2' />
                  <column datatype='string' name='WHO_region' ordinal='3' />
                  <column datatype='integer' name='New_cases' ordinal='4' />
                  <column datatype='integer' name='Cumulative_cases' ordinal='5' />
                  <column datatype='integer' name='New_deaths' ordinal='6' />
                  <column datatype='integer' name='Cumulative_deaths' ordinal='7' />
                </columns>
              </relation>
            </properties>
          </object>
          <object caption='country-coordinates-world.csv1' id='country-coordinates-world.csv_1D76607D01484E97AEC7FBE946584349'>
            <properties context=''>
              <relation connection='textscan.1xrlmwr0zh07gg14s1uvu0l5qztj' name='country-coordinates-world.csv1' table='[country-coordinates-world#csv]' type='table'>
                <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
                  <column datatype='real' name='latitude' ordinal='0' />
                  <column datatype='real' name='longitude' ordinal='1' />
                  <column datatype='string' name='Country' ordinal='2' />
                </columns>
              </relation>
            </properties>
          </object>
          <object caption='country_wise_vaccine_corrected.csv' id='country_wise_vaccine_corrected.csv_8913991FE5B346E790D318DF97DEDF4D'>
            <properties context=''>
              <relation connection='textscan.1xrlmwr0zh07gg14s1uvu0l5qztj' name='country_wise_vaccine_corrected.csv' table='[country_wise_vaccine_corrected#csv]' type='table'>
                <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
                  <column datatype='integer' name='F1' ordinal='0' />
                  <column datatype='string' name='COUNTRY' ordinal='1' />
                  <column datatype='string' name='ISO3' ordinal='2' />
                  <column datatype='string' name='WHO_REGION' ordinal='3' />
                  <column datatype='string' name='DATA_SOURCE' ordinal='4' />
                  <column datatype='date' name='DATE_UPDATED' ordinal='5' />
                  <column datatype='integer' name='TOTAL_VACCINATIONS' ordinal='6' />
                  <column datatype='real' name='PERSONS_VACCINATED_1PLUS_DOSE' ordinal='7' />
                  <column datatype='real' name='TOTAL_VACCINATIONS_PER100' ordinal='8' />
                  <column datatype='real' name='PERSONS_VACCINATED_1PLUS_DOSE_PER100' ordinal='9' />
                  <column datatype='real' name='PERSONS_FULLY_VACCINATED' ordinal='10' />
                  <column datatype='real' name='PERSONS_FULLY_VACCINATED_PER100' ordinal='11' />
                  <column datatype='date' name='FIRST_VACCINE_DATE' ordinal='12' />
                  <column datatype='real' name='NUMBER_VACCINES_TYPES_USED' ordinal='13' />
                  <column datatype='string' name='vac_0' ordinal='14' />
                  <column datatype='string' name='vac_1' ordinal='15' />
                  <column datatype='string' name='vac_2' ordinal='16' />
                  <column datatype='string' name='vac_3' ordinal='17' />
                  <column datatype='string' name='vac_4' ordinal='18' />
                  <column datatype='string' name='vac_5' ordinal='19' />
                  <column datatype='string' name='vac_6' ordinal='20' />
                  <column datatype='string' name='vac_7' ordinal='21' />
                  <column datatype='string' name='vac_8' ordinal='22' />
                  <column datatype='string' name='vac_ID' ordinal='23' />
                </columns>
              </relation>
            </properties>
          </object>
          <object caption='country_wise_vaccine_corrected.csv1' id='country_wise_vaccine_corrected.csv_A7183516371C43B0BF29EFCB714BF247'>
            <properties context=''>
              <relation connection='textscan.1xrlmwr0zh07gg14s1uvu0l5qztj' name='country_wise_vaccine_corrected.csv1' table='[country_wise_vaccine_corrected#csv]' type='table'>
                <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
                  <column datatype='integer' name='F1' ordinal='0' />
                  <column datatype='string' name='COUNTRY' ordinal='1' />
                  <column datatype='string' name='ISO3' ordinal='2' />
                  <column datatype='string' name='WHO_REGION' ordinal='3' />
                  <column datatype='string' name='DATA_SOURCE' ordinal='4' />
                  <column datatype='date' name='DATE_UPDATED' ordinal='5' />
                  <column datatype='integer' name='TOTAL_VACCINATIONS' ordinal='6' />
                  <column datatype='real' name='PERSONS_VACCINATED_1PLUS_DOSE' ordinal='7' />
                  <column datatype='real' name='TOTAL_VACCINATIONS_PER100' ordinal='8' />
                  <column datatype='real' name='PERSONS_VACCINATED_1PLUS_DOSE_PER100' ordinal='9' />
                  <column datatype='real' name='PERSONS_FULLY_VACCINATED' ordinal='10' />
                  <column datatype='real' name='PERSONS_FULLY_VACCINATED_PER100' ordinal='11' />
                  <column datatype='date' name='FIRST_VACCINE_DATE' ordinal='12' />
                  <column datatype='real' name='NUMBER_VACCINES_TYPES_USED' ordinal='13' />
                  <column datatype='string' name='vac_0' ordinal='14' />
                  <column datatype='string' name='vac_1' ordinal='15' />
                  <column datatype='string' name='vac_2' ordinal='16' />
                  <column datatype='string' name='vac_3' ordinal='17' />
                  <column datatype='string' name='vac_4' ordinal='18' />
                  <column datatype='string' name='vac_5' ordinal='19' />
                  <column datatype='string' name='vac_6' ordinal='20' />
                  <column datatype='string' name='vac_7' ordinal='21' />
                  <column datatype='string' name='vac_8' ordinal='22' />
                  <column datatype='string' name='vac_ID' ordinal='23' />
                </columns>
              </relation>
            </properties>
          </object>
          <object caption='covid-vaccine-doses-by-manufacturer-revised.csv' id='covid-vaccine-doses-by-manufacturer-revised.csv_ACE6AD28CF574EC48A4F6EF61F12F02C'>
            <properties context=''>
              <relation connection='textscan.1xrlmwr0zh07gg14s1uvu0l5qztj' name='covid-vaccine-doses-by-manufacturer-revised.csv' table='[covid-vaccine-doses-by-manufacturer-revised#csv]' type='table'>
                <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
                  <column datatype='string' name='Entity' ordinal='0' />
                  <column datatype='string' name='Code' ordinal='1' />
                  <column datatype='date' name='Day' ordinal='2' />
                  <column datatype='integer' name='Pfizer' ordinal='3' />
                  <column datatype='integer' name='Moderna' ordinal='4' />
                  <column datatype='integer' name='AstraZeneca' ordinal='5' />
                  <column datatype='integer' name='Janssen' ordinal='6' />
                  <column datatype='integer' name='Sputnik V' ordinal='7' />
                  <column datatype='integer' name='Sinovac' ordinal='8' />
                  <column datatype='integer' name='Sinopharm' ordinal='9' />
                  <column datatype='integer' name='CanSino' ordinal='10' />
                </columns>
              </relation>
            </properties>
          </object>
          <object caption='income_groups.csv' id='income_groups.csv_D90A031EAC16464D83786B51F53EA51D'>
            <properties context=''>
              <relation connection='textscan.1xrlmwr0zh07gg14s1uvu0l5qztj' name='income_groups.csv' table='[income_groups#csv]' type='table'>
                <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
                  <column datatype='string' name='Country' ordinal='0' />
                  <column datatype='string' name='Code' ordinal='1' />
                  <column datatype='string' name='Income group' ordinal='2' />
                  <column datatype='integer' name='Year' ordinal='3' />
                </columns>
              </relation>
            </properties>
          </object>
          <object caption='phsm-severity-data.csv' id='phsm-severity-data.csv_7B8E0E4A369C47E89D8DF05C2F7CA58E'>
            <properties context=''>
              <relation connection='textscan.1xrlmwr0zh07gg14s1uvu0l5qztj' name='phsm-severity-data.csv' table='[phsm-severity-data#csv]' type='table'>
                <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
                  <column datatype='date' name='DATE_START' ordinal='0' />
                  <column datatype='string' name='COUNTRY' ordinal='1' />
                  <column datatype='string' name='ISO3' ordinal='2' />
                  <column datatype='string' name='WHO_REGION' ordinal='3' />
                  <column datatype='integer' name='MASKS' ordinal='4' />
                  <column datatype='integer' name='TRAVEL' ordinal='5' />
                  <column datatype='integer' name='GATHERINGS' ordinal='6' />
                  <column datatype='integer' name='SCHOOLS' ordinal='7' />
                  <column datatype='integer' name='BUSINESSES' ordinal='8' />
                  <column datatype='integer' name='MOVEMENTS' ordinal='9' />
                  <column datatype='integer' name='GLOBAL_INDEX' ordinal='10' />
                  <column datatype='string' name='MEASURES_IN_PLACE' ordinal='11' />
                </columns>
              </relation>
            </properties>
          </object>
          <object caption='vaccination-data including type.csv' id='vaccination-data including type.csv_2F8D2B9EF95C4387AD9506E7B554D327'>
            <properties context=''>
              <relation connection='textscan.1xrlmwr0zh07gg14s1uvu0l5qztj' name='vaccination-data including type.csv' table='[vaccination-data including type#csv]' type='table'>
                <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
                  <column datatype='string' name='COUNTRY' ordinal='0' />
                  <column datatype='string' name='ISO3' ordinal='1' />
                  <column datatype='string' name='WHO_REGION' ordinal='2' />
                  <column datatype='string' name='DATA_SOURCE' ordinal='3' />
                  <column datatype='date' name='DATE_UPDATED' ordinal='4' />
                  <column datatype='integer' name='TOTAL_VACCINATIONS' ordinal='5' />
                  <column datatype='integer' name='PERSONS_VACCINATED_1PLUS_DOSE' ordinal='6' />
                  <column datatype='real' name='TOTAL_VACCINATIONS_PER100' ordinal='7' />
                  <column datatype='real' name='PERSONS_VACCINATED_1PLUS_DOSE_PER100' ordinal='8' />
                  <column datatype='integer' name='PERSONS_FULLY_VACCINATED' ordinal='9' />
                  <column datatype='real' name='PERSONS_FULLY_VACCINATED_PER100' ordinal='10' />
                  <column datatype='string' name='VACCINES_USED' ordinal='11' />
                  <column datatype='date' name='FIRST_VACCINE_DATE' ordinal='12' />
                  <column datatype='integer' name='NUMBER_VACCINES_TYPES_USED' ordinal='13' />
                </columns>
              </relation>
            </properties>
          </object>
          <object caption='vaccination_startdate.csv' id='vaccination_startdate.csv_69286631C6C440CAACEB7DDA6EBA13A8'>
            <properties context=''>
              <relation connection='textscan.1xrlmwr0zh07gg14s1uvu0l5qztj' name='vaccination_startdate.csv' table='[vaccination_startdate#csv]' type='table'>
                <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
                  <column datatype='string' name='ISO3' ordinal='0' />
                  <column datatype='string' name='VACCINE_NAME' ordinal='1' />
                  <column datatype='string' name='PRODUCT_NAME' ordinal='2' />
                  <column datatype='string' name='COMPANY_NAME' ordinal='3' />
                  <column datatype='date' name='AUTHORIZATION_DATE' ordinal='4' />
                  <column datatype='date' name='START_DATE' ordinal='5' />
                  <column datatype='string' name='END_DATE' ordinal='6' />
                  <column datatype='string' name='COMMENT' ordinal='7' />
                  <column datatype='string' name='DATA_SOURCE' ordinal='8' />
                </columns>
              </relation>
            </properties>
          </object>
          <object caption='vaccinations-by-age-group.csv' id='vaccinations-by-age-group.csv_E0C3689A2C26496B87A222512D2E35DF'>
            <properties context=''>
              <relation connection='textscan.1xrlmwr0zh07gg14s1uvu0l5qztj' name='vaccinations-by-age-group.csv' table='[vaccinations-by-age-group#csv]' type='table'>
                <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
                  <column datatype='string' name='location' ordinal='0' />
                  <column datatype='date' name='date' ordinal='1' />
                  <column datatype='string' name='age_group' ordinal='2' />
                  <column datatype='real' name='people_vaccinated_per_hundred' ordinal='3' />
                  <column datatype='real' name='people_fully_vaccinated_per_hundred' ordinal='4' />
                </columns>
              </relation>
            </properties>
          </object>
        </objects>
        <relationships>
          <relationship>
            <expression op='='>
              <expression op='[Country]' />
              <expression op='[Country (WHO-COVID-19-global-data.csv)]' />
            </expression>
            <first-end-point object-id='OWID_corrected.csv_B4ACD67A87B4404887CB919819A24FEA' />
            <second-end-point object-id='WHO-COVID-19-global-data.csv_B3A824B9636C4E73BDBC43926F7E6899' />
          </relationship>
          <relationship>
            <expression op='='>
              <expression op='[Country]' />
              <expression op='[Country (country-coordinates-world.csv1)]' />
            </expression>
            <first-end-point object-id='OWID_corrected.csv_B4ACD67A87B4404887CB919819A24FEA' />
            <second-end-point object-id='country-coordinates-world.csv_1D76607D01484E97AEC7FBE946584349' />
          </relationship>
          <relationship>
            <expression op='='>
              <expression op='[Country]' />
              <expression op='[COUNTRY]' />
            </expression>
            <first-end-point object-id='OWID_corrected.csv_B4ACD67A87B4404887CB919819A24FEA' />
            <second-end-point object-id='country_wise_vaccine_corrected.csv_8913991FE5B346E790D318DF97DEDF4D' />
          </relationship>
          <relationship>
            <expression op='='>
              <expression op='[Country]' />
              <expression op='[COUNTRY (country_wise_vaccine_corrected.csv1)]' />
            </expression>
            <first-end-point object-id='OWID_corrected.csv_B4ACD67A87B4404887CB919819A24FEA' />
            <second-end-point object-id='country_wise_vaccine_corrected.csv_A7183516371C43B0BF29EFCB714BF247' />
          </relationship>
          <relationship>
            <expression op='='>
              <expression op='[Country]' />
              <expression op='[Entity]' />
            </expression>
            <first-end-point object-id='OWID_corrected.csv_B4ACD67A87B4404887CB919819A24FEA' />
            <second-end-point object-id='covid-vaccine-doses-by-manufacturer-revised.csv_ACE6AD28CF574EC48A4F6EF61F12F02C' />
          </relationship>
          <relationship>
            <expression op='='>
              <expression op='[Country]' />
              <expression op='[Country (income_groups.csv)]' />
            </expression>
            <first-end-point object-id='OWID_corrected.csv_B4ACD67A87B4404887CB919819A24FEA' />
            <second-end-point object-id='income_groups.csv_D90A031EAC16464D83786B51F53EA51D' />
          </relationship>
          <relationship>
            <expression op='='>
              <expression op='[Country]' />
              <expression op='[COUNTRY (phsm-severity-data.csv)]' />
            </expression>
            <first-end-point object-id='OWID_corrected.csv_B4ACD67A87B4404887CB919819A24FEA' />
            <second-end-point object-id='phsm-severity-data.csv_7B8E0E4A369C47E89D8DF05C2F7CA58E' />
          </relationship>
          <relationship>
            <expression op='='>
              <expression op='[Country]' />
              <expression op='[COUNTRY (vaccination-data including type.csv)]' />
            </expression>
            <first-end-point object-id='OWID_corrected.csv_B4ACD67A87B4404887CB919819A24FEA' />
            <second-end-point object-id='vaccination-data including type.csv_2F8D2B9EF95C4387AD9506E7B554D327' />
          </relationship>
          <relationship>
            <expression op='='>
              <expression op='[iso_code]' />
              <expression op='[ISO3 (vaccination_startdate.csv)]' />
            </expression>
            <first-end-point object-id='OWID_corrected.csv_B4ACD67A87B4404887CB919819A24FEA' />
            <second-end-point object-id='vaccination_startdate.csv_69286631C6C440CAACEB7DDA6EBA13A8' />
          </relationship>
          <relationship>
            <expression op='='>
              <expression op='[Country]' />
              <expression op='[location]' />
            </expression>
            <first-end-point object-id='OWID_corrected.csv_B4ACD67A87B4404887CB919819A24FEA' />
            <second-end-point object-id='vaccinations-by-age-group.csv_E0C3689A2C26496B87A222512D2E35DF' />
          </relationship>
        </relationships>
      </_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
    </datasource>
  </datasources>
  <worksheets>
    <worksheet name='% 0f fully vaccinated people'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontname='bold'>Fully Vaccinated percentage</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='OWID_corrected+' name='federated.1pylrsr1mlnqmt1bo4mju0513a1x' />
          </datasources>
          <datasource-dependencies datasource='federated.1pylrsr1mlnqmt1bo4mju0513a1x'>
            <column caption='% of fully vaccinated' datatype='real' name='[Calculation_489977580833480704]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(sum([PERSONS_FULLY_VACCINATED])/(AVG([population])))*100' />
            </column>
            <column datatype='string' name='[Country (WHO-COVID-19-global-data.csv)]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column caption='Persons Fully Vaccinated' datatype='integer' name='[PERSONS_FULLY_VACCINATED]' role='measure' type='quantitative' />
            <column-instance column='[population]' derivation='Avg' name='[avg:population:ok]' pivot='key' type='ordinal' />
            <column-instance column='[population]' derivation='Avg' name='[avg:population:qk]' pivot='key' type='quantitative' />
            <column-instance column='[population_density]' derivation='Avg' name='[avg:population_density:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Country (WHO-COVID-19-global-data.csv)]' derivation='None' name='[none:Country (WHO-COVID-19-global-data.csv):nk]' pivot='key' type='nominal' />
            <column caption='Population' datatype='integer' name='[population]' role='measure' type='quantitative' />
            <column caption='Population Density' datatype='real' name='[population_density]' role='measure' type='quantitative' />
            <column-instance column='[Calculation_489977580833480704]' derivation='User' name='[usr:Calculation_489977580833480704:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[none:Country (WHO-COVID-19-global-data.csv):nk]'>
            <groupfilter function='union' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter from='&quot;Afghanistan&quot;' function='range' level='[none:Country (WHO-COVID-19-global-data.csv):nk]' to='&quot;Algeria&quot;' />
              <groupfilter from='&quot;Andorra&quot;' function='range' level='[none:Country (WHO-COVID-19-global-data.csv):nk]' to='&quot;Bhutan&quot;' />
              <groupfilter from='&quot;Bosnia and Herzegovina&quot;' function='range' level='[none:Country (WHO-COVID-19-global-data.csv):nk]' to='&quot;British Virgin Islands&quot;' />
              <groupfilter function='member' level='[none:Country (WHO-COVID-19-global-data.csv):nk]' member='&quot;Bulgaria&quot;' />
              <groupfilter function='member' level='[none:Country (WHO-COVID-19-global-data.csv):nk]' member='&quot;Burkina Faso&quot;' />
              <groupfilter from='&quot;Cambodia&quot;' function='range' level='[none:Country (WHO-COVID-19-global-data.csv):nk]' to='&quot;Chile&quot;' />
              <groupfilter from='&quot;Colombia&quot;' function='range' level='[none:Country (WHO-COVID-19-global-data.csv):nk]' to='&quot;Costa Rica&quot;' />
              <groupfilter function='member' level='[none:Country (WHO-COVID-19-global-data.csv):nk]' member='&quot;Croatia&quot;' />
              <groupfilter function='member' level='[none:Country (WHO-COVID-19-global-data.csv):nk]' member='&quot;Cuba&quot;' />
              <groupfilter function='member' level='[none:Country (WHO-COVID-19-global-data.csv):nk]' member='&quot;Cyprus&quot;' />
              <groupfilter function='member' level='[none:Country (WHO-COVID-19-global-data.csv):nk]' member='&quot;Czechia&quot;' />
              <groupfilter from='&quot;Denmark&quot;' function='range' level='[none:Country (WHO-COVID-19-global-data.csv):nk]' to='&quot;Equatorial Guinea&quot;' />
              <groupfilter from='&quot;Estonia&quot;' function='range' level='[none:Country (WHO-COVID-19-global-data.csv):nk]' to='&quot;Ethiopia&quot;' />
              <groupfilter from='&quot;Fiji&quot;' function='range' level='[none:Country (WHO-COVID-19-global-data.csv):nk]' to='&quot;France&quot;' />
              <groupfilter from='&quot;French Polynesia&quot;' function='range' level='[none:Country (WHO-COVID-19-global-data.csv):nk]' to='&quot;Grenada&quot;' />
              <groupfilter function='member' level='[none:Country (WHO-COVID-19-global-data.csv):nk]' member='&quot;Guatemala&quot;' />
              <groupfilter from='&quot;Guinea&quot;' function='range' level='[none:Country (WHO-COVID-19-global-data.csv):nk]' to='&quot;Haiti&quot;' />
              <groupfilter function='member' level='[none:Country (WHO-COVID-19-global-data.csv):nk]' member='&quot;Honduras&quot;' />
              <groupfilter from='&quot;Iceland&quot;' function='range' level='[none:Country (WHO-COVID-19-global-data.csv):nk]' to='&quot;Indonesia&quot;' />
              <groupfilter from='&quot;Iraq&quot;' function='range' level='[none:Country (WHO-COVID-19-global-data.csv):nk]' to='&quot;Kiribati&quot;' />
              <groupfilter function='member' level='[none:Country (WHO-COVID-19-global-data.csv):nk]' member='&quot;Kyrgyzstan&quot;' />
              <groupfilter from='&quot;Latvia&quot;' function='range' level='[none:Country (WHO-COVID-19-global-data.csv):nk]' to='&quot;Luxembourg&quot;' />
              <groupfilter from='&quot;Malawi&quot;' function='range' level='[none:Country (WHO-COVID-19-global-data.csv):nk]' to='&quot;Marshall Islands&quot;' />
              <groupfilter function='member' level='[none:Country (WHO-COVID-19-global-data.csv):nk]' member='&quot;Mauritania&quot;' />
              <groupfilter function='member' level='[none:Country (WHO-COVID-19-global-data.csv):nk]' member='&quot;Mauritius&quot;' />
              <groupfilter function='member' level='[none:Country (WHO-COVID-19-global-data.csv):nk]' member='&quot;Mexico&quot;' />
              <groupfilter from='&quot;Monaco&quot;' function='range' level='[none:Country (WHO-COVID-19-global-data.csv):nk]' to='&quot;North Macedonia&quot;' />
              <groupfilter function='member' level='[none:Country (WHO-COVID-19-global-data.csv):nk]' member='&quot;Norway&quot;' />
              <groupfilter function='member' level='[none:Country (WHO-COVID-19-global-data.csv):nk]' member='&quot;Oman&quot;' />
              <groupfilter from='&quot;Pakistan&quot;' function='range' level='[none:Country (WHO-COVID-19-global-data.csv):nk]' to='&quot;Philippines&quot;' />
              <groupfilter function='member' level='[none:Country (WHO-COVID-19-global-data.csv):nk]' member='&quot;Poland&quot;' />
              <groupfilter function='member' level='[none:Country (WHO-COVID-19-global-data.csv):nk]' member='&quot;Portugal&quot;' />
              <groupfilter function='member' level='[none:Country (WHO-COVID-19-global-data.csv):nk]' member='&quot;Qatar&quot;' />
              <groupfilter function='member' level='[none:Country (WHO-COVID-19-global-data.csv):nk]' member='&quot;Romania&quot;' />
              <groupfilter function='member' level='[none:Country (WHO-COVID-19-global-data.csv):nk]' member='&quot;Rwanda&quot;' />
              <groupfilter from='&quot;Saint Helena&quot;' function='range' level='[none:Country (WHO-COVID-19-global-data.csv):nk]' to='&quot;Saint Lucia&quot;' />
              <groupfilter from='&quot;Saint Vincent and the Grenadines&quot;' function='range' level='[none:Country (WHO-COVID-19-global-data.csv):nk]' to='&quot;Singapore&quot;' />
              <groupfilter from='&quot;Slovakia&quot;' function='range' level='[none:Country (WHO-COVID-19-global-data.csv):nk]' to='&quot;Switzerland&quot;' />
              <groupfilter function='member' level='[none:Country (WHO-COVID-19-global-data.csv):nk]' member='&quot;Tajikistan&quot;' />
              <groupfilter function='member' level='[none:Country (WHO-COVID-19-global-data.csv):nk]' member='&quot;Thailand&quot;' />
              <groupfilter function='member' level='[none:Country (WHO-COVID-19-global-data.csv):nk]' member='&quot;Togo&quot;' />
              <groupfilter from='&quot;Tonga&quot;' function='range' level='[none:Country (WHO-COVID-19-global-data.csv):nk]' to='&quot;Ukraine&quot;' />
              <groupfilter function='member' level='[none:Country (WHO-COVID-19-global-data.csv):nk]' member='&quot;Uruguay&quot;' />
              <groupfilter function='member' level='[none:Country (WHO-COVID-19-global-data.csv):nk]' member='&quot;Vanuatu&quot;' />
              <groupfilter from='&quot;Wallis and Futuna&quot;' function='range' level='[none:Country (WHO-COVID-19-global-data.csv):nk]' to='&quot;Zimbabwe&quot;' />
            </groupfilter>
          </filter>
          <filter class='quantitative' column='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[usr:Calculation_489977580833480704:qk]' included-values='non-null' />
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[none:Country (WHO-COVID-19-global-data.csv):nk]' direction='DESC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[usr:Calculation_489977580833480704:qk]' shelf='rows' />
          </shelf-sorts>
          <slices>
            <column>[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[usr:Calculation_489977580833480704:qk]</column>
            <column>[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[none:Country (WHO-COVID-19-global-data.csv):nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[avg:population:qk]' field-type='quantitative' min='0.0' range-type='fixedmin' scope='cols' type='space' />
            <format attr='title' class='0' field='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[avg:population:qk]' scope='cols' value='Population' />
            <encoding attr='space' class='0' field='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[usr:Calculation_489977580833480704:qk]' field-type='quantitative' fold='true' scope='cols' type='space' />
          </style-rule>
          <style-rule element='cell'>
            <format attr='text-align' field='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[avg:population:qk]' value='center' />
            <format attr='text-orientation' field='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[avg:population:qk]' value='0' />
          </style-rule>
          <style-rule element='label'>
            <format attr='text-orientation' field='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[avg:population:qk]' value='-90' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='size' field='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[usr:Calculation_489977580833480704:qk]' field-type='quantitative' max-size='1' min-size='0' type='centersize' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='in-tooltip' field='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[avg:population:qk]' value='false' />
          </style-rule>
          <style-rule element='gridline'>
            <format attr='stroke-size' scope='cols' value='0' />
            <format attr='line-visibility' scope='cols' value='off' />
          </style-rule>
        </style>
        <panes>
          <pane id='1' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Bar' />
            <encodings>
              <color column='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[none:Country (WHO-COVID-19-global-data.csv):nk]' />
              <text column='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[usr:Calculation_489977580833480704:qk]' />
              <color column='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[:Measure Names]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='size' value='2' />
              </style-rule>
            </style>
          </pane>
          <pane id='2' selection-relaxation-option='selection-relaxation-allow' x-axis-name='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[usr:Calculation_489977580833480704:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Bar' />
            <encodings>
              <color column='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[none:Country (WHO-COVID-19-global-data.csv):nk]' />
              <text column='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[usr:Calculation_489977580833480704:qk]' />
              <color column='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[:Measure Names]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='size' value='2' />
              </style-rule>
            </style>
          </pane>
          <pane id='3' selection-relaxation-option='selection-relaxation-allow' x-axis-name='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[avg:population:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Bar' />
            <encodings>
              <color column='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[none:Country (WHO-COVID-19-global-data.csv):nk]' />
              <text column='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[usr:Calculation_489977580833480704:qk]' />
              <text column='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[avg:population:ok]' />
              <text column='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[avg:population_density:qk]' />
              <color column='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[:Measure Names]' />
            </encodings>
            <style>
              <style-rule element='cell'>
                <format attr='wrap' value='auto' />
                <format attr='text-align' value='center' />
              </style-rule>
              <style-rule element='mark'>
                <format attr='size' value='2' />
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-mode' value='all' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[none:Country (WHO-COVID-19-global-data.csv):nk]</rows>
        <cols>([federated.1pylrsr1mlnqmt1bo4mju0513a1x].[avg:population:qk] + [federated.1pylrsr1mlnqmt1bo4mju0513a1x].[usr:Calculation_489977580833480704:qk])</cols>
      </table>
      <simple-id uuid='{96794E9B-6DAA-4E59-AE1A-80A43A2C5304}' />
    </worksheet>
    <worksheet name='Effectiveness'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontname='Tableau Medium'>Effectiveness on New Deaths</run>
            <run>Æ&#10;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='OWID_corrected+' name='federated.1pylrsr1mlnqmt1bo4mju0513a1x' />
          </datasources>
          <datasource-dependencies datasource='federated.1pylrsr1mlnqmt1bo4mju0513a1x'>
            <column-instance column='[new_deaths]' derivation='Avg' name='[avg:new_deaths:qk]' pivot='key' type='quantitative' />
            <column-instance column='[people_fully_vaccinated]' derivation='Avg' name='[avg:people_fully_vaccinated:qk]' pivot='key' type='quantitative' />
            <column caption='Date' datatype='date' name='[date]' role='dimension' type='ordinal' />
            <column caption='New Deaths' datatype='real' name='[new_deaths]' role='measure' type='quantitative' />
            <column caption='People Fully Vaccinated' datatype='integer' name='[people_fully_vaccinated]' role='measure' type='quantitative' />
            <column-instance column='[date]' derivation='Month-Trunc' name='[tmn:date:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='quantitative' column='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[avg:people_fully_vaccinated:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[tmn:date:qk]' included-values='in-range'>
            <min>#2020-01-01 00:00:00#</min>
            <max>#2021-08-31 00:00:00#</max>
          </filter>
          <slices>
            <column>[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[tmn:date:qk]</column>
            <column>[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[avg:people_fully_vaccinated:qk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[avg:people_fully_vaccinated:qk]' scope='cols' value='People Fully Vaccinated' />
            <encoding attr='space' class='0' field='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[avg:people_fully_vaccinated:qk]' field-type='quantitative' fold='true' scope='cols' type='space' />
            <format attr='title' class='0' field='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[avg:new_deaths:qk]' scope='cols' value='New Deaths' />
          </style-rule>
          <style-rule element='dropline'>
            <format attr='stroke-size' scope='rows' value='0' />
            <format attr='line-visibility' scope='rows' value='off' />
          </style-rule>
          <style-rule element='refline'>
            <format attr='stroke-size' scope='rows' value='0' />
            <format attr='line-visibility' scope='rows' value='off' />
          </style-rule>
          <style-rule element='gridline'>
            <format attr='stroke-size' scope='rows' value='0' />
            <format attr='line-visibility' scope='rows' value='off' />
          </style-rule>
          <style-rule element='zeroline'>
            <format attr='stroke-size' scope='rows' value='0' />
            <format attr='line-visibility' scope='rows' value='off' />
          </style-rule>
        </style>
        <panes>
          <pane id='5' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[:Measure Names]' />
            </encodings>
            <trendline enable-confidence-bands='false' enable-instant-analytics='true' enabled='true' exclude-color='false' exclude-intercept='false' fit='linear' />
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='false' />
              </style-rule>
            </style>
          </pane>
          <pane id='6' selection-relaxation-option='selection-relaxation-allow' x-axis-name='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[avg:new_deaths:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[:Measure Names]' />
            </encodings>
            <trendline enable-confidence-bands='false' enable-instant-analytics='true' enabled='true' exclude-color='false' exclude-intercept='false' fit='linear' />
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='false' />
              </style-rule>
            </style>
          </pane>
          <pane id='7' selection-relaxation-option='selection-relaxation-allow' x-axis-name='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[avg:people_fully_vaccinated:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[:Measure Names]' />
            </encodings>
            <trendline enable-confidence-bands='false' enable-instant-analytics='true' enabled='true' exclude-color='false' exclude-intercept='false' fit='linear' />
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='false' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[tmn:date:qk]</rows>
        <cols>([federated.1pylrsr1mlnqmt1bo4mju0513a1x].[avg:new_deaths:qk] + [federated.1pylrsr1mlnqmt1bo4mju0513a1x].[avg:people_fully_vaccinated:qk])</cols>
      </table>
      <simple-id uuid='{494E6657-13C5-4D03-92D9-54B9C3DEF0BB}' />
    </worksheet>
    <worksheet name='Global numbers'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontname='Tableau Bold'>Global Vaccination Numbers</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='OWID_corrected+' name='federated.1pylrsr1mlnqmt1bo4mju0513a1x' />
          </datasources>
          <datasource-dependencies datasource='federated.1pylrsr1mlnqmt1bo4mju0513a1x'>
            <column caption='Persons Fully Vaccinated' datatype='integer' name='[PERSONS_FULLY_VACCINATED]' role='measure' type='quantitative' />
            <column caption='Persons Fully Vaccinated Per100' datatype='real' name='[PERSONS_FULLY_VACCINATED_PER100]' role='measure' type='quantitative' />
            <column caption='Persons Vaccinated 1Plus Dose' datatype='integer' name='[PERSONS_VACCINATED_1PLUS_DOSE]' role='measure' type='quantitative' />
            <column caption='Persons Vaccinated 1Plus Dose Per100' datatype='real' name='[PERSONS_VACCINATED_1PLUS_DOSE_PER100]' role='measure' type='quantitative' />
            <column caption='Total Vaccinations2' datatype='integer' name='[TOTAL_VACCINATIONS]' role='measure' type='quantitative' />
            <column caption='Total Vaccinations Per100' datatype='real' name='[TOTAL_VACCINATIONS_PER100]' role='measure' type='quantitative' />
            <column-instance column='[PERSONS_FULLY_VACCINATED_PER100]' derivation='Avg' name='[avg:PERSONS_FULLY_VACCINATED_PER100:qk]' pivot='key' type='quantitative' />
            <column-instance column='[PERSONS_VACCINATED_1PLUS_DOSE_PER100]' derivation='Avg' name='[avg:PERSONS_VACCINATED_1PLUS_DOSE_PER100:qk]' pivot='key' type='quantitative' />
            <column-instance column='[TOTAL_VACCINATIONS_PER100]' derivation='Avg' name='[avg:TOTAL_VACCINATIONS_PER100:qk]' pivot='key' type='quantitative' />
            <column-instance column='[PERSONS_FULLY_VACCINATED]' derivation='Sum' name='[sum:PERSONS_FULLY_VACCINATED:qk]' pivot='key' type='quantitative' />
            <column-instance column='[PERSONS_VACCINATED_1PLUS_DOSE]' derivation='Sum' name='[sum:PERSONS_VACCINATED_1PLUS_DOSE:qk]' pivot='key' type='quantitative' />
            <column-instance column='[TOTAL_VACCINATIONS]' derivation='Sum' name='[sum:TOTAL_VACCINATIONS:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[sum:TOTAL_VACCINATIONS:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[sum:PERSONS_VACCINATED_1PLUS_DOSE:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[sum:PERSONS_FULLY_VACCINATED:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[avg:TOTAL_VACCINATIONS_PER100:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[avg:PERSONS_VACCINATED_1PLUS_DOSE_PER100:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[avg:PERSONS_FULLY_VACCINATED_PER100:qk]&quot;' />
            </groupfilter>
          </filter>
          <manual-sort column='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[sum:TOTAL_VACCINATIONS:qk]&quot;</bucket>
              <bucket>&quot;[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[sum:PERSONS_VACCINATED_1PLUS_DOSE:qk]&quot;</bucket>
              <bucket>&quot;[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[sum:PERSONS_FULLY_VACCINATED:qk]&quot;</bucket>
              <bucket>&quot;[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[avg:TOTAL_VACCINATIONS_PER100:qk]&quot;</bucket>
              <bucket>&quot;[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[avg:PERSONS_VACCINATED_1PLUS_DOSE_PER100:qk]&quot;</bucket>
              <bucket>&quot;[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[avg:PERSONS_FULLY_VACCINATED_PER100:qk]&quot;</bucket>
            </dictionary>
          </manual-sort>
          <slices>
            <column>[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[:Measure Names]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='font-family' value='Tableau Bold' />
            <format attr='text-format' field='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[Multiple Values]' value='' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[:Measure Names]' value='400' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='color' field='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[Multiple Values]' palette='tableau-map-temperatur' reverse='true' type='interpolated' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Text' />
            <encodings>
              <color column='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[Multiple Values]' />
              <text column='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[:Measure Names]</rows>
        <cols />
      </table>
      <simple-id uuid='{E01AD3C2-2A31-4E49-948E-CECBB9379384}' />
    </worksheet>
    <worksheet name='Location Wise'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontname='Tableau Book'>Age Group</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='OWID_corrected+' name='federated.1pylrsr1mlnqmt1bo4mju0513a1x' />
          </datasources>
          <datasource-dependencies datasource='federated.1pylrsr1mlnqmt1bo4mju0513a1x'>
            <column datatype='string' name='[Age Group (group)]' role='dimension' type='nominal'>
              <calculation class='categorical-bin' column='[age_group]' new-bin='true'>
                <bin default-name='false' value='&quot;0-17&quot;'>
                  <value>&quot;0-17&quot;</value>
                  <value>&quot;12-17&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;18-40&quot;'>
                  <value>&quot;18-24&quot;</value>
                  <value>&quot;18-29&quot;</value>
                  <value>&quot;25-34&quot;</value>
                  <value>&quot;25-49&quot;</value>
                  <value>&quot;30-39&quot;</value>
                  <value>&quot;35-44&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;40-55&quot;'>
                  <value>&quot;40-49&quot;</value>
                  <value>&quot;45-54&quot;</value>
                  <value>&quot;50-54&quot;</value>
                  <value>&quot;50-59&quot;</value>
                  <value>&quot;55-59&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;55-70&quot;'>
                  <value>&quot;55-64&quot;</value>
                  <value>&quot;60-64&quot;</value>
                  <value>&quot;60-69&quot;</value>
                  <value>&quot;65-69&quot;</value>
                  <value>&quot;65-74&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;70-80&quot;'>
                  <value>&quot;70-74&quot;</value>
                  <value>&quot;70-79&quot;</value>
                  <value>&quot;75-79&quot;</value>
                  <value>&quot;75+&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Non-EU Countries&quot;'>
                  <value>%null%</value>
                </bin>
              </calculation>
            </column>
            <column caption='Astra Zeneca' datatype='integer' name='[AstraZeneca]' role='measure' type='quantitative' />
            <column caption='Can Sino' datatype='integer' name='[CanSino]' role='measure' type='quantitative' />
            <column datatype='integer' name='[Janssen]' role='measure' type='quantitative' />
            <column datatype='integer' name='[Moderna]' role='measure' type='quantitative' />
            <column datatype='integer' name='[Pfizer]' role='measure' type='quantitative' />
            <column datatype='integer' name='[Sinopharm]' role='measure' type='quantitative' />
            <column datatype='integer' name='[Sinovac]' role='measure' type='quantitative' />
            <column datatype='integer' name='[Sputnik V]' role='measure' type='quantitative' />
            <column datatype='string' name='[WHO_REGION (country_wise_vaccine_corrected.csv)]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column caption='Age Group' datatype='string' name='[age_group]' role='dimension' type='nominal' />
            <column-instance column='[AstraZeneca]' derivation='Max' name='[max:AstraZeneca:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CanSino]' derivation='Max' name='[max:CanSino:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Janssen]' derivation='Max' name='[max:Janssen:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Moderna]' derivation='Max' name='[max:Moderna:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pfizer]' derivation='Max' name='[max:Pfizer:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Sinopharm]' derivation='Max' name='[max:Sinopharm:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Sinovac]' derivation='Max' name='[max:Sinovac:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Sputnik V]' derivation='Max' name='[max:Sputnik V:qk]' pivot='key' type='quantitative' />
            <column-instance column='[WHO_REGION (country_wise_vaccine_corrected.csv)]' derivation='None' name='[none:WHO_REGION (country_wise_vaccine_corrected.csv):nk]' pivot='key' type='nominal' />
            <column-instance column='[Sputnik V]' derivation='Sum' name='[sum:Sputnik V:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[max:AstraZeneca:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[max:CanSino:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[max:Janssen:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[max:Moderna:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[max:Pfizer:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[max:Sinopharm:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[max:Sinovac:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[max:Sputnik V:qk]&quot;' />
            </groupfilter>
          </filter>
          <manual-sort column='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[max:AstraZeneca:qk]&quot;</bucket>
              <bucket>&quot;[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[max:CanSino:qk]&quot;</bucket>
              <bucket>&quot;[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[max:Janssen:qk]&quot;</bucket>
              <bucket>&quot;[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[max:Moderna:qk]&quot;</bucket>
              <bucket>&quot;[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[max:Pfizer:qk]&quot;</bucket>
              <bucket>&quot;[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[max:Sinopharm:qk]&quot;</bucket>
              <bucket>&quot;[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[max:Sinovac:qk]&quot;</bucket>
              <bucket>&quot;[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[sum:Sputnik V:qk]&quot;</bucket>
            </dictionary>
          </manual-sort>
          <manual-sort column='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[Age Group (group)]' direction='ASC'>
            <dictionary>
              <bucket>&quot;Non-EU Countries&quot;</bucket>
              <bucket>&quot;18-40&quot;</bucket>
              <bucket>&quot;40-55&quot;</bucket>
              <bucket>&quot;55-70&quot;</bucket>
              <bucket>&quot;70-80&quot;</bucket>
              <bucket>&quot;80+&quot;</bucket>
              <bucket>&quot;0-17&quot;</bucket>
            </dictionary>
          </manual-sort>
          <filter class='categorical' column='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[none:WHO_REGION (country_wise_vaccine_corrected.csv):nk]'>
            <groupfilter function='except' user:ui-domain='relevant' user:ui-enumeration='exclusive' user:ui-manual-selection='true' user:ui-manual-selection-all-when-empty='true' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:WHO_REGION (country_wise_vaccine_corrected.csv):nk]' />
              <groupfilter function='union'>
                <groupfilter function='member' level='[none:WHO_REGION (country_wise_vaccine_corrected.csv):nk]' member='%null%' />
                <groupfilter function='member' level='[none:WHO_REGION (country_wise_vaccine_corrected.csv):nk]' member='&quot;OTHER&quot;' />
              </groupfilter>
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[:Measure Names]</column>
            <column>[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[none:WHO_REGION (country_wise_vaccine_corrected.csv):nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[Multiple Values]' scope='cols' value='Jabs Issued' />
          </style-rule>
          <style-rule element='cell'>
            <format attr='color' data-class='total' value='#f1ce63' />
          </style-rule>
          <style-rule element='field-labels-decoration'>
            <format attr='font-style' value='normal' />
            <format attr='font-weight' value='normal' />
            <format attr='text-orientation' value='0' />
          </style-rule>
          <style-rule element='label'>
            <format attr='font-family' field='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[none:WHO_REGION (country_wise_vaccine_corrected.csv):nk]' value='Tableau Bold' />
            <format attr='color' field='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[none:WHO_REGION (country_wise_vaccine_corrected.csv):nk]' value='#000000' />
            <format attr='font-family' field='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[:Measure Names]' value='Tableau Bold' />
          </style-rule>
          <style-rule element='pane'>
            <format attr='background-color' value='#555555' />
          </style-rule>
          <style-rule element='gridline'>
            <format attr='stroke-size' value='0' />
          </style-rule>
          <style-rule element='legend-title-text'>
            <format attr='color' field='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[:Measure Names]' value='Vaccine Name'>
              <formatted-text>
                <run>Vaccine Name</run>
              </formatted-text>
            </format>
          </style-rule>
        </style>
        <panes>
          <pane id='1' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[:Measure Names]' />
              <text column='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[:Measure Names]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[Age Group (group)]</rows>
        <cols>[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[Multiple Values]</cols>
      </table>
      <simple-id uuid='{B692B839-F53A-4081-9CC7-F08C8C1B0B63}' />
    </worksheet>
    <worksheet name='Manufacturer wise doses'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontname='Tableau Bold'>&lt;Sheet Name&gt; - &lt;Page Name&gt;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='OWID_corrected+' name='federated.1pylrsr1mlnqmt1bo4mju0513a1x' />
          </datasources>
          <datasource-dependencies datasource='federated.1pylrsr1mlnqmt1bo4mju0513a1x'>
            <column caption='Astra Zeneca' datatype='integer' name='[AstraZeneca]' role='measure' type='quantitative' />
            <column datatype='date' name='[Day]' role='dimension' type='ordinal' />
            <column datatype='integer' name='[Moderna]' role='measure' type='quantitative' />
            <column datatype='integer' name='[Pfizer]' role='measure' type='quantitative' />
            <column datatype='integer' name='[Sinopharm]' role='measure' type='quantitative' />
            <column datatype='integer' name='[Sinovac]' role='measure' type='quantitative' />
            <column datatype='integer' name='[Sputnik V]' role='measure' type='quantitative' />
            <column-instance column='[AstraZeneca]' derivation='Max' name='[max:AstraZeneca:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Moderna]' derivation='Max' name='[max:Moderna:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Pfizer]' derivation='Max' name='[max:Pfizer:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Sinopharm]' derivation='Max' name='[max:Sinopharm:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Sinovac]' derivation='Max' name='[max:Sinovac:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Sputnik V]' derivation='Max' name='[max:Sputnik V:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Day]' derivation='Month-Trunc' name='[tmn:Day:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[max:Pfizer:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[max:Moderna:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[max:AstraZeneca:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[max:Sinovac:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[max:Sinopharm:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[max:Sputnik V:qk]&quot;' />
            </groupfilter>
          </filter>
          <manual-sort column='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[max:Pfizer:qk]&quot;</bucket>
              <bucket>&quot;[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[max:Moderna:qk]&quot;</bucket>
              <bucket>&quot;[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[max:AstraZeneca:qk]&quot;</bucket>
              <bucket>&quot;[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[max:Sinovac:qk]&quot;</bucket>
              <bucket>&quot;[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[max:Sinopharm:qk]&quot;</bucket>
              <bucket>&quot;[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[max:Sputnik V:qk]&quot;</bucket>
            </dictionary>
          </manual-sort>
          <slices>
            <column>[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[:Measure Names]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[Multiple Values]' scope='cols' value='Jabs Issued' />
            <encoding attr='space' class='0' domain-expand='false' field='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[Multiple Values]' field-type='quantitative' scope='cols' type='space' />
          </style-rule>
          <style-rule element='cell'>
            <format attr='text-format' field='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[max:Pfizer:qk]' value='n#,##0,K;-#,##0,K' />
          </style-rule>
          <style-rule element='label'>
            <format attr='font-family' field='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[:Measure Names]' value='Tableau Bold' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[:Measure Names]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[:Measure Names]</rows>
        <cols>[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[Multiple Values]</cols>
        <pages>
          <column>[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[tmn:Day:ok]</column>
        </pages>
      </table>
      <simple-id uuid='{6C64FFD5-B0CC-4C14-A8BC-C49B7CA6D2A3}' />
    </worksheet>
    <worksheet name='Misc'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontname='Superclarendon'>Diabetes, Female &amp; Male Smokers, HDI</run>
            <run>Æ </run>
            <run fontname='Optima'>Vs </run>
            <run fontname='Tableau Semibold'>New Vaccinations</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='OWID_corrected+' name='federated.1pylrsr1mlnqmt1bo4mju0513a1x' />
          </datasources>
          <datasource-dependencies datasource='federated.1pylrsr1mlnqmt1bo4mju0513a1x'>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column-instance column='[diabetes_prevalence]' derivation='Avg' name='[avg:diabetes_prevalence:qk]' pivot='key' type='quantitative' />
            <column-instance column='[female_smokers]' derivation='Avg' name='[avg:female_smokers:qk]' pivot='key' type='quantitative' />
            <column-instance column='[human_development_index]' derivation='Avg' name='[avg:human_development_index:qk]' pivot='key' type='quantitative' />
            <column-instance column='[male_smokers]' derivation='Avg' name='[avg:male_smokers:qk]' pivot='key' type='quantitative' />
            <column-instance column='[new_vaccinations]' derivation='Avg' name='[avg:new_vaccinations:qk]' pivot='key' type='quantitative' />
            <column-instance column='[people_fully_vaccinated]' derivation='Avg' name='[avg:people_fully_vaccinated:qk]' pivot='key' type='quantitative' />
            <column caption='Diabetes Prevalence' datatype='real' name='[diabetes_prevalence]' role='measure' type='quantitative' />
            <column caption='Female Smokers' datatype='real' name='[female_smokers]' role='measure' type='quantitative' />
            <column caption='Human Development Index' datatype='real' name='[human_development_index]' role='measure' type='quantitative' />
            <column caption='Male Smokers' datatype='real' name='[male_smokers]' role='measure' type='quantitative' />
            <column caption='New Vaccinations' datatype='integer' name='[new_vaccinations]' role='measure' type='quantitative' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column caption='People Fully Vaccinated' datatype='integer' name='[people_fully_vaccinated]' role='measure' type='quantitative' />
          </datasource-dependencies>
          <filter class='quantitative' column='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[avg:female_smokers:qk]' included-values='non-null' />
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[none:Country:nk]' direction='DESC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[avg:new_vaccinations:qk]' shelf='rows' />
          </shelf-sorts>
          <slices>
            <column>[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[avg:female_smokers:qk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[avg:diabetes_prevalence:qk]' scope='cols' value='Diabetes Prevalence' />
            <format attr='title' class='0' field='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[avg:female_smokers:qk]' scope='cols' value='Female Smokers' />
            <format attr='title' class='0' field='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[avg:male_smokers:qk]' scope='cols' value='Male Smokers' />
            <format attr='title' class='0' field='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[avg:human_development_index:qk]' scope='cols' value='Human Development Index' />
            <format attr='title' class='0' field='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[avg:people_fully_vaccinated:qk]' scope='cols' value='People Fully Vaccinated' />
            <encoding attr='space' class='0' field='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[avg:people_fully_vaccinated:qk]' field-type='quantitative' scale='log' scope='cols' type='space' />
            <format attr='title' class='0' field='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[avg:new_vaccinations:qk]' scope='cols' value='New Vaccinations' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[none:Country:nk]' />
            </encodings>
          </pane>
          <pane id='1' selection-relaxation-option='selection-relaxation-allow' x-axis-name='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[avg:diabetes_prevalence:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[none:Country:nk]' />
            </encodings>
          </pane>
          <pane id='2' selection-relaxation-option='selection-relaxation-allow' x-axis-name='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[avg:female_smokers:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[none:Country:nk]' />
            </encodings>
          </pane>
          <pane id='3' selection-relaxation-option='selection-relaxation-allow' x-axis-name='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[avg:human_development_index:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[none:Country:nk]' />
            </encodings>
          </pane>
          <pane id='4' selection-relaxation-option='selection-relaxation-allow' x-axis-name='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[avg:male_smokers:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[none:Country:nk]' />
            </encodings>
          </pane>
          <pane id='5' selection-relaxation-option='selection-relaxation-allow' x-axis-name='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[avg:people_fully_vaccinated:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[none:Country:nk]' />
            </encodings>
          </pane>
          <pane id='6' selection-relaxation-option='selection-relaxation-allow' x-axis-name='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[avg:new_vaccinations:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[none:Country:nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[none:Country:nk]</rows>
        <cols>([federated.1pylrsr1mlnqmt1bo4mju0513a1x].[avg:diabetes_prevalence:qk] + ([federated.1pylrsr1mlnqmt1bo4mju0513a1x].[avg:female_smokers:qk] + ([federated.1pylrsr1mlnqmt1bo4mju0513a1x].[avg:male_smokers:qk] + ([federated.1pylrsr1mlnqmt1bo4mju0513a1x].[avg:human_development_index:qk] + ([federated.1pylrsr1mlnqmt1bo4mju0513a1x].[avg:people_fully_vaccinated:qk] + [federated.1pylrsr1mlnqmt1bo4mju0513a1x].[avg:new_vaccinations:qk])))))</cols>
      </table>
      <simple-id uuid='{AC586FE4-C821-4C84-BCB7-C9F74129B218}' />
    </worksheet>
    <worksheet name='Number of vaccines used'>
      <table>
        <view>
          <datasources>
            <datasource caption='OWID_corrected+' name='federated.1pylrsr1mlnqmt1bo4mju0513a1x' />
          </datasources>
          <datasource-dependencies datasource='federated.1pylrsr1mlnqmt1bo4mju0513a1x'>
            <column datatype='string' name='[COUNTRY (vaccination-data including type.csv)]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column datatype='real' name='[NUMBER_VACCINES_TYPES_USED (country_wise_vaccine_corrected.csv)]' role='measure' type='quantitative' />
            <column caption='Number Vaccines Types Used' datatype='integer' name='[NUMBER_VACCINES_TYPES_USED]' role='measure' type='quantitative' />
            <column-instance column='[COUNTRY (vaccination-data including type.csv)]' derivation='None' name='[none:COUNTRY (vaccination-data including type.csv):nk]' pivot='key' type='nominal' />
            <column-instance column='[NUMBER_VACCINES_TYPES_USED (country_wise_vaccine_corrected.csv)]' derivation='Sum' name='[sum:NUMBER_VACCINES_TYPES_USED (country_wise_vaccine_corrected.csv):qk]' pivot='key' type='quantitative' />
            <column-instance column='[NUMBER_VACCINES_TYPES_USED]' derivation='Sum' name='[sum:NUMBER_VACCINES_TYPES_USED:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[none:COUNTRY (vaccination-data including type.csv):nk]' direction='DESC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[sum:NUMBER_VACCINES_TYPES_USED:qk]' shelf='rows' />
          </shelf-sorts>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[sum:NUMBER_VACCINES_TYPES_USED (country_wise_vaccine_corrected.csv):qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[none:COUNTRY (vaccination-data including type.csv):nk]</rows>
        <cols>[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[sum:NUMBER_VACCINES_TYPES_USED:qk]</cols>
      </table>
      <simple-id uuid='{12670571-97A9-4544-A544-13ACC90C0A58}' />
    </worksheet>
    <worksheet name='Vaccines Forecast'>
      <table>
        <view>
          <datasources>
            <datasource caption='OWID_corrected+' name='federated.1pylrsr1mlnqmt1bo4mju0513a1x' />
          </datasources>
          <datasource-dependencies datasource='federated.1pylrsr1mlnqmt1bo4mju0513a1x'>
            <column caption='Vaccine Name' datatype='string' name='[VACCINE_NAME]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;AstraZeneca - Vaxzevria&quot;' value='AstraZeneca' />
                <alias key='&quot;Beijing CNBG - BBIBP-CorV&quot;' value='Beijing CNBG' />
                <alias key='&quot;CanSino - Ad5-nCOV&quot;' value='CanSino' />
                <alias key='&quot;Gamaleya - Sputnik V&quot;' value='Sputnik V' />
                <alias key='&quot;Janssen - Ad26.COV 2.5&quot;' value='Janssen' />
                <alias key='&quot;Moderna - mRNA-1273&quot;' value='Moderna' />
                <alias key='&quot;Pfizer BioNTech - Comirnaty&quot;' value='Pfizer' />
                <alias key='&quot;Sinovac - CoronaVac&quot;' value='Sinovac' />
              </aliases>
            </column>
            <column-instance column='[new_vaccinations]' derivation='Avg' name='[avg:new_vaccinations:qk]' pivot='key' type='quantitative' />
            <column-instance column='[people_fully_vaccinated]' derivation='Avg' name='[avg:people_fully_vaccinated:qk]' pivot='key' type='quantitative' />
            <column caption='Date' datatype='date' name='[date]' role='dimension' type='ordinal' />
            <column caption='New Vaccinations' datatype='integer' name='[new_vaccinations]' role='measure' type='quantitative' />
            <column-instance column='[VACCINE_NAME]' derivation='None' name='[none:VACCINE_NAME:nk]' pivot='key' type='nominal' />
            <column caption='People Fully Vaccinated' datatype='integer' name='[people_fully_vaccinated]' role='measure' type='quantitative' />
            <column-instance column='[date]' derivation='Month-Trunc' name='[tmn:date:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='quantitative' column='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[avg:people_fully_vaccinated:qk]' included-values='non-null' />
          <filter class='categorical' column='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[none:VACCINE_NAME:nk]'>
            <groupfilter function='except' user:ui-domain='relevant' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:VACCINE_NAME:nk]' />
              <groupfilter function='union'>
                <groupfilter function='member' level='[none:VACCINE_NAME:nk]' member='%null%' />
                <groupfilter function='member' level='[none:VACCINE_NAME:nk]' member='&quot;Beijing CNBG - BBIBP-CorV&quot;' />
                <groupfilter function='member' level='[none:VACCINE_NAME:nk]' member='&quot;CanSino - Ad5-nCOV&quot;' />
              </groupfilter>
            </groupfilter>
          </filter>
          <manual-sort column='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[none:VACCINE_NAME:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;Pfizer BioNTech - Comirnaty&quot;</bucket>
              <bucket>&quot;AstraZeneca - Vaxzevria&quot;</bucket>
              <bucket>&quot;Beijing CNBG - BBIBP-CorV&quot;</bucket>
              <bucket>&quot;CanSino - Ad5-nCOV&quot;</bucket>
              <bucket>&quot;Gamaleya - Sputnik V&quot;</bucket>
              <bucket>&quot;Janssen - Ad26.COV 2.5&quot;</bucket>
              <bucket>&quot;Moderna - mRNA-1273&quot;</bucket>
              <bucket>&quot;Novavax - Covavax&quot;</bucket>
              <bucket>&quot;Sinovac - CoronaVac&quot;</bucket>
            </dictionary>
          </manual-sort>
          <slices>
            <column>[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[avg:people_fully_vaccinated:qk]</column>
            <column>[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[none:VACCINE_NAME:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[avg:new_vaccinations:qk]' scope='rows' value='New Vaccinations' />
            <format attr='title' class='0' field='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[tmn:date:qk]' scope='cols' value='Dates' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='off' />
            </view>
            <mark class='Area' />
            <encodings>
              <color column='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[none:VACCINE_NAME:nk]' />
            </encodings>
            <trendline enable-confidence-bands='false' enable-instant-analytics='true' enabled='true' exclude-color='false' exclude-intercept='false' fit='linear' />
          </pane>
        </panes>
        <rows>[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[avg:new_vaccinations:qk]</rows>
        <cols>[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[tmn:date:qk]</cols>
      </table>
      <simple-id uuid='{5686A49F-3AEE-4956-ACC1-B3D2376CAE04}' />
    </worksheet>
    <worksheet name='by country'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontcolor='#000000' fontname='Tableau Bold' fontsize='12'>Top 10 Countries with Total Vaccinations &amp; Fully Vaccinated population from Jan-2021 to Aug-2021</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='OWID_corrected+' name='federated.1pylrsr1mlnqmt1bo4mju0513a1x' />
          </datasources>
          <datasource-dependencies datasource='federated.1pylrsr1mlnqmt1bo4mju0513a1x'>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column-instance column='[people_fully_vaccinated]' derivation='Avg' name='[avg:people_fully_vaccinated:qk]' pivot='key' type='quantitative' />
            <column-instance column='[total_vaccinations]' derivation='Avg' name='[avg:total_vaccinations:qk]' pivot='key' type='quantitative' />
            <column caption='Date' datatype='date' name='[date]' role='dimension' type='ordinal' />
            <column-instance column='[date]' derivation='Month' name='[mn:date:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column caption='People Fully Vaccinated' datatype='integer' name='[people_fully_vaccinated]' role='measure' type='quantitative' />
            <column caption='Total Vaccinations' datatype='integer' name='[total_vaccinations]' role='measure' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[none:Country:nk]'>
            <groupfilter function='union' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Brazil&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;China&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;France&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Germany&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;India&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Italy&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Japan&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Russia&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;United Kingdom&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;United States&quot;' />
            </groupfilter>
          </filter>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[none:Country:nk]' direction='DESC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[avg:total_vaccinations:qk]' shelf='rows' />
          </shelf-sorts>
          <slices>
            <column>[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[none:Country:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[avg:people_fully_vaccinated:qk]' scope='cols' value='People Fully Vaccinated' />
            <format attr='title' class='0' field='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[avg:total_vaccinations:qk]' scope='cols' value='Total Vaccinations' />
            <encoding attr='space' class='0' field='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[avg:total_vaccinations:qk]' field-type='quantitative' fold='true' min='0.0' range-type='fixedmin' scope='cols' type='space' />
            <format attr='height' field='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[avg:people_fully_vaccinated:qk]' value='64' />
            <format attr='height' field='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[avg:total_vaccinations:qk]' value='64' />
          </style-rule>
          <style-rule element='cell'>
            <format attr='height' field='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[none:Country:nk]' value='19' />
            <format attr='font-size' data-class='subtotal' scope='rows' value='15' />
          </style-rule>
          <style-rule element='label'>
            <format attr='font-size' field='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[none:Country:nk]' value='11' />
            <format attr='font-family' field='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[none:Country:nk]' value='Tableau Bold' />
          </style-rule>
          <style-rule element='table'>
            <format attr='omit-on-special' field='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[avg:people_fully_vaccinated:qk]' value='false' />
            <format attr='break-on-special' field='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[avg:people_fully_vaccinated:qk]' value='false' />
            <format attr='show-null-value-warning' field='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[avg:people_fully_vaccinated:qk]' value='false' />
            <format attr='omit-on-special' field='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[avg:total_vaccinations:qk]' value='false' />
            <format attr='break-on-special' field='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[avg:total_vaccinations:qk]' value='false' />
            <format attr='show-null-value-warning' field='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[avg:total_vaccinations:qk]' value='false' />
          </style-rule>
          <style-rule element='gridline'>
            <format attr='stroke-size' scope='cols' value='0' />
            <format attr='line-visibility' scope='cols' value='off' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
          <pane id='1' selection-relaxation-option='selection-relaxation-allow' x-axis-name='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[avg:people_fully_vaccinated:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Bar' />
            <encodings>
              <lod column='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[:Measure Names]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='false' />
              </style-rule>
            </style>
          </pane>
          <pane id='2' selection-relaxation-option='selection-relaxation-allow' x-axis-name='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[avg:total_vaccinations:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Shape' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <shape column='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[none:Country:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='size' value='2' />
                <format attr='mark-labels-show' value='false' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[none:Country:nk]</rows>
        <cols>([federated.1pylrsr1mlnqmt1bo4mju0513a1x].[avg:people_fully_vaccinated:qk] + [federated.1pylrsr1mlnqmt1bo4mju0513a1x].[avg:total_vaccinations:qk])</cols>
        <pages>
          <column>[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[mn:date:ok]</column>
        </pages>
      </table>
      <simple-id uuid='{66C3A8E0-C94E-4742-B80B-03E35806F6F0}' />
    </worksheet>
    <worksheet name='by cuontry fully vaccinated'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontname='Tableau Bold'>Fully vaccinated and Total Vaccinations by Country</run>
          </formatted-text>
        </title>
        <caption>
          <formatted-text>
            <run fontname='Tableau Regular'>Color shows sum of Total Vaccinations2.  Size shows sum of Persons Fully Vaccinated.  </run>
          </formatted-text>
        </caption>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='OWID_corrected+' name='federated.1pylrsr1mlnqmt1bo4mju0513a1x' />
          </datasources>
          <datasource-dependencies datasource='federated.1pylrsr1mlnqmt1bo4mju0513a1x'>
            <column datatype='string' name='[COUNTRY (vaccination-data including type.csv)]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column caption='Persons Fully Vaccinated' datatype='integer' name='[PERSONS_FULLY_VACCINATED]' role='measure' type='quantitative' />
            <column caption='Total Vaccinations2' datatype='integer' name='[TOTAL_VACCINATIONS]' role='measure' type='quantitative' />
            <column-instance column='[COUNTRY (vaccination-data including type.csv)]' derivation='None' name='[none:COUNTRY (vaccination-data including type.csv):nk]' pivot='key' type='nominal' />
            <column-instance column='[PERSONS_FULLY_VACCINATED]' derivation='Sum' name='[sum:PERSONS_FULLY_VACCINATED:qk]' pivot='key' type='quantitative' />
            <column-instance column='[TOTAL_VACCINATIONS]' derivation='Sum' name='[sum:TOTAL_VACCINATIONS:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='text-format' field='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[sum:PERSONS_FULLY_VACCINATED:qk]' value='n#,##0,,.00M;-#,##0,,.00M' />
            <format attr='text-format' field='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[sum:TOTAL_VACCINATIONS:qk]' value='n#,##0,,,.00B;-#,##0,,,.00B' />
          </style-rule>
          <style-rule element='table'>
            <format attr='omit-on-special' field='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[sum:PERSONS_FULLY_VACCINATED:qk]' value='false' />
            <format attr='break-on-special' field='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[sum:PERSONS_FULLY_VACCINATED:qk]' value='false' />
            <format attr='show-null-value-warning' field='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[sum:PERSONS_FULLY_VACCINATED:qk]' value='false' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='on' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <size column='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[sum:PERSONS_FULLY_VACCINATED:qk]' />
              <color column='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[sum:TOTAL_VACCINATIONS:qk]' />
              <text column='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[none:COUNTRY (vaccination-data including type.csv):nk]' />
              <text column='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[sum:PERSONS_FULLY_VACCINATED:qk]' />
              <text column='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[sum:TOTAL_VACCINATIONS:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-line-first' value='true' />
                <format attr='mark-labels-line-last' value='true' />
                <format attr='mark-labels-range-min' value='true' />
                <format attr='mark-labels-range-max' value='true' />
                <format attr='mark-labels-mode' value='all' />
                <format attr='mark-labels-range-scope' value='pane' />
                <format attr='mark-labels-range-field' value='' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows />
        <cols />
      </table>
      <simple-id uuid='{13D5770B-E9FD-4B92-B880-3D634133AB64}' />
    </worksheet>
    <worksheet name='population vs population density'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Population &amp; Population Density</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='OWID_corrected+' name='federated.1pylrsr1mlnqmt1bo4mju0513a1x' />
          </datasources>
          <datasource-dependencies datasource='federated.1pylrsr1mlnqmt1bo4mju0513a1x'>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column-instance column='[population]' derivation='Avg' name='[avg:population:qk]' pivot='key' type='quantitative' />
            <column-instance column='[population_density]' derivation='Avg' name='[avg:population_density:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column caption='Population' datatype='integer' name='[population]' role='measure' type='quantitative' />
            <column caption='Population Density' datatype='real' name='[population_density]' role='measure' type='quantitative' />
          </datasource-dependencies>
          <filter class='quantitative' column='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[avg:population:qk]' included-values='non-null' />
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[none:Country:nk]' direction='DESC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[avg:population:qk]' shelf='rows' />
          </shelf-sorts>
          <slices>
            <column>[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[avg:population:qk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[avg:population_density:qk]' field-type='quantitative' fold='true' scope='cols' synchronized='true' type='space' />
            <format attr='title' class='0' field='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[avg:population:qk]' scope='cols' value='Population' />
            <encoding attr='space' class='0' field='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[avg:population:qk]' field-type='quantitative' scale='log' scope='cols' type='space' />
            <format attr='title' class='0' field='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[avg:population_density:qk]' scope='cols' value='Population Density' />
          </style-rule>
          <style-rule element='table'>
            <format attr='omit-on-special' field='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[avg:population_density:qk]' value='false' />
            <format attr='break-on-special' field='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[avg:population_density:qk]' value='false' />
            <format attr='show-null-value-warning' field='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[avg:population_density:qk]' value='false' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='font-family' value='Trebuchet MS' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Bar' />
            <encodings>
              <color column='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[:Measure Names]' />
            </encodings>
          </pane>
          <pane id='1' selection-relaxation-option='selection-relaxation-allow' x-axis-name='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[avg:population:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Bar' />
            <encodings>
              <color column='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[:Measure Names]' />
              <text column='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[avg:population:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
          <pane id='2' selection-relaxation-option='selection-relaxation-allow' x-axis-name='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[avg:population_density:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Bar' />
            <encodings>
              <color column='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[:Measure Names]' />
              <text column='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[avg:population_density:qk]' />
            </encodings>
            <style>
              <style-rule element='cell'>
                <format attr='text-align' value='center' />
              </style-rule>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[none:Country:nk]</rows>
        <cols>([federated.1pylrsr1mlnqmt1bo4mju0513a1x].[avg:population:qk] + [federated.1pylrsr1mlnqmt1bo4mju0513a1x].[avg:population_density:qk])</cols>
      </table>
      <simple-id uuid='{8D7D7D49-F230-4665-8ED2-056285A7E7C6}' />
    </worksheet>
  </worksheets>
  <dashboards>
    <dashboard name='Dashboard 1'>
      <style />
      <size maxheight='800' maxwidth='1000' minheight='800' minwidth='1000' />
      <zones>
        <zone h='100000' id='4' type-v2='layout-basic' w='100000' x='0' y='0'>
          <zone h='98000' id='3' name='Effectiveness' w='98400' x='800' y='1000'>
            <zone-style>
              <format attr='border-color' value='#000000' />
              <format attr='border-style' value='none' />
              <format attr='border-width' value='0' />
              <format attr='margin' value='4' />
            </zone-style>
          </zone>
          <zone-style>
            <format attr='border-color' value='#000000' />
            <format attr='border-style' value='none' />
            <format attr='border-width' value='0' />
            <format attr='margin' value='8' />
          </zone-style>
        </zone>
      </zones>
      <devicelayouts>
        <devicelayout auto-generated='true' name='Phone'>
          <size maxheight='700' minheight='700' sizing-mode='vscroll' />
          <zones>
            <zone h='100000' id='8' type-v2='layout-basic' w='100000' x='0' y='0'>
              <zone h='98000' id='7' param='vert' type-v2='layout-flow' w='98400' x='800' y='1000'>
                <zone fixed-size='280' h='98000' id='3' is-fixed='true' name='Effectiveness' w='98400' x='800' y='1000'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
              </zone>
              <zone-style>
                <format attr='border-color' value='#000000' />
                <format attr='border-style' value='none' />
                <format attr='border-width' value='0' />
                <format attr='margin' value='8' />
              </zone-style>
            </zone>
          </zones>
        </devicelayout>
      </devicelayouts>
      <simple-id uuid='{FF9F3E04-4BAC-437B-AF02-ED87FA52DD89}' />
    </dashboard>
  </dashboards>
  <windows film-mode='true' source-height='30'>
    <window class='worksheet' name='by country'>
      <cards>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='300'>
            <card type='currpage' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <current-page>
          <multibucket>
            <bucket>8</bucket>
          </multibucket>
        </current-page>
        <highlight>
          <color-one-way>
            <field>[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[Country (group)]</field>
            <field>[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[none:COUNTRY (vaccination-data including type.csv):nk]</field>
            <field>[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[none:COUNTRY:nk]</field>
            <field>[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[none:Country:nk]</field>
            <field>[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[yr:date (vaccinations-by-age-group.csv):ok]</field>
            <field>[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[yr:date:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{9058CAF8-C50C-4099-9A22-1E47212E8C3B}' />
    </window>
    <window class='worksheet' name='% 0f fully vaccinated people'>
      <cards>
        <edge name='left'>
          <strip size='192'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[:Measure Names]</field>
            <field>[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[none:Country (WHO-COVID-19-global-data.csv):nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{EA105CE8-8C72-4619-A4CD-79F650CC18E1}' />
    </window>
    <window class='worksheet' name='population vs population density'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='1' param='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[:Measure Names]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[none:Country:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{7B354E00-2257-44AF-A14B-88AF0ACAC29A}' />
    </window>
    <window class='worksheet' name='Global numbers'>
      <cards>
        <edge name='left'>
          <strip size='300'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[Multiple Values]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[none:VACCINES_USED:nk]</field>
            <field>[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[none:WHO_REGION (vaccination-data including type.csv):nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{E2DA387D-E19D-442E-A2BC-E2CD6B3BCC09}' />
    </window>
    <window class='worksheet' name='by cuontry fully vaccinated'>
      <cards>
        <edge name='left'>
          <strip size='242'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='bottom'>
          <strip size='94'>
            <card type='caption' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[:Measure Names]</field>
            <field>[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[none:COUNTRY (vaccination-data including type.csv):nk]</field>
            <field>[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[sum:PERSONS_FULLY_VACCINATED:qk]</field>
            <field>[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[sum:TOTAL_VACCINATIONS:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{9D09F476-6A00-4A82-9C9B-C4C04BBF6ED4}' />
    </window>
    <window class='worksheet' name='Manufacturer wise doses'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card type='currpage' />
            <card pane-specification-id='0' param='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[:Measure Names]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <current-page>
          <multibucket>
            <bucket>#2021-08-01 00:00:00#</bucket>
          </multibucket>
        </current-page>
        <highlight>
          <color-one-way>
            <field>[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[:Measure Names]</field>
            <field>[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[none:Code (covid-vaccine-doses-by-manufacturer-revised.csv):nk]</field>
            <field>[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[none:Entity:nk]</field>
            <field>[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[none:VACCINES_USED:nk]</field>
            <field>[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[none:vac_0 (country_wise_vaccine_corrected.csv1):nk]</field>
            <field>[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[yr:Day:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{017591B0-7139-485A-8408-B48FD33647D1}' />
    </window>
    <window class='worksheet' name='Number of vaccines used'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[none:COUNTRY (vaccination-data including type.csv):nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{24307440-D749-4AE2-96D1-9F6A4A2A50F3}' />
    </window>
    <window class='worksheet' name='Location Wise'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='1' param='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[:Measure Names]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[Age Group (group)]</field>
            <field>[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[none:WHO_REGION (country_wise_vaccine_corrected.csv):nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{980001DA-B56A-4FB2-BCB5-17777C8CEDE2}' />
    </window>
    <window class='worksheet' name='Effectiveness'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='6' param='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[:Measure Names]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <current-page>
          <multibucket>
            <bucket>&quot;Belgium&quot;</bucket>
          </multibucket>
        </current-page>
        <highlight>
          <color-one-way>
            <field>[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[mn:Date_reported:qk]</field>
            <field>[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[none:COUNTRY (country_wise_vaccine_corrected.csv1):nk]</field>
            <field>[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[none:Country:nk]</field>
            <field>[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[qr:date:ok]</field>
            <field>[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[yr:Date_reported:ok]</field>
            <field>[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[yr:date:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{B60DEF85-8D59-461C-AC8B-F4490937875F}' />
    </window>
    <window class='dashboard' name='Dashboard 1'>
      <viewpoints>
        <viewpoint name='Effectiveness'>
          <current-page>
            <multibucket>
              <bucket>&quot;Belgium&quot;</bucket>
            </multibucket>
          </current-page>
          <zoom type='entire-view' />
        </viewpoint>
      </viewpoints>
      <active id='3' />
      <simple-id uuid='{CAE2E8FF-082A-4E66-9046-DCB49096F4A3}' />
    </window>
    <window class='worksheet' name='Vaccines Forecast'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='300'>
            <card pane-specification-id='0' param='[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[none:VACCINE_NAME:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[:Measure Names]</field>
            <field>[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[none:VACCINE_NAME:nk]</field>
            <field>[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[yr:date:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{7DC071D1-2492-4499-AC09-99AF05B3FC64}' />
    </window>
    <window class='worksheet' maximized='true' name='Misc'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[:Measure Names]</field>
            <field>[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[none:Country:nk]</field>
            <field>[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[qr:date:ok]</field>
            <field>[federated.1pylrsr1mlnqmt1bo4mju0513a1x].[yr:date:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{8A571607-037C-42A0-9005-B19EDA838815}' />
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='384' name='% 0f fully vaccinated people' width='384'>
      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
    </thumbnail>
    <thumbnail height='384' name='Dashboard 1' width='384'>
      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
      f84f/dEf8fGPf5zR0VEcDgderxeAFStW8NJLL7FixQomJyfRNI28vDydWywWS4nVQHt7e6mp
      qdG7GUKkJZfLRW5u7rTl1HNzc9E0Db/fL8unK0zOAQgh5nX7J/zw1xkZGfLmrzgZAhIJIRfz
      qc3r9UaGgYS6bv87lAIgEkIKgNp8Ph8+n0/vZoglkgIghBACkAIQM5qmcfnyZWBqCh2Ax+PB
      arXG5NjhY4r4GRkZYXh4eMb3Y/HcS37xNzQ0xKlTpxgcHJzzd9ra2pZ0H6mWoxSAGHn33Xe5
      cOECgUCA1157jYGBASYnJ7HZbHR2dk574djtdvr7+wkEApE51G63G03T6Ovrw263R743NjbG
      wMAAv/71r3E4HASDQTo7O/H5fHg8Hvx+P2NjY7o85lQyMDDAmTNn6OzsBKaee6vVit/vj+QZ
      zjAQCGC1WnE6nfh8PgKBAIFAAJ/Ph9vtpru7m0AgEMlnZGRk2jHsdjsDAwOR+xkbG0u5NxY9
      dHV1sXnzZt5++238fj8Oh4Pu7m40TSMUCmG1WqcVAMkRjC+++OKLejfiTiYmJigoKNC7GXMa
      Hx/HarWSm5tLfX09LS0tlJSUkJuby9mzZykpKaGzs5O77rqL69evc/PmTXp7eykoKODChQs0
      NDRw4sQJysvLGRwc5MKFC1RVVfHzn/8cr9dLTk4ONpuNqqoqTp8+TWlpKWfOnMHlcvH2229T
      WVlJYWGh3k/DvJI9w/z8fCoqKrDb7dTU1LB//35KS0vx+/20t7dTUlJCcXExRqOR/fv3U1ZW
      xrvvvovRaMTr9eJ2u+nv74+slXP27NlIPuXl5XR2dlJSUkIoFOLChQuRsdj9+/fj9Xqpr6/H
      YEjez2Ph8f9knvVTU1PDzZs3CQaDZGRkcPbs2cgb+NmzZykoKKC3t5d169YBpGWOt/8dJm9L
      FXLs2DFCoRDt7e10d3dTUVHB2rVrMZlMNDU1sWHDhsgMCqvVys6dO2e9rmFiYoKenh4CgQAT
      ExPU1dWxe/duamtrqaqqoqqqiuHhYfr6+jCZpmbw7t27l7vuuiuhjzcdrF69mo6ODjRNi+Rp
      NpvRNI3CwkJWrVpFbm7ujNv19PQwMDAQyXvv3r00NDREjjE4OEggECAUCuHxeCIZh/MUi9fc
      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
      px36oE0AAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='384' name='Effectiveness' width='384'>
      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
      uUh0DkExXgAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='248' name='Global numbers' width='384'>
      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
    </thumbnail>
    <thumbnail height='384' name='Location Wise' width='384'>
      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
      U/8fiiW7Nx+yzx0AAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='358' name='Manufacturer wise doses' width='384'>
      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
    </thumbnail>
    <thumbnail height='384' name='Misc' width='384'>
      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
    </thumbnail>
    <thumbnail height='384' name='Number of vaccines used' width='384'>
      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
    </thumbnail>
    <thumbnail height='384' name='Vaccines Forecast' width='384'>
      iVBORw0KGgoAAAANSUhEUgAAAYAAAAGACAYAAACkx7W/AAAACXBIWXMAAA7DAAAOwwHHb6hk
      AAAgAElEQVR4nOzdWXCc1Znw8f95l2619gXbGBtss3jByCxhJyFhQhbDEJJAkQxhskzNTFWq
      JnMxNampuchNpuZmLmep1CzhqwmTEApIwk4IBBICCQkOBrzKm7zIQlJLvS/vds530eq2jFe1
      WmrZ/fwqiqxW99vnbePznPOcTRljDEIIIVqO1ewCCCGEaA4JAEII0aIkAAghRIuSACCEEC3q
      vA8AYRg2uwhCCLEonfcBIIqiZhdBCCEWpfM+AAghhDg5CQBCCNGiJAAIIUSLkgAghBAtSgKA
      EEK0KAkAQgjRoiQACCFEi5IAIIQQLUoCgBBCtCgJAEII0aIkAAghRIuSACCEEC1KAoAQQrQo
      CQBCCNGiJAAIIUSLkgAghBAtSgKAEEK0KAkAQgjRoiQACCFEi5IAIIQQLUoCgBBCtCgJAEII
      0aIkAAghRIuSACCEEC1KAoAQQrQoCQBCCNGiJAAIIUSLkgAghBAtqukBwPd9du/ezcjICMYY
      AKIoYu/evRw5cqT2WBiG7N27t/Y8rTXZbBYAYwyTk5NNuwchhDgXNTUAhGHI448/TiqV4re/
      /S1btmzBGMOLL77I8PAwb731Vu2x5557jkOHDvHmm2+ydetWyuUyL730EsYYDhw4wCuvvNLM
      WxFCiHNOUwNAKpWir6+Pm2++mc997nNs376dMAxJJpPceeedfOELX2Dbtm0Ui0UKhQJ33HEH
      99xzD9u3b69do1Qq8fLLL3Pvvfc28U6EEOLc4zTzzdvb2xkdHWV8fBzf98lkMgRBQEdHBwCW
      ZRGPx0mn0/T396OUoq2tDa01xhgOHz7M97//fT73uc8Rj8cB0FoTBEHtPaIoolQqNeX+hBBi
      MWt6ALjrrrvYsmUL7e3tJBIJbNsmiqLac4wxxGIxwjCs/QyglGL58uWsWbOG7du3s2rVqtrj
      sVis9nrf94/7WQghREVTA4BSiiVLlrB582YOHTpEOp3GcRzy+Ty+75PP51FK0dfXx/j4OJ7n
      MTU1RWdnZ6XwjsMNN9zA008/zbZt27jqqqtQSp30fYQQQhyvqQEA4KWXXiKXywFw9913Y1kW
      d9xxB48++mjtMcdxuO2223jsscewLIu77roLy7JYsmQJlmVx99138/TTT7Nu3Tpc123m7Qgh
      xDlDmWpOpUmMMYRhiOM4tZZ6dZqnUgrLOjZOHUXRCY+died5tfEBIYQQxzS9B6CUOqHVrpTC
      tu0Tnnuyx4QQQtSn6QvBhBBCNIcEACGEaFESAIQQokVJABBCiBYlAUAIIVqUBAAhhGhREgCE
      EKJFSQAQQogWJQFACCFalAQAIYRoURIAhBCiRUkAEEKIFiUBQAghWpQEACGEaFESAIQQokVJ
      ABBCiBYlAUAIIVqUBAAhhGhREgCEEKJFSQAQQogWJQFACCFalAQAIYRoURIAhBCiRUkAEEKI
      FiUBQAghWlTTA4Axhmw2Sz6fxxhz3GPFYvGkj1V/DoKg9mfP85pzA0IIcY5ymvnmxhhefPFF
      SqUSURSxdOlSbr/9dv7whz+wf/9+PM/jox/9KJdddhlvvvkmIyMjlMtlbr/9dpYtW8arr77K
      XXfdxdTUFC+//DJf+tKXmnk7QghxTmlqD8D3fZLJJF/4whf4whe+wP79+4miiG3btvHAAw/w
      wAMP8MYbb+B5Hnv37uW+++7jc5/7HL/73e8wxlAsFgmCgGeeeYY777yzmbcihBDnnKb2AGKx
      GMuXL+cnP/kJQRCwfv16giCgs7MTy7JIJBK4rksqlWLJkiXYtk1PTw++7wOQSqV45pln2LRp
      EwMDAwBorYmiqPYeWuva84UQQhzT1AAQhiGpVIrBwUHCMGRoaIhrrrkGpdRZvV4pdVxlX33M
      sqxT/iyEEKKiqQEgl8thWRbr1q0D4A9/+AOWZZHP59FaEwQBQRDQ19dHMplEa00+nycWiwHQ
      29vL5z//eR555BEuuugiLrzwQpRS2LZde48wDHGcpt6mEEIsSk2tGXt6elBK8fjjjxNFERde
      eCGxWIz169fzf//3f3iexx133EE8Hmf16tX86Ec/olQq8clPfhIAy7JwHIf777+fH/3oR/zF
      X/wFrus285aEEOKcoUx1nmUTlUolLMsiHo8DldlB5XIZ27ZrrX2AYrGI4zjHPXYmnufVriuE
      EOKYRREA5pMEACGEODkZHRVCiBYlAUAIIVqUBAAhhGhREgCEEKJFSQAQQogWJQFACCFalAQA
      IYRoURIAhBCiRUkAEEKIFiUBQAghWpQEACGEaFESAIQQokVJABBCiBYlAUAIIVqQ1loCgBBC
      tBqtNbt27ZIAIIQQrcQYw+TkJENDQ809ElIIIc5HYRiSTCaJxWLE43Fc18VxHJRSKKWaWrYg
      CHj//fexbVsCgBBCNNrk5CS7d+9GKYVt23R0dNDW1kZHR0ftKxaLLXgwMMZw4MABkskkN910
      kwQAIYRoJK01+Xwe27axrEqWvVAoUCgUSCaTADiOg+u69Pb20t3dTXt7O67r1l4zH4GhmvrZ
      vXs3a9as4aKLLpIAIIQQjRRFEdlsFqBWkX+4QjfGUC6XGRkZ4ciRIyilSCQSdHV10d7eTldX
      F4lEgng83rBgEAQB27dvRynFxo0bK2mphlxZCCEEUMn/53I5HOf01atlWbUegjEG3/drPQSl
      VK2X0N3dTW9vLx0dHTiOU3vdbAKDMYZDhw4xNjbGDTfcQHt7O4AEACGEaKRsNosxZlYV9MkG
      h7XWlMtl8vk8IyMjALVeQkdHB4lEovZl2/Zpr59Kpdi+fTurV69m5cqVtcclAAghRIMYY5ia
      mqq17OdKKYXrurVrB0HA5OQkk5OTtQHmWCxGIpGgv7+fzs5O2trajgsoQRCwe/duANavX1+7
      HkgAEEKIhgnDkGw2e8b0Tz1O1kuojiUUi0XGxsaAygBzV1dXbXA5mUxy8OBBbrnlFrq7u497
      vQQAIYRokEKhQBiGDesBnI1qT6CaBtJak81myWazhGHIxMQE8XicqakplFL09PTQ2dkp6wCE
      EKJRjDGk02mMMU0tR3WQOIoiMpkMxhj6+/splUoMDw/XxicSiURzA0C5XGbr1q1EUQRUui43
      3ngj5XKZN954g/b2dm666SZs2yafz/PWW2/R0dHB9ddfD8CRI0dYvXo1xhh27NjBxo0bm3k7
      QogWprWmWCw2uxg1xWKRQqHABRdcQCwWAzhuPMHzvObuBeQ4DitWrGDlypUMDAzwzjvvYIzh
      pz/9KatXr8ZxHF555RWMMfzsZz9j9erVRFHEb37zG3zf5+2338YYw9tvv13LfwkhRDP4vk82
      m236Vg9QGfidmpqio6ODzs7OE35fTRs1PQBcfPHFrFq1iomJCW677TbCMERrzeWXX84NN9zA
      Bx98QCaTIR6Pc+mll3LTTTdx+PDh2jXGx8fZuXMnH//4x5t4J0KIVlcul/F9v+kBQGtNOp0G
      oLe397TlWRRjAKVSiX379vHnf/7nlMtlEokEcGwKVKFQoKurq7Y4whiDMYbh4WH279/PQw89
      VBsAiaKIMAxr146iiFKp1JT7EkK0jvHxcaIoanoAKBQK5HI5+vv7sW27lmI/mUURALZu3cqm
      TZuwbRvXdfE8D6jkqcIwJJFI1Crx6s0opVi1ahXXXXcdv/rVr/jSl76EZVnHjYYDeJ5HPB5f
      +JsSQrQMYwy5XI5YLLagM4A+LAxD0uk0iUSC7u7uM5al6ecBeJ7H7t27GRwcBCppoSAIGB8f
      Z8+ePbVl0JlMppbuWbJkCVAJApdeeikXX3wxv/rVr5p5G0KIFlYqlSqDqk2s/GeT+qlqegDI
      5/PcfPPNtdFpy7K45557+M1vfsPQ0BCf+tSnsCyLzZs388Ybb3D48GE+8YlP4DgOa9euRSnF
      rbfeWgscQgix0KrTLZvFGEOxWCSbzdLb21tbDXwmyjR70uo8kxSQEGI+aa3Zs2cPyWSyaT2A
      KIoYGRnBtm2WL19+1uVoeg9ACCHOZUEQUCgUmvb+WmtSqRRaawYGBmY1CC0BQAgh5sDzPIrF
      YlNm/xhjKJVK5PN5enp6Zn1+gAQAIYSYg1wuh9a6KQEgiiImJydrp4vNtgwSAIQQYg5SqVTT
      Wv/ZbJYoiujr66urDBIAhBCiTlEUkU6nz3ggS6MZYygUCmSzWfr6+mqLZ2dLAoAQQtQpl8vN
      +vSvRtBak8lkanv/1/v+EgCEEKIOxpjayVwL/b7pdBrf9xkYGJhT70MCgBBC1CGKIorF4oLO
      /a+eAJbL5eju7p7zGicJAEIIUYdyubzg8/+jKCKVSuE4Dr29vXMOPhIAhBCiDqVSacG3n8lm
      s3ieV9vpc64WxW6gQghxrqluvLYQYwDVE7yy2Szd3d20tbU15LrSAxBCiDpMTk4uWP4/iiKm
      pqZwHIeenp6Gva8EACGEmKXq6V8LEQCMMeTzecrlMn19fThO4xI3EgCEEGKWJicnF+y9fN8n
      lUrR3d1d94KvU5EAIIQQs1Cdh78Qq39nzvrp7u5u+HiDBAAhhJiFcrlMqVRakMHfbDZLsVhk
      YGCAWCwmAUAIIZqpevzjfAuCgHQ6TUdHR8Nm/XyYBAAhhDhL1cPftdbz+j5RFJFMJnFdt+6d
      Ps+GBAAhhJiFTCaDUmreKuXqrJ9SqURvb++8pH6qJAAIIcRZ0lqTTqfndfpnGIakUik6Ozvp
      6OiYt/cBCQBCCHHWstnsvJ7+pbVmamoKy7Lo6emZl/eYSQKAEEKcBWMMyWRyXqd/FgoFisUi
      fX1985r6qZIAIIQQZyGKInK5XENX4s6ktSafz5NIJOjs7FyQaaYSAIQQ4iwUi8V5m/5ZHfid
      y/m+9ZAAIIQQZzCzgp4P1YHfjo4OYrHYvLzHyUgAEEKIM6jO/5+va1e3lm5vb1/QIyabHgCq
      Ays7d+6sfcBaaw4cOMDRo0cxxgCV/NuBAwcYHR3FGIPWuvZ8YwxTU1NNuwchxPlNa00qlWp4
      5VztWeTz+drA70JqegB4//33eeWVVygWi+zatQtjDC+++CJ79uzhjTfe4I9//CPGGJ577jn2
      7t3Lr3/9a9577z3K5TI///nPMcZw8OBBfvGLXzT7VoQQ5ynf9/E8r+EBIIoi0uk08Xh8wQZ+
      Z2rqiWBaa959913+7M/+rDayHgQBExMTfO1rXyOKIh555BHWr19PLpfjnnvuwfM8nnjiCa64
      4gqgsi/HSy+9xFe/+tVm3ooQ4jxW3f65kRV0NXOhtWbp0qULerh8VVMDQKlUYmJigieeeALP
      81i/fj2Dg4O11W+2bROPx0mn0wwMDKCUIh6Po7XGGMORI0d4+OGH+dM//dPaZkla6+PO6Yyi
      iFKp1JT7E0KcH8bHx1FKEYZhw65ZKpUoFAp0d3djWVZDr3226g4AYRjy85//nE996lP827/9
      G2EY8rd/+7ezOrBAKcWKFSu4//77Mcbwgx/8gCuvvPK4kXZjDK7rnvDhKKVYtmwZq1evZteu
      Xaxevbr2+Mw8mu/7C55XE0KcP0qlEmEYNnT+f3Wnz7a2tgWd9vlhdd/RkSNH2L9/Pzt37sRx
      HJYvX87WrVu55ZZbzvoaiUQC3/fJ5/N0dXXhOA6xWIx8Po/v+xQKBQD6+/sZHx/H87zaVCkA
      13W56aabeOqpp9i+fTsbN2486QfZrA9XCHHuKxQKBEHQ0BXA2WyWKIpYsmRJU1I/VXUHgEQi
      wdGjR3nqqae45557aoFgNpRSfPKTn+SZZ57Btm02bNhALBbj4x//OI8++igAd911F47jcMst
      t/DYY4+hlGLz5s1YlsUFF1yAZVncfffdPP3006xduxbXdeu9JSGEOE6jp38aYygWi+RyOfr6
      +ojH4w27dj2Uqc6znCVjDK+++irpdJp77rmHX/ziF9x+++10dnbO+lpaa6IownEclFIYY4ii
      CMuyjouOYRie8NiZeJ7X9A9ZCHFuCsOQ7du3k8vlGtIDCIKgNp6wbNmyBTlW8nTmlNTq6ekh
      CAJ++ctfYtt23YMYH67UlVIn7U3M1x4cQghxMkEQkMvlGpKmMcaQyWTwfZ/ly5c3vfKHOawD
      OHjwIP/xH/9BMplkcnKSycnJpoxiCyHEfCkUCkRR1JBxxHK5TC6Xo6enZ9FkJepuUre3t7N2
      7VoefPBBGWQVQpyXJicn59z6N8bU9vqJx+N0d3cvmjqz7gAQj8fZvn07//zP/1z7gL72ta+x
      YsWKhhVOCCGaJQxDMplMQ1LPmUwGz/NYvnz5okplz6kH8J3vfAdjDMYYlFL09/c3smxCCNE0
      xWKRIAjm1AMwxuD7PtlsdlGlfqrqDgCO45DJZHjyyScJw5DNmzezdu3aRpZNCCGaorpDZ52T
      JGuiKCKZTNLW1kZPT8+iSf1U1R0AxsbGeOSRR/i7v/s7XNfle9/7HkuXLmVwcLCR5RNCiAWn
      taZQKMypwq6uIViMqZ+quvs2yWSSSy+9lFWrVrFixQoGBwcZGxtrZNmEEKIpgiAgm83O6RrV
      nQt6enpmtUXOQqp7IVgYhnz3u9/F931c16VQKPDd7363roVg80kWggkhZiuTyfDuu+/WFqfO
      VhRFjI+PE4Yhy5YtW7T7kdUdAKByk4cOHSKKIlatWrUot2GQACCEmK3h4WEOHTpUV51mjCGV
      SpHJZFi2bBmJRGLR5f6r6kpK/c///A933303P/zhD49b/PXVr36Viy66qGGFE0KIZpiamqp7
      pW511k9HR8eirvyhzgBwyy230NPTw1133XXcKHlvb2/DCiaEEM1QLpcpl8t1p34mJydxHKep
      2zyfrboGgTdu3Ijv+xw8eJCNGzeyceNG8vk8o6OjjS6fEEIsqEwmU9f2DzNn/fT29i7KWT8f
      VlcAKBaL7Nu3j7feeotDhw5x6NAhXnvtNZLJZKPLJ4QQC6a6YVs9i788zyOdTtPZ2UlHR8ei
      b/1DnSmg4eFhHn30UQ4cOMB///d/A3DxxRezadOmhhZOCCEWUhAEFIvFWb9Oa00qlcK2bXp7
      e8+Jyh/mMAuoUCgwNDTEtdde2+gyNZTMAhJCnK1cLsd7772HUuqsK3FjDNlsllQqxcDAAJ2d
      nedMAJjTiWBbtmzh4YcfxrIsfN/nH/7hH2pn8wohxLkmn88TRdGspn9WUz/t7e3nVOUPczwT
      +MiRI9x4441cc801/PrXv160ix2EEOJspFKpWVXg1T2DgHMq9VNV91YQSil6enq4+OKLmZqa
      YsmSJezatauRZRNCiAUTRRHpdPqs5/9XZ/2USiX6+/sX5ULYM6k7AKxYsYINGzbwkY98hF/+
      8pe89dZbMggshDhnzfb0ryAISKfTJBKJc2bWz4fNaSuIYrFIoVCo/dzb27vooqAMAgshzsaB
      AwcYGRk5qx6AMYaxsTE8z2PFihXnxJz/k6m71OPj4/zN3/wNF198cS3yfetb32LVqlUNK5wQ
      QiyEKIrI5/NnPf+/UChQKpXo6+tbFIe716vuAFAsFrnhhhv4+7//+3Oy6yOEEFXlcvms5v9X
      T/iampqivb19UZ3vW4+6A8DSpUsZHh7mueeeq0XNW265hb6+voYVTgghFkKpVML3/bNqzVe3
      iujr65vzgfHNVncAMMZwxx13HDcGoLVuSKGEEGIhZTIZgNO25o0xFAoF8vk8AwMDi268sx51
      BYCRkRGWLFnCLbfcctxuoF1dXQ0rmBBCLJSpqakztuars37OxQVfp1JXAHj00Uf58pe/zH/+
      538edx7AN7/5TS655JKGFU4IIeab53mUSqXTzuTRWpPJZAiCgKVLl57TA78z1T0N1BjD1NQU
      /f39KKWYmpqiu7t71tOhUqkU4+PjAHR0dLBy5UqCIGDHjh20tbVxxRVXYFkWnuexa9cu2tvb
      ueyyy2qn7lxwwQUYYxgZGWHlypUnXF+mgQohTueDDz5g9+7dp93JoFAoMDY2Rn9//3l17knd
      IxiHDx/m//2//1f7+amnnuL999+f9XXefPNNPvjgA/L5PMViEWMMzz33HKVSif379/Pb3/4W
      YwzPPvss5XKZoaEh3n77bTzP47XXXsMYw65du9iyZUu9tyKEaFHVhuSpGq7GGIIgIJVKkUgk
      zrs0d90BoLoM2vd9wjAkk8lQT2cil8txww03cN1117F27VrCMCSbzXLzzTfzmc98hr1795LP
      5wmCgBtvvJE777yToaGh2uuz2SxvvvkmmzdvrvdWhBAtyvM8isXiKfP51fMBwjCkv7//vEn9
      VNU9C+iSSy5h9erVfOtb38KyLNavX8/g4OCsr6OU4umnn8b3fW699VaWL19Oe3s7AJZlEYvF
      yGaztY2W4vE4WmuMMRw6dIiHH36Y+++/v9Z9i6LouHGJKIoolUr13qYQ4jyWyWQoFAqnDADl
      cplsNkt3dze2bR9Xt5wP5rR++dOf/jQPPPAAWmtyuVxdPYAvfelLQGUe7g9+8AO+/vWv1z5k
      Ywxaa+LxOL7v1x6DSuBYsWIF69atY8uWLaxcuRKlFLZtHxelZQxACHEyxhiSySRKqZOmgMIw
      rO31c64c8ThbdaeAhoeHeeyxx2hvb6erq4uXX36Z9957b1bX8H2f4eFhjDEYY7BtG9d1yefz
      lMtlJiYmaocrT0xMUCqVOHLkCN3d3QDYts3VV19NLBbjnXfeqfdWhBAtqjr//8Oqh7wEQUBv
      b+95l/qpqjukua7LxMQEYRhiWRYffPABV1999ayuYVkWBw4c4PXXXwcqPQrLsti8eTOPPfYY
      tm1zzz33YNs2n/zkJ3n88cdxXZe7774b27ZZsWIFSik+85nP8MILLzA4OHheLM4QQsy/mcc4
      flipVCKdTtPX10cikWhC6RbGnKaBPvnkkzz33HMYY/joRz/KN77xjboi5cy0zsyfZz52sued
      DUkBCSFOJpvN8sc//vGE+iGKIj744AMAli1bdl6mfqrmtB10dSaQ1ppYLEZbW9ui2xtDAoAQ
      4mT27dvH0aNHj6vgq72CfD7P0qVLaWtrOy9W/J5K3aHN932+853vcOjQIbq6ukilUvzLv/wL
      a9asaWT5hBCi4aIoIpfLnZCx8DyvNuvnfK/8YY5nAl944YXcdNNNXH311bzxxhtEUdTIsgkh
      xLwoFouUSqXjKvgoipicnCQWi9HT03PeV/4wh1lAHR0dlMtlVqxYwW9/+1symQwjIyONLJsQ
      QjRcdVfPmQ3W6qyfMAzP61k/H1Z3AFi6dCn33nsv1157LQDxeJwbbrihYQUTQoj5UB27nKlU
      KpHJZOjq6qK9vb0lWv9QZwro+eefx3Vdrr32WhzH4aGHHmp0uYQQYl5orUmn07VKfuZ00FZJ
      /VTVFQA2bNjAyy+/zDPPPENHRwc33HADN998M8uWLWuZrpMQ4tzk+z7FYhHXdWupH9/3WbJk
      ScvVX3OeBjoyMsIbb7zBk08+yT/+4z/WUkKLhUwDFULMdPToUfbs2YPrupTLZcbGxujs7GRg
      YKClWv9QZw+gejjC22+/ze9+9zuOHj3KTTfdxIoVKxpdPiGEaJjqOSbVln4qlUIpVdtsstXU
      FQD+93//l9dff52bbrqJ++67j3Xr1rVc10kIce6pbv9sWRbZbBbP81oy9VNVVwqoUCicMyPl
      kgISQlRNTk6ya9cugiBgbGyMtrY2LrjggkW3g8FCqasH0NHR0ehyCCHEvKoO+FYXfAEMDAy0
      bOUPc1gHkMvleOGFFzh69Ghd5wAIIcRCiqKIQqFAoVCgXC7T19fXsqmfqrq3gojFYniex3/9
      13+Rz+dZvXo1Dz74IP39/Y0snxBCNEQQBExMTNQWfEkmY44B4Pbbb2f58uW8/fbb7Nq1i2w2
      KwFACLEoFYvFWuqnt7e3pVM/VXUHgGQyyTe/+U0+8YlPcPfdd/NXf/VXtXN5hRBiMTHGMDw8
      XJv1IwdHVdS9ECyKInbt2sW2bds4fPgwYRjyjW98g2XLljW6jHMis4CEEOl0mtdeew2ACy64
      oOVz/1VzOurGGEO5XGZycpJcLlc7uF0IIRYL3/fZuXMn5XKZ5cuXS+pnhroDQCaT4YUXXuDa
      a6/lM5/5DEuXLpUPVgix6IyMjDA8PExfX5+kqT+k7hq7v7+fBx54gJGRESYmJnjzzTcplUqN
      LJsQQtTNGEM+n2f79u24riuzfk6i7gAwMTHBv/7rvxKPx9m7dy/79+9nz549jSybEELULQxD
      tm3bVhv4lQzFier+RMbGxti4cSPXXXcdSqnaIgshhGg2Ywyjo6McPHiQVatWoZQ6J7auWWh1
      B4B169Zx6NAhvve97/HUU0+xZcsWrrrqqkaWTQgh6lIsFtm6dSsXXXRRbW2SBIATNeQ8gHK5
      zOrVq3GcOU0qmhcyDVSI1hJFEe+++y4HDx7ktttuY3R0lFwuJ1M/T6KuGvuZZ55h69atJzz+
      jW98g5UrV865UEIIUa/Dhw+zd+9err32Wnp6eti7d6/k/0+hrgBw8803s3HjRqAyx/bll1/m
      17/+NVrrhhZOCCFmw/d9tm3bxsDAAKtWrSKbzaK1ltb/KdQVFpcsWcKKFSvYuXMn3/ve9xgY
      GOD73/8+F198cd0FyeVyBEEAVFJLk5OTZLPZ2k6jxhiSySTZbLb2s+d5tT/LFFQhWlsYhrz3
      3ntEUcSmTZtwXbd24pc4uboCwBtvvMG3v/1tstks//RP/8SXv/xlOjs76y7E2NgY//7v/87w
      8DDGGF5//XVee+01nnrqKXbt2gXAq6++yuuvv85TTz3F0NAQpVKJF198sfb6n/3sZ3W/vxDi
      3GaMYWxsjAMHDnDFFVcwMDBAEAQUi8VmF21RqysFtHXrVtLpNK+//jqvv/567fFvf/vbrFmz
      ZlbXCsOQV199leuvvx6tNVEUsW/fPr7+9a8TBAGPPvooa9as4ciRIzz00EMUCgWeffZZVq5c
      SRAEeJ7H888/z3333VfPrQghzgO+77N161Z6e3u54oorsCwLz/MoFArSAziNuoVHzUEAACAA
      SURBVALAX//1X/OXf/mXJzxezw57W7Zs4YorriCKIqCyZ3dnZydKKWKxGLFYjFQqVVvI0dnZ
      WUsVTUxM8MQTT3DjjTfS09MDVA6sD8Owdn2tdS1VJIQ4/2it2bVrF6VSicHBwdq/+Ww2i+/7
      i3J24mJR1yfTqK1UU6kUW7duZfPmzezYsYMgCFi+fPlxJ4wZY7As66QDzIlEgt7e3tq4AFTm
      +s78C9day38AQpzHjh49yv79+1m3bh0XXXRRrcWfzWaxLEtmAJ1G02vGwcFBjhw5QjKZpFQq
      obUmn88TRRHlchmtNX19fSSTScIwJJvN0tbWBkBnZyef/exn+fGPf8yKFStOuuJPKSUzAIQ4
      T3mex/bt22lvb2fDhg21xp7Wmkwmg+M4kgI6jaYGgL6+Pm699Vag0prv7u6mp6eHa6+9lh/+
      8IcEQcCdd95JLBZjw4YN/PjHP8b3fT71qU+hlCKRSGDbNp///Od5/PHH+cpXviIHPQjRIrTW
      7Nmzh0KhwM0333xcT79QKBAEgfT+z2BOK4HnizEG3/exLOu4Cr1cLuM4zqz+UmUlsBDnn+pe
      P7/73e+4/PLL2bhx43E9/YMHD3Lo0CEJAGewKD8dpdRJK+1q6kcI0dqqh7zE43HWrl17XOUf
      RRH5fF5y/2dBPiEhxDnFGMPQ0BBTU1Ncd911JzQMPc+jWCxK7v8sSAAQQpxTJicn2bdvH2vW
      rGHJkiUn/L5cLlMul5tQsnOPBAAhxDmjVCrx7rvvEo/HGRwcPOkMv0wm04SSnZskAAghzhkH
      Dx5kcnKSq666ing8ftI0T3X/H0kBnZkEACHEolfdDHLHjh1cfvnlLF++/KTPC4JABoBnQT4l
      IcSi53keO3bsqM36OdX0zkwmgzFGWv9nSQKAEGJRM8YwPDzM6OgomzZtoqOj45TPSyaTsvJ/
      FiQACCEWtUwmw86dO1m9ejXLly8/Zeu+uv2zpH/OnnxSQohFy/M8tm3bRjweZ8OGDadt3ReL
      Rdn5d5YkAAghFq3h4WFGRkYYHByku7v7lK1/YwyFQuG4reDFmS3KrSCEEK2tWqFv376diy++
      +JSzfmaqbgsvA8BnT3oAQohFJwiC2oKvjRs3nnFTN601U1NTkv+fJfm0hBCLijGGI0eOcOTI
      Ea688kq6u7vP+JpSqUQQBBIAZkk+LSHEolIoFHjnnXeOO+TpTCYmJqTyr4N8YkKIRSOKIrZv
      347jOGzYsOGsKn+tNdlsVvb+r4MEACHEomCM4cCBAxw8eJBNmzbR399/VgGgWCxSKpVk8LcO
      EgCEEItCqVRix44dLFmyhEsuueSsK3SZ/lk/CQBCiKYLw5D33nsPgKuvvvqst3PQWpPL5eaz
      aOc1CQBCiKYyxjAyMsKRI0dYt24dvb29Z/1arbXs/z8HEgCEEE2Vz+fZtm0bAwMDXHbZZbOa
      zROGoWz/PAfyqQkhmkZrza5du/B9n8HBwVnP5Km2/mUAuD4SAIQQTVFN/Rw+fJj169fT398/
      69dPTk7K9s9zIAFACNEUhUKBbdu20dvby+WXXz7rNE719C8JAPWTACCEWHBaa4aGhigWiwwO
      DuK67qyvkc/nZfrnHEkAEEIsKGMMo6Oj7N+/nw0bNjAwMFDXNXK5HFrreShh65AAIIRYUMVi
      kZ07d9LT08Oll15a1wwerTWFQmEeStdamhoAjDGEYcjhw4cZHR3FGFN7fGRkhGQyWXtMa83I
      yAiTk5MYY9BaUyqVas+XxSBCLH7GGHbu3EkqleK6666jra2trusEQUA6nZbpn3PU1N2TtNb8
      7Gc/Y2BgoLafx3333cdLL71EEARkMhk2btzINddcwwsvvABAOp3m6quv5tJLL+X555/n/vvv
      58iRI7z++us8+OCDzbwdIcQZJJNJhoeHueKKK2a14OvDyuUyQRAQi8UaWLrW09QAYFkW9913
      H0opPM/j0UcfJQxDRkdH+drXvobWmkceeYS1a9eSSqX4yle+Qrlc5ic/+QmXXnopUNk/5MUX
      X+Shhx5q5q0IIc6gus1zX18f69evn1PrPZlMytz/BmhqAFBKkU6n+eUvf8nRo0e5++67CYKA
      zs5OlFLYtk08HiedTjMwMIBSira2NqIoAuDo0aM88sgj/Mmf/AmJRAKo9CqCIKi9RxRFlMvl
      ptyfEOKYoaEhUqkUt9xyC0DdB7hX5/8rpWQW0Bw1fQPtrq4uPvaxj7F//35+//vfc++999Yq
      eKj8ZTuOc9xjVQMDA6xcuZLh4WEuv/xyoBJUZnYLPc8jHo/P/40IIU6qWmEPDQ2xfv16VqxY
      MafWfz6fJ4oimf/fAE0NAGEYUi6XWbJkCQMDA2zbtg3Lssjn8wRBQLFYxBhDX18fExMT+L5P
      Op2mvb0dgHg8zsc+9jF+8pOfsHv3btatW3dCt1ApJV1FIZqoXC6zbds2+vr6uPzyy+dccVen
      f0oAmLumBgDf93n++ecxxhBFERs2bMB1XW677TZ+9KMfYYzhs5/9LK7rcv311/PYY4+htWbz
      5s1YlkVvby+WZXHPPffw05/+lEsvvbSuBSVCiPlhjGHPnj2Mj49zxx131Bpv9apu/yyNusZQ
      pjrPskmMMbXDnKsbQVWnh1qWdVyUrz5vNpFfUkBCNM/U1BQvv/wyl156KR/5yEfmXHF7nsf2
      7dsplUoyBbQBmj4G8OGcffWxk7XkpXUvxLnBGIPnebz33nv09PSwbt26hlzX930KhYKkfxpE
      QqgQouGMMezbt4/x8XE2bdpEV1dXQ9I22WwWY4ykgBpEAoAQouGy2Sy7du1i1apVLFu2rCHX
      NMYwNTUlqZ8Gkk9SCNFQnuexdetWOjo6uPLKKxtWYYdhSC6Xk/RPA0kAEEI0jNaagwcPkkwm
      2bBhA52dnQ27tuz+2XhNHwQWQpw/0uk077//PpdccgmrVq1q2HWr6R/J/TeW9ACEEA0RRRHb
      t28nHo+zdu3ahl47DEOKxWJDrykkAAghGkBrXVvwNTg4SE9PT0Ov73kehUJBegANJgFACDFn
      uVyOoaEhLrzwQlauXNnwirpUKh23yaNoDAkAQog5CcOQ9957D6UUg4OD8zJLJ5VKAUgPoMEk
      AAgh6maM4dChQ4yNjTV81s/M95iampLpn/NAAoAQom7pdJodO3awfPlyVq9ePS+LtIrFYm0f
      MNFY8okKIeqitWbHjh2EYchVV11V28yx0arpH9F4EgCEELNWTf2Mjo5y5ZVX0tXVNS/vo7Um
      m81K63+eyKcqhJi10dFRtmzZwrp167j88svnrYJOpVKk02kZ/J0nEgCEELPi+z7vvPMOnZ2d
      rFu3bt4q/1KpxN69e2X3z3kkAUAIcdaqC77K5TIbN26clzM6qodEHThwoHYwlJgf8skKIc6K
      MYbR0VF27tzJunXrWLFixby1zIeHh2Xr5wUgn64Q4qxorWt7/VxxxRXzVvknk0k++OADqfwX
      gHzCQogzqk75zGazXH/99Scc49oIxhhSqRT79+/Htm3J+y8ACQBCiNMyxjA5Ocm+fftYs2YN
      S5YsmZfKOYoi9u/fTxiGUvkvEAkAQojT8n2fd999F9d1GRwcnJcFX2EYMjQ0RKlUksp/AUkA
      EEKckjGGAwcOMDU1xeDg4LykfrTWjI6Okk6nJfWzwCQACCFOyhjDxMQEu3fv5rLLLuOiiy6a
      l/dJpVIcPHhwXq4tTk8CgBDipIIgYOfOndi2zYYNG+Yl9ZPP59m7dy+WZUnLvwkkAAghTlBN
      /YyNjbFp0yba29sb/h6e59UWe0nl3xxNDwCe57F3717ee+89SqUSUBkQev/999mzZw9aa6Ay
      ELVt2zb27duH1pooipicnAQq/7EePXq0afcgxPkmlUqxc+dO1qxZw/Lly+flPQ4ePEgmk5H5
      /k3U1E9ea83TTz/N6Ogo+XyeJ598EmMMzz33HNlslqGhId566y2MMTz77LNks1l27NjBli1b
      8DyPV199FWMMQ0ND/P73v2/mrQhx3vA8jx07dmDbNuvXr2/4dg/VFcUTExNS+TdZUz99pRT3
      3nsvH/vYx7j++uvxfZ8wDMlkMtx2221s3ryZoaEhCoUCnudxyy238OlPf5rdu3fXrpHL5Xj9
      9de56667mngnQpw/Dh48yMjICJs2bZqXbZ6rg75KqfMz9WPADsEOAN3swpze/JzgcJaUUriu
      SyqV4plnnuGmm27C9/1avtGyLGKxGJlMhr6+PpRSxONxtNa1/cgffvhh7rvvvtr0tCiKCMOw
      9h5RFNVSS0KI08vlcuzcuZPly5fT19fX8H871fn+vu+f85W/MpXvdqRwIkXMr3zZkULpyu8j
      B/yYodQWEbgGo8AsottuagAAGBkZ4dlnn+WLX/wiS5cuxfO8WgVujEFrTSwWIwiC2mNQCR4r
      Vqxg7dq1/PGPf2TlypUopbBt+7izQz3PIx6PL/yNCXGO8TyP3bt34zgO11xzDd3d3Q29fhAE
      7N27lyiK5mUX0XlhQGmw9HSrXivsoPJn11e4ISitqk/FWKAV+IAxEA8h7kN3zsYo8OOGIG4I
      YhC6htCpvKZZmhoAtNa8+OKLPPjgg7X/2FzXJZ/P43ke2WwW27bp7+9nfHyccrlMMpmsdUtt
      2+aaa67h6NGjbN26lWuvvbaZtyPEOe3o0aOMjIxwww03zEvqZ2RkhGw2u7hb/tPpGzcA11M4
      fqXSt6aDQKXVf6z8Rhk8GwoGclqRCRUlIDCVgNCmoEfBUlvTpaj1EgC0BZFjCFxDOWHw2xY+
      GChTbVI3Qblc5oknnqi12GOxGF/84hc5cuQIr7zyCrZtc88999Db28v+/fv5zW9+g+M43H33
      3bS1tbFlyxZuvfVWoijiueeeY/PmzSe0LKQHIMQxoe8Reh4oBUpVqjKlKJbK/PK111i2ZAkf
      ue5aHMcFxXRlrab/p6brvmO5ezV9ndqfT8IYQzKZZNeuXc1d6Ttd1VlaYUVgRZX0jR1CLADH
      VziBolJ1q0q6xjIEKEIDHuAbRdFAUUPGKPIGQgNm+rN0MNMDq8fuMQQiU3m834J+y9BtQbsy
      tClwjMGaHivw41BOGIKYIXIqKaT5DApNDQCnYoypnQI08z8WrfWsB44kAAgBOgpJDh8geegA
      5XweZanpCl2BZTHuhaRyOS7uaqerPYFS07VO7d+bqtTzM4LGcYGBY8FAKYWaXtilLIswDDk6
      OkoY6do1oPK72jWUAmWhLDUjOFXKdmKQmQ5EasY9HBeYjl1TGYUdKmKhwvEtnEhh6Uqe3jKV
      L6brfKNAK0PZKAoGskaR1+AZhU+l8g8xmOr9UplFU3v7MzAGospbYQFxZUgo6FKGCyxDjwWu
      qV7LENkQOpVUUbm9kjZqWDAwYEeLNAA0kgQA0aq01pRzGdJHRzi6aweBV8auruadUWNlQsO4
      H7Es5tDtnG3jylCrOT/048wqJdKadCpFFIXTgWK6dV17TvWF1Usde+2xqna68V6r59XMp6FQ
      ldSMqaRoLFPJy1db1crMKJ6CCJtI2YTKIlAOvh2nbCco2wk8K17J5aPAGCw0avrVx9qd1cBz
      7Ceq5Zrxs2VZ2HYMy7JR6viez8xaVwMag0LRaxmWWIYey9AGxBXYVMYhUBC4Bq/N4Menewj2
      dFD48F+bqfZwquMXCteHWBliZUXcqw5USwAQ4ryTn5pkYngfU0cO4xXyOK473eI+XmgMB0sh
      bZZiedzGamB6xhhDNpulXC43Ju0zXcFXB2WrM21q383xTXGDIVI2vuVStmKUrDi+cgmVg285
      BMpBz3iBhUGZeuZtnliFVh9RBizbwbZcHCeGY8dP+vdQfU00I1gllKFTGToVXGBXegqOqQQK
      DGjbELgQuZXvUKnwXQ+cQOEEM75HitCeHoB2IYhD0ZYAIMR5wRhDFATkJ5OM7xsiNXoUjK6k
      Yk5R4WhjGPc1pciwPG4Tt06dx6+nPIVCgUKhcKyFXPtl5Zs62c/VP89o0SsqrVnrQ3WzQWGU
      IsJCK4tQ2QTKoWzFKVpxSlacUNkYpab7EgY1o1dxXBkarvJeBjWjtW9QWNi2i+u2YVnujD2Q
      ZvQOpv9vZh/JNoYYMKBgudL0A7HpcQwrmn5etSNiIFSQj0Mhbii2Qd6BbFQZpM4FimygCLRq
      /jRQIcTcREFA8uABpkYOkx4dAaWwHQelTv3P2xhDPjTkQs2SmEXcPqGaPj1dGaerpXwMlbyG
      rnyFQYifKxKbMeldmZN8NzMr/lpOZbqQM95PVVIloeXgKRfPiuFZMXzl4FsuvnIIlTMzaYSF
      ruTop5M6C8PgqJCY8rCUxhgLgyIyFhE22thEkSaMvOlg4GDbsekvt7I2yhjaNSQMtBtDQkO7
      gbbpx9qMIgTyFhQUFCvDJ2gbykqRMVAA0ihyPhTKCj9SxG1DwjW0u4ZlnZo2x0gAEOJcpLXG
      LxVJHTnE2L49ePlcpeJ33dO24s10JR0BySCiDegCCCKMAaMNGFP7jgYiPeNng9GVSvW43EE1
      GCjQGvwgwDbWdL1eHdasVsWVVI2ZHj2tPh6pSkvecKxVr7EILJui1YZvuZXnYM0cOagWYDpf
      3wyV93ZVQMzysFV07Ffq+OeBhTIKhY0xLsY4xPyILhXRpyL6lUu7qQ2rAxApyCnFhA0ZC1JK
      kQeKBgooytPPtKbjb2ggpuACY1ilDEscTa8DbRgsazpl1B4SOpEEACHONfmpSZIH9zN5+CBe
      oYDtulhn2KrZaIPxQkw5RIeayVglNdJbCtChRldrc6XQ09MaKxWtQk//WSs1XSlPf6+lX9T0
      UGnlexBpQmUw6tjvNBaRql7v+GtUBlxnDCirYwO3VVatNExX/82n0DgqxFU+MStATQ/lzqz1
      lYE4Nglc4samHZc249CBS7txSOBiK0WZkBIheeMzriClXHKWS8p2ySuFZyprC0LAGIWLwVGV
      hVwd099jymCrY8EgrgxxE6CCMqEuUw7LEJaJAo/AL+LrsowBCLHYGWPQUUQpm+bozu1kx8cI
      Ax9lWafdTK3a2jflkKgQEEZQVDEKjkUpromiBCpwaq3tqNaGrmSvq+mUaq69koKvPsaxGnpG
      K1fr6d7CaZvi5oRfN6flPlvT6wjQuJZPXHnYSmNRmW5qoXCx6TAxuojRZWJ0GBcbhY1VeR4W
      HpqsCsipgEk0GcuigENeuZSURWULIVVbUeDik8AnriLiSmErF4WNwsIy1cHrCOXnsYIiys9h
      hUXwcxD5KKOx0VgmwphKsHfcBG2xdgkAQixmgeeRGjnM1OGDTB09jGXZlamcpxusNQbtR5WK
      vxiSNzEyTjuTVieeZdHtToFRZIN+gFqVf3zbdXaMoVK5nLHyPzcpImIqpF1puq2IuLGJmxiJ
      6Qq/w7i04+Ji4xNRIqSoNHmlyGFIK0NGGVIKSjj4yiVQLhiDQ4hDhENIzATE8Ikbn5jxiUVF
      lI4gDFA6wDIhdvXnwMOEISr0IApQto2xHIzThrHjGDuBdtoxbgfaSWDcdrTbgW+3obFxlMwC
      EmJRqf5zNDpibN9eJob3UcqkMcZgnWYVbe115RBdDAh8Q1a18YHdQ9lyibBQGBJ2nphTohj0
      EOnGne9rjCGMKrnvRb3VwxmoGV8uih4sBlB0K4sebFwUrrGxsXCwCdDklE+akKQFaWWTxyav
      HMqqsnq40rOyAUOcSsUexyNufBwTYhNhRx5OWMIOSlhBGSsoQxSidDg99hJVpqgaDZaFcdrQ
      TgzjxCGWQLltYMdQlsLYDigHY8cwykUTw6gYWrkYXI6FfAkAQiwaWmtKmTSTh4YZ27eHwCvh
      uLFTTuOE6Yo/0GgvJChG5CKXjNPOhN1FgE2l6gcwOJZHws3hhe34UTuNaqobY4j0It/3+CRi
      KNqwiKNIYNGBRTd27asNRYCmpDRFDEUUBWWYUhFTyjCpFEXl4BMjUha20djTrXnbRLjGIxEV
      ieky8aiAG3lYUYCKKq13Ffmo0EMFPqDBmm7B2w5YTuXPbqxSkbttGNutVPiWdWxgfcaCOqXs
      6WmlNset3kYfv/JMWZWggCsBQIjFoJhJc3TnNjJjowTlEsp2zrjtifYjdN4n9DXjpoOU00nR
      iqOp5IVnhg2Fpt1NA1AIemnUUSCVHXunp4Qu4oa/DXRh0zNdufdg04ZVCwBxLCIMeTwmrYik
      UmSwySubnFIUFZRR06uILWw0ce0RI6DNlIiFRdyggBuWsIMiblDE0kGl5a7D6e8RaF2pyN1K
      69041e9urdJnOpWDsk6f6pvhw9V45b8de3oV8ofPW56eFmukByBEUxhjCH2P7PgYH+zdTeaD
      USzbPnOaJzJoL8QraPKhQ9LpJG13oJXCMTOHaY97JXEnT8wuU/R7iUzjtmKOtK7s0TVja4Rm
      cFHEUcSmK/N2rFpl34tDAosQQxFDmcp8+QKGMWWYsDQZZSgrG4/KZ2MRYesQR/u4UZmYLtMW
      FYhHJdqCDE5YqrTiQw8VhaAUxrIrrXg1/d2ezse7sRkVfaxSsZ9MAxfhfZhlVXoHtlLE8GnD
      I4Yn00CFWGhRGJIc3sf48D6KU1MYY3BisdPP3w8rrf2yrxjXHaTtdkrxSg7fwmCfph1nWwEx
      q4wfJYhM4/7Ja11ZL7DQOX8b6Jiu3Lum0zYJLBLTLfq26fz2FJoJBQeVIa8MeaXIoihMt+ZD
      ZaEUuNonHhXoCPMMeBliQR4nKuNGPo4u44TlSiWvo+n8e7zSio8l0O3dlRRNNXVjT7fiLae2
      qd1CO/b3URlg7iJHt8nSo7P0qAIJVaadEm2UpAcgxELQUUQ5n2Py8EHG9g0RlEvTG7OdOs1j
      Qo0JIkpFQ963GXe6yag2LMCaXk57pupFEZGIZcBAsYGpH20MOqruttaQS9bYQAwLd7pFn5hu
      zVe/OrAJqQywBkCgFAVgRGmSCtJKUVI2oVJgosrsmcjH1h6u9mmL8rT7Gdq8NLFyqjIkOmMn
      U5SFsewZaZr4sXSNZR+r1Gdu4dCkgW+FJkaAi08cnzbK9Kk0PSpLH2k6KFYW003PNfKIkzVd
      TNFLxnRLABBivhUzaY7u2k52bBSvWKylek7KGExk0KWArGczFSVIWwnKlktl/ejsBlsrqZ/G
      zvoxVI5arW7ZPhcW0I5FJzadWHRh0z6dwklg0Y6NASbQpBRklaI03ZJPKcgrKE0vVLO1Rywo
      0uZniIV54mERJ/JwoxKxoIAblVCWhXHcSirGjqGruXfbrbTebXe6BW83rVI/HYeATgp0qRzd
      5OikQIcq0E6JTvI4RBRoJ0cnWdNNnk4KtFMw7RRop1xZD1y7ngQAIRqsmt8vplOVhVsTY8CH
      Wpkffo026EBTLhmyns241UVBxUEdW/k6u+rIYKuAdjeDHyXwoo5ZX+FU96a1QRt9VpW/RSU/
      b6Nwp2fd9GDRjUPPdKWvUYRUFpppZZHFcFgZphRklIWnLAITYUyIMSFKR9jao83P0RZkiQc5
      4mEBW1eOkrWUQVk2uA5qurLXThvY7vT2E9aM9ExzW/AfptA4hLjTbfaEKtNDpTXfqzJ0Upge
      wq18bgEuGbrJmB4mTR95OghwK4PVleVfnO7vXQKAEA0UeB5TRw6RPLif3MR4ZSdHxzl1mifS
      RKWITOCQDOJkVQLPcqdn8Zy4YvZsKSISbhaFoRj0YDhFj2MWjDGV1M8pBn0V1KZTdkxX7tXW
      fQKrVtknlSENFJSipCxSCqYw5BWUlYUxmlhYwA2LxIN8pQUfFnF0gKNDbBNiKdBWDG3FiOwY
      2o6B7WI74DgK24qo7sa5mKcnKXSt9d6l8nSTo0vl6CJPO0XiKqBgEuToJG86Ki1600Geyp9L
      H2rRz/r9JQAIMTdaRwSlciW/v3cXfqkEUDsV6zimsolaFBn8kmbKjzFOZ2X2iapuNTBXhphd
      JO4UKfo9RKZBC76MgUhXtjZQlVk31SmVvTh0zNh7U6EwyiIFHFGGlNJklY2vbHwTEhlNZCrn
      Y7lRibifoy2ofDk6BNtBWy7YLlq5aCeOUTZGWTD93UwP4tpExCyPmBVwwhaiTVUpi01lfYBN
      RIyALvL0qxQ9KkMPWRzC2tKsEHs6R99Hlm4yppug1h9wiCrHwzSshBIAhKiT1ppiaorkwf0k
      Dw3jl4qnXbhltCEoa9KBy5QXI2W11+aUN/LYV0sFdMTS+FEbXthJvRVG3KjpXLyi3Vi0GUXX
      dOu+w/z/9s7syZLiOuO/rOXuW3fPAoKB0TLsMxJghAGJHYFMaEVLWHZIEfoH/KAHh8MvevOj
      /W6HFLYsg8QiZiQhCyEkEGKxQEJIiG1gZpitp7vvfm/tmemHqlt9b3fP3j1rfTE9tdyqrKys
      qnNOnjz5HQNfS9pIhkLgGTausJgTkiaKoRD4wsLUIXbkYMsAU4eYWmGrIAmvjGfCasNCmnmU
      mUeahWOKfzeJsI0QWwRYImK1VOfJQqAo4lLGoSwcKgwo41ATvdhfz5BQ5BjoMk7imx9QSXz2
      VQaUOZUcnZkCyJDhODBKvOL2u6l/X4ZhPAPTmHQ3jD4tpQWeo2gGeeZ0mVCb6MS3v9o2qkBS
      sPsYQuIEjcO7fnQsLuO/ODFIDZOqFlS1QVkbie/eQKmIofJZQLJgGAzNHI5ViuPptSQkpnIW
      qMQf72KrABOFECYYdkJtFg9gx5a8eVwTnUak0aaIyBs+loiSvkZ816cOozwD8dIipE6fhujQ
      oENNDMgRYCUWv4FmSImmnqZHjbau41EgwE4se/ukXDgni0wBZMhwDNBaM2w36c0dYm7Xuzjt
      FoZpYtorT6rSSuOH0PZztAOLFmUQMJmEcPWRN4fkrSFOWCdSi+99TguKySBsQQvyWlGQIXkl
      sZVCY+IaJkM0PRRtFB1hMLDy+FYJKezEgpeYiciyVEAucmPfPDqhMrBXeUBVp9Z+TgSYQp5S
      v35s0XsUcCnjUhIONXpUxYAGXcrCIdA2LkUcSjgU6es4AqdHlR7VVXfb4IJUgwAAIABJREFU
      rCYyBZAhw2EwomEeNOeZ3fkWg/k5wiCII3OM5TN2tdZowPUEB/0iHZkj0HE44VpY+4sXjhem
      kJRzLZTMYYd1qphUFdjSR0cuMnKIpMcQA9cqMLDKDK0iQ9MmQBAYJtLIoQwLS4XYOhbshlZY
      WsaDr3rE/H9kmoqTuhFIE6zkDQ8h9Ji1D6snTBfLFEkPYzRxakp0aRDH0xfwsQnJE2AS0ddV
      utRo06BHDUcX8cnjkyMgd8YPPI8jUwAZMiyBkpJhu0X30AHmd72L0+1g2bnDJl1RGrzQoBva
      HPJyDHQBIXTsAlmD+tlaYUuJpaJ4kpOKKMmIsvIQShMqGBAxQDEQJp5dxcvV8OwagV1OWOk1
      plaJG0NiqwgLhZ1sGyTurjWa7DWJkXtHYhFiGyGWiNJfVlPgCzR5/MSq9ymLIVUGqbCvMiDE
      wk2O8HQ+DrOkRltP0adySn30a41MAWTIkEBrTefAPg699w6D5jyh5x9x0pbWMAgMDnhF+lGO
      QBtp3P6qiCylMFVAKfTIRR5G5CAjFyE9bBWhhYlvlnCsAgOrhGeVCKwS0sgRmgWkmUcLAxuJ
      rSU2EktLLBSG1sng8/JE6aN7k0qyQu7FVYROI3hsESFE7DNfPaEfl1+jT4MuDdGlJnoj0U4B
      H0uEDHWZto6t+Q41XF3CJZ8ckT+tPvq1RqYAMpy30Fqjogin26G1/33m3ttJ6DqYY5E8424O
      rSFSMFQWg9Bm1ivgaivJthSzYR5VbGmN0DHPu1ARhhqtB5ihgxV55CMPIQMCLYkMG2nmCQ0b
      367i2TXcXAMvV0cadtrTsEQEWmBpjYUkp2QSNLi8F3K0Ouok1l+twkzfJSXHE52EjBOnGz5G
      mkbxWGs3CYGKOfbxKSR/DdGhIXpM0aKCQ4RFgI1PHk/n48HYhAqhQz310Y87hM4XZAogw3mJ
      KAzoHNjP3HvvMOy0iXwfw4rpc5dCA8PQYD4s0g8thlE8lCvQCVHBCtAaoSLMxGI3Iw8j8jCk
      hyEDDBUikiVaIa0SYX4a364ytIp4Rp7QKiGtIqFZJDLsWNAjsbVKEonE22Wrhy1CgrCM1ic/
      4CiPKa3j8UDHAl/ECdNNceKTtEwiagyoiR51elTpUxIuRVxKuNgiZKAr9KjS0TX6uoJDGZcC
      TmL7n8sW/fEiUwAZzhtEgY/T7dA5sJ/Zd98iCgIsazFqZWTtaiBUBq406YYWc34BX5kIrTGQ
      sdWuY553oSVChomAdzAjFyPJ7GSiMISJFjbSsJHCIBQGOlcnKqzHtWv0rRJDw0KnFBFxEg8D
      RU7HLpuclolfPiYBGIlMgSZnuuStAW5YS6J+Tlxqa0YD3yfr949DJE0hsUVIzvDHBP4IKxUe
      u6NswmQ4NaSIS030mRZtGsRUCAqDKAm0DLHp6DpdarT0FH2qhLGTayyN/EndzDmN064AtNYs
      LCzgeR6bNm0CYqH98ssvUywW+ehHP4ppmriuyx/+8AfK5TLXXHMNWmsOHTrERRddhNaanTt3
      smXLlmXlZwogQ+h5NPfupn1gXxK3H2HZ9rIJW0pDT9q0wzz9wMD1Ioj8OMlHYsULFWAkmZ0M
      6cfbSpEz8uStEsKuEFhlhlYBx8jhWiUiq0RolfDNHEMRM1laY/740dJEYWqVhIoefRxBEFHJ
      dYi0jRvWOFkhN8rsdaIkbyKJ3LGTcE1TSBZdKyuXZxJRYUAtoUIYWfRlBpRwyYuAoS7R11X6
      yYSpAWUcXWJIGY98km4xw4ngtCuAZ555hvfee49169bxmc98Bq01Dz/8MFdeeSXtdhspJbff
      fjs/+MEPuOaaa5ibmyOXy3HdddfxxBNP8MADD/DHP/6R2dlZ7rvvvmXlZwrg/ENMxhbg9jos
      7NlFc+8eZBgiRJIZT2u0Uiit0FIRhhEdJ8JxQ1TgQujFAh4dT5ISBhYipiAwchhWhZxVxrRr
      eHaFvlWkY5i0hYVnGDGdsIhtXg2YWpIjwtLxYKw5YZueqI2qKdo9TBHhhHXUSfL8j/z++pgH
      fUdzb+PxB9sIsEW45BiRkpuNCM7yBOmA7JToUGGQlCZSy36SCqFOmIxmyGRqVWbNrx5OezzT
      tddey9atW3n++ecBiKII3/fZunUrWmu+973v0e/3MQyDq6++mssvv5yHHnqI6667DoBWq8Wr
      r77K3//935/O28hwhsB3hizs3kXrwF5ae/cgwwAAGYbIMEJGQbqMwggVhijDRJgF8maBklmk
      nKuRM4q4dgHXLMQ+eKuIZ5ZwDJOuEPQFDIkjfkY5YC0UBR3FVrxatOpXX1xpbNPDMgK8sILS
      J2cBa81YWsejDhEnMfoxBYNlRGMDuSKx6GPKg6qIaRCqoh8vGWCLEEcXGeoyfV3hEBtiYrOE
      4MyhlPnoTyFOuwKo1Wq02+10OwgCisUiEPtkbdum3+9Tq9XSba3jl3XPnj1897vf5W//9m+x
      khhtKSVRFKXlSSlxE3KuDGcvRpOylIxQ0WgZEbgOTqeN027R2b8Xt9fB7XaQMlr06WtQysAQ
      FlhFIquOmS9TKhepWVWKRh7PyNEVJi3TYo+w6BsGASAFhGgkAApLB9g6Iq8iKjpKwygPG07J
      JD3ZasAQkrw5JJQWvrThOHMELGKsfUbpJCdy+womLf2QguGRE2FKblbAp06PhugwJbpUGCSc
      n3F7KAw6usFBLuB1GgxUBT/uDxFhE53Bs2TPB5x2BbAUtm0ThnFXMp6IIikUCnieB8QEXBAr
      h02bNqW9hwceeCDOeWmamGNx25kL6OyC1prI9/AGfQLHwRv28YcO/qCPN+jj9rq4/S5er4fb
      76GiEMOyMG0b08phWialyhR5o4BtlMlZRZRZpi+q+BTR2kQlCUXmk+xRPRFnljJJrPZRhI1W
      FLSkksyCFSjQikWRvly0r7U/VQAF20Gj8cI8WssTLCWG1olbLHVIxf+NJmYVDJ+a6NMwOpQT
      y74yRm5WwMelmPrl9/OB2FefROI4FFeFijrD2uC0KgCtNUEQEAQBUko8z8O2bTzPo9Pp0O12
      KRaLTE1N0W636XQ6zM3NMT09DYBhGFxxxRUcPHiQF198kZtvvvl03k6GI0DrOLRQSYlWEqUU
      ke/jdNsM222cdpNhp82w3SL0PWQYpla+jGK63EK1RqFao1RtYGJSLFbJlSrYooStC9i6iKHz
      9ESOjjBpaZMOJi6CAE0gIAAiNHYSWWPriLqOQytHlryBSiSjQqfW9dIo8dMx3V9jmyG2EeFG
      BZS2ECdYh1jQa9AkYxIKA0lReGw05llnNJkWbWqin/rwTWIenh5V5vU63tEfokcNn1watxPF
      rEDLrnai9cywtjitg8BRFPHMM88wGAwIgoByucwdd9xBv9/n6aefxrZt7r33XiqVCvv37+e5
      554jn89zzz33YNs2f/7zn7nuuutQSvH0009z2223YS8h58p6AKcQyUBi6HkEzpDAdfCdIYHr
      4g16eL0e/eY8w04Lt9sl9D1yhQK5YplcqUSuWCJfLpOvVCnXp2JhX66Rs0qYkYE/cDmwax/t
      +Q6RUSLUBTxl0RIGPQFNYaT5kkYRNXGsfBJpk8yGHadfTgXhaMhW6zGhPy7sTz8MISnnByhl
      MgxOJMNXPDO2zDCNtCkzjEMsRYcZo01e+Pg6jpl3KODo0mJMPTFd8Vr46DMFcXpw2qOA1hqZ
      Ajg5TLweydhLvKrwh0Ocbodhu4nTbsfLbofQ94h8nygIiHyPKAwwTItSvU5twwVUptdRbkxR
      qDWwCwXsXB4rn8ey8ogAdD8ibLn0uh5zTkgziJh1fLqBxMPAF+AhiJ2CsbC3dUReR9goDC3T
      jFpGMggbe7P1hI9GJ5a+XuKpP5OE/iI0pZyDZYQM/QrysFE/o6DL2AdfwGdatJkRTWZEi6ro
      U8QjJ3wKeAigQ52urtGiQZ8Kni7gk8MjT4jNmdcWKyNTIsePTAFkSDEKnww9N/5zXQLPxR8O
      cHtdhq0mTrJ0e12Uktj5ArliCbtYJFcokiuVKFbrlKamKdUblKemKdbq5MsVUBrlhCg3wvdC
      hm7EoOsx7Pl02y7NfsCC0nSEoCkEUijyQpJL/nQy+9bSEinBUApbJQOxR/j29biFj0brcQv/
      bBAampwZUswNcYMigRxN+Iot+iIeJeEkk6Z6NESXGdFkSnQp4sYUCOTxyeNQpKPjObQt3Vgz
      i/5swNnx7NcWmQI4D6G1RgYBbq/LoLUwIdT94YDQ8wi9WPiHnouKJIVqlfL0DMVancr0DMVa
      g0Klil0okisWF5f5QjzBSmuUL5FtF9nzaTUdmk7IQSdk3ovoexHDUOECroDIEBRFSEkNKIuQ
      qbymaMQW/VBb9KIckYQgjD02MS1xjJWEf+zaUfHYwwqxOGfTx28ISTk3RGtBFFpM0WFatJkS
      bRqiF3PVC2fRotc1WkzTo4LDIrGZR4FA22N9ogzHg7PpnTlWZArgHMEoTDIKfELPI/I9Qt8n
      9NzYem+3cDqJm6bTxnccTNvGLhSw7FzsgsnlKVZrlBpTlKemKU1NU27EFrxhJhNwRpQFWqMD
      hfIjPC/C8yXOwGfQ8ei1XOY6Hs1QsoCgAwhTkM+ZlIs2OSJs6VG3Qiq4WIMFCmqIbZoIO4+v
      TYbKpi3zNIM8SmqsKFom6IUYifWRa2fkohoJ/SXHj/1/psIkikW18CngUhEOG81DzBhN6rpH
      QfsE5PB0bNEPKdHRDVp6ii51BpSwxCg2n8QRttzBleHU4kxVHpkCONuQCHpvOMDptnF7XZxO
      B6/fw+11xwZeHQJnSOj55IpFirU6pXqDYr0Rr9ca2MUi+XKFXLFIrlQmVyhiWNaKNAA6kMiu
      h9v1WGh7tN2QphvR9iK6w4ChHzHQMESgTcFUOcd0Lc/6Wp5GJUe9YGJFLsHcHoTbRTp9It+P
      dYppM9B5ujJHX9q4kYkXCoSOOetHGK9WOmA74cMfF3Nn5gc3CT3GXtllSrSpMqAiBpSEQ4Uh
      Qmh6VGnrKZpqmp6uMdBlXIpxPL0wU94dIUZtkNAvaLGCGsxwunEmvZuZAjgTkAiyKAyJAh8Z
      BkR+gAwD3H4/DpVsNXE6LYbtJm6/jwAMy8awTEzLxjBNcqUypXqDyvQ6So0G5akZivUGVi4X
      Z7AyjMU/IcYmSulYwAcSL5D4ocIdBAw7Lq2my3zXoxlI5jU4WmMaAts2yeVMbMtgqmSzvlFg
      Q6PAhnqBWsnG0BHS9/AHPYYLc7T27ibwXBAGUtgExFZ+J8rTiXJIJRBSIkbzPMbbR4xZ+IzC
      M1ey8M+cDytG7KO3CSngkxMBVdFnijbrRBxmWRQeESaRjoMtXYo09TQd3aDJNMoWhNrCCcto
      BIaQWCLERCaNNBbTD6DH4vkzHAZ62fqicTHaXtKCYpG6I96eJJBGjDMejZc5eczy31k8Ly1D
      j+0cm1yY1kkvZkkTyboAUMl6sp8RRblK9xkTv+lMAZxqaK0JXCex2Ht4/S5uv4fX7+EPh8kE
      qGE6EUoYBoVKlWKtTqFao1iLY+EL5Qr5SpV8KQ6bzJVK5PKFY5jKDzqUhF2fftej2fPp+hFN
      J6Q7DOj2A/q+pK81jhAULIPpao6pWp7pap560aZetKiWczTKNpWijW3GykQpybDVonvoIP3m
      PE6ngz/sAwJt5RiSpxUVGEQWTmQiJYe18kfhmTqZeHW2ROrk8amLHnXi5CN10aOc5JEtCwcD
      RU9Xk4HYGr2EsnigY6IzjwIjDp2i7ZCzAmRogAZDjNpp0oc/+oJP3Yc8LiR1KthG24tLxn4f
      F1R6UcCO/TYhmEbnT5QJQqhUWC4KQJZcd/L642WvXDeWLEeCc3R/jNVr+X1PCHYxXtcxgS4m
      22zyt7Hyl5wzrkTG6x5P4Ft8D0brWo3mo4t4X9ILTI/VSXxY8lumAFYBsf89SjhmQlQYIqOI
      wHNxux0GzXmcbodBcwGn10GGsT9bCCP2qRsC07IpVuuUZ2YWrfh6g3y5kmSlsmK+etPCMM3k
      xVvBVaM1OlJEocIPJaFU+MOQXtNhvukw1/NphoqmVEQqJjszTIFhm+Rtg/XlHOunCmyYKrKu
      nqeUM7FNA8s0sEyBaSz2HKIgIPQ93G6HzsEDtA/sJQx8lAJpWITapK/ydKI8vchCKSBagelS
      JDEtabSOWhKpM3JskP5/eCtuXEnoCR2xaFktVSSj45ZSOei0bqNyjWSGsKkllpKUcJkRLaZF
      ixmjRRkHYSiEIcFQhCJHmzpzah0dGvSoEumE3EyY8RWFRgiFIRSmEZIzQmSUI5QFivkelukf
      RoiNBMv4vpEVuJJA1iBU/BtqQkAulq/G1knrNlo3hJpovxWRPqxxbX64Q4+mxCf8fhxmg8mn
      dAwYF4SIZCqIQGkj/W2psNTj+8fWVfL7SOiO/mByuSiQJ8uYLN8YO9YYq5sxcc3Fez1c+4z1
      T/TivsldmQI4LmitkWGI7wzwej284QCv142Xg35KV+D1+/jDAVHgkyuVKVZr5MsVCsmyWK2R
      r1QoVGoUKhUKlSq5cgXDOP5wPB0p3J5Pt+vRHgb0A0l7GMbbPZ+uL+lpTWQIqjmTqUqOei3P
      VCUXb5csalWLqapNKWewyGGpFq1vrRjNipVRiNvr4PXj+P9+a4HAGaCFQFk5Akw8ZTCQNkNp
      glYIHScuSQXLSCCNCx80IIm7seNWHmOCT40JeZ0KstQyM9RYubBU+E2sr2B5CcYFZixALanI
      hxG5MKIQSgoypBR5FGRAMQowhCKwTYKcQZAz8G0L37bwbAvfMoksY0XhvQiRUjGMhEUYFjg4
      ewWguWDj21hmOGHFxcJhJDyT9QmhtdziGx0DY9tjxzMhsFiyHBdqk3XV2ljhOIOlwm/pMamA
      GheWE/dmTCzHhXRqby96RNLt8TIn2mdJG5x5vcdjx2q6Os95BeB5LpY14kvRyb/JN0crPfYH
      SmpUJCeiZwbtJm6ngzfsxRQFMkCpMFlG5MslSo0GxXqdUqNGsVahUC1j2CamZWKYBoYd55cV
      Bmgt4xBFLRPhOrY9Er5ao6VAKoNICaSC0DXpd0t0BkVaXp62NOiFKma7lCGSEG1ElMyQqXyf
      aqlNtbRA2e5jG4qcBbYFtiUwxizmkdGmx9pp1EY64YgH0Dq+VhQGKEWcyCR5IRUgGRcU4/bd
      4V6zlfaPLPWJxQqIrzWywEYWlFJjAkiLOOwxEUx6TJhpLTAAQ0tMNIaWFGVIJXKpRg41OcSW
      ESgTLQ2UMgnI0TZq9ESFtlHHoUhkmEjDQGIgRUL0rI1FQTxqD02S+DyKxd/I4pu4dYEWgkjl
      EUpjmsGkABtv2ZUsPj3ZYukT0EuOmzhfLB6bnj++T0yet+ITGd+nV9i3Vljp/RnxNS0q27NX
      3B87TkQxnPMKoNd9n9nZ/0YTc7/LACJPLy59TegoQjciGEaEriJ0JNLXCFNh5jVmTmMWVLzM
      a6yCwioqzILGLmmsAghTAEbiHhktRezmWWF/vJ64gJL9Wpm4wwKua9MPLBxp4PjTuN4MQ7/O
      QBYYCANbQCUH1ZKmUhbUClAxA6r5PsVih3K+i2XIpOyl9TISX0l8XUQyIIyZ7DeQQZgovg4y
      lKmFGmoLR+cYRDkiZRBFxiKR2Lh1tax7LRJLblHwKhKFO+reTliPTFiW40J73II8/s869tGX
      xZAaA8pimPjqY7KzGj0MNEPKqV++pyt0aSR++wZu4qM/2nUEClOomDXTiOKMXkIdRYgS9xQs
      DRKUHBe8J4oxS/iw1z7XxaNmuUJY2hM7t3CsyuCMYwNdbYSe4sDvh3g9l2AQoKVAaxOUEVt2
      yozj32tT1GfqFOs1So06xVodK29h2gaGZWDaBsIyYktexIIzFvCLwkggUuEaY/x3UGr0p5EI
      Br2A+UND5jse805EWwr8wEJGJpE2iYSBbRhM500umcmzfl2JDetKlHMGORPyNuTzsTW/tC7x
      Nku2lwqCGEpKZBAwaDdZ2L2LYXsB36shZZUQg74q0oryOJEV90RkOsy0WNpR3rcRDYMecy0l
      LXTiD3eFqyR9gDg0MuG9mRGt2E9vtCkzjBOYEGIREegcbabYpTbT0g36uoafxNj75NKE4Ue6
      ZnwfsdC3RYQlQgwR12H81KPPuNUIM24npcZb92hXh/HnfH4K+SNhaXssjSGLXZ7nUo/hWKPk
      znkFoCMT1d9IpVQivz72w5cbU3EsfGOaYrWGXSyeUAq8w15TQxBK+j2foRvS9yOGkWJ+waHV
      cpnvB7QDSQiUTEElX6FatllfzzOVN5nKW2yYKjA9XaRey69q3eL6xZFITrfDYGGe3sIcvUOz
      RJHENwp4oshA1umENq400WrEGBn7sK3jrI4eEawl4Zvx6atxT5ocAWXhUMKhIoZUGTAtWjSM
      Lg3amCiGlBjqRbrijqrT1tN0dA2H0nHWZSQgRha+xBRRPPkqidLRhxXCRyhRa0Sia2Q45jZK
      sdQFs7Iyz3AsWEk5jivn5XNLzoUeg54wF5Kv8Fx3AbnDIToKsZOZrkvzwB4vUl948p8GpNI0
      Wy5zc0PmOh7zXkQvlDhOiOdHuKEi1JqaIZguWGxsFNiwvsz0TJGSaVDMmZQKFoWijWWtPi+L
      TkjfozCkO3uA5r73cdotAs8lkgpH2rRkib608aVJpOKhYKE5Ks/OiteLL5qsLwp+4ASE/7iF
      rakwjCNuRIsZ0aQihhSETw6fAj4hNgt6hpaeoqln6OsKLkU8HdMhRNhHud7iNcdhJL57U0SY
      QiFGSU8mbuXY72uCYw9AaEw7GfORo7SHo3dhvNxM2J966BXWz40ewzmvAE42CkgpjRdIBsMA
      x4sYBJK+Lzk0N2Sh5TA3COiGcVrqkiko5S0qJZtqyWZdzmSmZLNxpsTM+jL50sqzbFcbo4Ha
      0IsTqwyaC7QP7qO/sIAfQWgWcUSBbmDTCXNIBIbWWInL4mRqGAv/WOCPkpUcu5sntugLeCm3
      zZToxFTFosWUaGOg8Cji6CIuRfq6QlPP0NYNmnoalyIndgdxD8dIhLsx8t8LiSkWQ1L1cVj2
      k3c2WlkcXE2jb4TAtENAIMOzh30zwwjjSmG0PTY34AxGpgDGoLXG9SVzbZf5pstC36flRwx8
      yWCQKIBQIrRmnYit+Q3TRdatL1Or5SlbRqwAyjb5kp3w56wt4gxaPr4ziLl+Om3cXg8ZxjH6
      oeviBZpOlKdLGVea+MpAJU/dPCZP87HXRWvJiE//aNa+QFFmyJRoMyPaTIlOSldcEkOKePjk
      4lmxepo2DXoqdtu4uoBDiQjriNc4TE3jsYLUqpeJ4B+Lgz8Jq3u8oz0RenmYMg0zwjAjZGSj
      VZY969zAeKRh/F6dicrgvFEAWmsiqXEDieOGeKFkGChag4DZ+SELbZe5YYAfaXJakzcNColr
      ppE32ZA3mSnnuWB9mdr6ElbBSibbiNQNsBbWvQxDZBSmHPuh5+EN+3i9Pk6nhdPrxsdoCKM4
      Fl8aeXxpMIxMOjImV4PYjz+Sbasp9GEk+Jf6GGMqhDwBBVwKwmdKdFgnFpgWbaZFG5OIgHwy
      8Jqjp6u0mYonTumpJKWgSP9GpR9DzRbPSgZkTSFTn/14aXrFBjn8NZZa84sOqtF5ywcdD1ee
      MBSmFaCkiZInoswynPkYf/4jt9F4IMTpE8HnvAJod4e88f6A1jCk40cM3JDeIGDoRriRoqQ1
      04ZgqmizfrpIY6pIrWxTzplUSzbVSg6rZCNOgTUfTzIb4g8HDNtNvH4/tuI9j8BzkYGPjCRK
      ghcJPGXjGTHXe6gEvjIItYEcCSBNYumunpU/DqUVjAl+AeQIUmKzhuhSp5cQmw0oCReNoKUb
      dHWDto4TkAx1km1Wl04iAcko9FJiCYmBTAR/kuIxnb16/AOn6Wc6Fn466fk90dbVmFaIEJoo
      yq0w8Jvh3MfiYLMYWz9VOOcVwPsHOzz41B5s26CUM5mxDDYULGaqeTZuKFOcKmAVbQwjpjkw
      TCO2kFc1KiieTCWjMJ5EFcREb/5wgNfvM+y0cTptIt9DSYWUEoWJMiwibRJGAjcycKTFUOTx
      hZXE0oPQiYBfYmSujSiJJ0vZ+Ni4cUw9Q9aJVmLRtygLBzlObqbjBCTzrKOtp+joOlJbaRZa
      NVbTI9c57lGkzpQxq35Ef7z4Aa2srPVESYslCpZ+cuNT7ifdN8c+msHycseekdDE80xMiZQm
      Wq6W62d1nnxaysTEssP3ZI6v5JXLGW+vkb4ePZ8j1HAFZorD1XHxGeqVvhe98n2K5M06PAPG
      EdpEi8Uetz624xeJ6PRitMmKkUuTW+lResmN6ck2T+9SnwcKoD3fY89rTWplm1I1j1GywYyt
      42V3rvXE9PKxeJ9kwlISSrUkKEAvK0MjI5kI/AgVBkRhGFM0uy7ecEDk+XE8vEpcEKaNFjFB
      WqQEgTTwtYGHjRQmoBFCTCZCOcJ9r/yyTjg9Vi5hXHIJsIVHxWhTMttUjBYl0aMmupQZUhUD
      LBRDOcVQNhiqaYaqnhCbVRnqCo4+/KDsUQX+Eom92JuJc/1OVvvIPvsJ4cISwaIPd/7oyPFz
      xZIHvtJVDi/kJo4Wo3fLSOuRnrlcK61QvzGMufZSYTVKmHDEsg5T3kTZIxF4DMce4fflImvi
      Ikexe/XiaUsiqGIZd0w3Ovm7SITgWA2EEElNjrOssfLSeh72/MOXG+sLnb51S9+oxfNXikxa
      giVNrNHL7uqcnwcQhYq53X3m4ISNlwlv7oiDXkqUUmglGdehExTLKrb8ldIoDUoYKCxgKvlY
      F7XHot5ZvJoFVE6syscMA4lNhC0CLEJKok/VXKBmz1Ez58gbQ7SIh3UVEOg8vWgjTbmFrtyI
      o2pEOp9Y/TZamxMvmJ1KtVSKL96liLXwSiRuOmVCjKHHzhuPsUhOmNTmI8E6Vo/lMRnLj0/L
      IilPiGUfTbyu0zqNLi3Sc/VhP9vx2hhmHCGllMFiZBBHFBw6qesW8aQEAAAWPklEQVT4NReN
      vcMLAc3YCYcvefl56UUWdclRz0vquPKvq2BrJje/KPiT12h1Oj7HidNkO6ev1WgcITGGjkbS
      t0J9z5oegO/7vPHGGxSLRbZs2YLWmlarxfr169Fas2/fPjZt2rTsvEHPYbAQLAqTZGWCizsd
      xR0/ZHGfVorOgX14wwGh6yCjEW9/iIoitNKgNEiFVoIIC1+YONrG1yaRFkQYRJgJV8zoOhpD
      jzT+GJbKjbEHq1c8YGWs9AHmhU9FDKjRpcKAuujE26JDlR4GigEV+rpKT8fLLrV4qet4FJZY
      yytfeXIANomuYTHMctGaHydimyzheDT2hPqYcN2QlHNk+/NEcGIfjsYwJIaVRf1kWE2MuS4m
      3KFHxlnRA9Ba8+Mf/5hLLrmEAwcO0Ol02Lp1K8888wwPPPAAb7zxBjt37lxRAdh5kws+1Dip
      6y/s2cWht17AsnOx711qZKRREiIp8LSNI3IMRA5f2EgEEiOVO4vKZiT8kvsi5r88fhy+aynQ
      cWgjcYhjCYdp0WRGLMQ+egaJ9z0eHPXJ09ZTvKO20NbTdKnia5NQ24TYCRXCZPmLwj0W7HH8
      vIzLTQQ8JD0cwfLx1xVrfuRBdr3CxqKSMJYI++Xul9NiIK4AIWLrXykTrc7PZOwZ1gKTxs6k
      hJjsKYx/C2eFAnAchyiKuOGGGwjDkB/+8Ids3boVgF6vxwsvvMDXv/71Nbt+2Hdp9i2kmSdQ
      JoGwcAybQNhERiwgR7yOI1FknqB9eHzQ2ARUGSQ++R6VJONUTfSo08FEMqDCMCE3m2MDPV2n
      rafoU2NIJe5/JCykQse0zaOJUJYI0wHWeIJUwgm/Qj9geZjmZM/q+O9uhKUROEuvc6aK+6XQ
      GFYUf4pRFvKZYa2w9L2aNOLGaS7OCgUwHA5pNBoIIcjlcrHvXWv27NnDd77zHb70pS9h28cy
      xf/EMNfXvGN9ANsQE21poLGToMu1waK1PYqZKSdcN7FV36TMkBwBFhE2ARE2TT3Dfn0xf9Qf
      jcnNiMnNQnJIjLgXkvDYlOgAi/lkReJjHfeCrQzjmFTciscs2zk5ALucam55Zc4+0akRRhya
      KqO1e1czZDgyxt2hZ4kCsG2bIAgAUKOcsUJw8cUXc8UVV/DKK69w8cUXrxnNQqDiRlt7qz6m
      QigSJwQvCoc6XeqiExOcJRa9SzwLNs0fyxRdXaPNdEJXPFIasdCJmTE9TLz0OvH/466SiUGR
      Y6ztUoyPFIoJC35y3yj08sgRI2efkD8cYneZaUmUHLl+zp27y3C2QpwdCqBerzM/P4/jOCws
      LFCr1QAwTZNt27Zx4MABfv/733P99def5pquhJWVxsiyL+EwTZN1YoEp0aIq+uTxKSRx9hKT
      LjU6NNjNJgZU8HQhteqj0SMUoFHkcA9TC5GK/RWF/orVHI+cGRfJSydCrXTW0ec3nk8i0DAj
      gGy2b4YzCmeFAjAMg7vvvptHH30U27a5//77MU0ztfo/9alP8b//+7+EYbimrqDlGA9IXHTX
      jK/bhBSFQwGfEg5VekwbTaboUBddLKKUqdKjwJAyB9lAiyn6usYwJTc7FqExeYxesjIptBdr
      Pdo+mlU+fpXjr835izhHcOb6yXDm4awJAwXSePvjcfWsRk7g3/32Lzz/+m6KRpBGvQgWmf9G
      YYwCTRGHBl3qokuDDmWcRLT7FPCIsOhQp6drdESdoS7jUsSlgEc+oSteHdGpdTxysBg/f+Ry
      M4F9fDimD0coTCsELRIFkLVyhjMHZ0UPYIRTQaW8EuyoSc50sQiwicjH9GUU8KmKPg3dZUp0
      qNPFROKTIyCHTw6HEvu5MPHRT+FRSFQIY5EtawMtjGSW6Vmj488qHIuLyzYlCAiifPYUMpxx
      OKt6AMcCpRRRFKXbUkpM8+Qm2ywcOMj+XpAyW8aunCFF3CTB9yICbIaUcCgxpESwihb98WJt
      KOAyHCsEGtsI0dog1GeVrZXhPME5pwDW4na01oRhSC6XW/Wy1xJKxcRyp3Zc5OSxGm67tUYQ
      BNi2fdp6pSeKs6FtxyFlTLViWWeXAo2iCCHESRufa42zq1WPAWv5QZ5tH/voBTwb632m19my
      rLOinktxttXZSFK4nk11HuFsaOtzTgFkWIRxkvmPMxweZ7pld64ge4fXFlnrHiOyD/7UIWvr
      tUPWtqcGhmGc8dY/nINjABkyZMiQ4diQ9QAyZMiQ4TxFpgAyZMiQ4TzFeaEAtNY0m03m5ubw
      PG9NQkUhDv165513TuhcrTWu6/Lee+/RbDbTOg6HQ9555x0cx0mP63a77Ny5k8FgkO5rNpu8
      ++67E3MgVgtaa9rtNocOHeLQoUPpdZfizTffXPVrH6lOrVaLd999F8/z0n2zs7Ps2bMnJQ1U
      SrGwsMB7772H7/vpcVEU0W63T1l9TxYHDhzAdVfmeVoJvu/T7/cB+Mtf/jLxm1KK+fl53n33
      XcIwBOJwy127djE/P5++e1EUsW/fPvbt25e2p9aawWCQvo/nIvr9/qrIiJXaeZS8av/+/Wmb
      RlHE7t27OXToUHrd0Te3Ft/zOMxvf/vb317TK5wB0Frz3e9+lyiK+N3vfsf777/PZZddNpG+
      8UgDNkf7fQTf93n++ee58sorj7uMffv2sWPHDmzb5vnnn6darVIoFPjv//5vqtUqTz31FFdd
      dRW///3v+d3vfgfAL3/5Sy677DIOHDjAL37xC0zT5KWXXuLqq69e9QGo//qv/0JKyfz8PJZl
      MT09vey+fvGLX6R5GtYaTz31FG+//TZhGPLUU0/xsY99jD/96U+8/PLLDAYD3nnnHT7ykY/w
      05/+lL179+I4Dr/5zW/Ytm0bb731Fj/60Y/Yu3fvKavvycD3fb7zne8QRREf/OAHj+mcVqvF
      wsICMzMzPPnkk2zbtg2In9eOHTs4cOBA2iYf+9jHeOyxx/B9n1dffZV8Pk+5XOahhx4iDEP2
      7NnDnj17+NCHPsSvfvUrduzYQaPR4IILLljL2z5t+NGPfsTll19+XAPmS7/vURKr/fv34zgO
      zz77LB/72Md49tln2b17N/v372dhYYFNmzbx+OOPE4Yhf/zjHwnDkPXr17N9+3Z+8pOfcPXV
      V1Mul9fiNoHzKAy0Xq9zzz33oLXmySef5J133mHLli289NJL7Nu3jy1btrBt2zZ6vR7PPvss
      Ukruvvtu+v0+L7zwAsVikbvuuosoinjppZdYWFigUqlQrVZ5//33+au/+is2bdpEs9nkscce
      w7Is7rnnHgqFAi+++CL79+/n8ssv55prruGtt95iZmaGl156idtuu41qtcqGDRv4xje+gWEY
      XHjhhezdu5f5+Xk+8YlPcPXVV5PL5XjzzTf56Ec/yo033giA67p0Oh1eeuklvvzlL1Mul/nh
      D3/IYDBIGVNXC8VikTvvvDPd9n2fp59+GsdxuOWWW7jgggsYDofs2LGDKIq48847qVQqvPnm
      myilcByHjRs3snnzZqSUvPHGG1x11VU8//zzzM7Osm7dOm699VZmZ2cxDIPXXnuNiy++GMMw
      uPLKK4miiNdee43rrrsOgE9+8pMUCgW01hw6dAjHcfjDH/7A17/+dUzT5Pvf/z6e56XPQGvN
      gw8+iO/71Go1vvGNb7Bjx45VbaO1wttvv80nP/lJ3nrrrXRm+4svvsj8/Dye53HHHXcwMzPD
      a6+9xtTUFG+++SbXXXfdYSd83XfffWmbfPe732U4HBKGIXfccQeO47Bjxw62bNnC1772NWzb
      xnEcHn/8cQAuu+wyNmzYkFqv5zL+/Oc/c8UVV2AYBn/605/YunUrL7/8Mu12m4WFBW6//XYu
      uugiXn31VXbu3Mkll1zCDTfckCqCe++9d6KdlVK89957fP3rX0cIwfe+9z1uuukm7r//fgqF
      AnNzc7zwwgts3bqVv/7rv6ZSWeuM4OeJC2gcQgi2bt3Knj172L17N51Ohy984Qu89dZbdDod
      duzYwY033shdd92F1ppf/vKXfPrTn2bLli08++yzuK7Lvn37+NznPke73WbDhg189rOf5ZVX
      XgEgl8tx//33c9VVV/HLX/6S9957j36/zxe/+EVef/11er0eb7/9No8//jjXXntt+pDz+TxC
      CN5++22efvppPv7xj9NsNrnwwgsB2LBhA+12m0KhgJSSZ599ll6vx0UXXUQURamVsHHjxjVx
      bURRxK5du9i1axfdbpenn36aK6+8kk9/+tM89dRTSCkxDIO77rqLm2++mZ/97GdIKdm+fTuz
      s7Nce+217N27F601UkreeustIBYoX/ziFwnDkJ07d3Lw4EEefPBBPvjBD3L55Zfz3HPPpdfu
      9XppfQqFAlEU8bOf/YxarUalUsG27TRuvFwuE4YhhUIB3/fZvn07H/jABygWi1x00UVnVTjk
      m2++yVVXXcX09DTz8/NA7Na57bbbuOuuu3jiiSfQWvPb3/6WF198kZtuuol+v8/+/fuXlSWE
      SNvk0Ucf5fLLL6fb7bJ+/XqEEJRKJcIwxDAMbNtmYWGBhx56iJtuugnDMFZMu3quYqRwtda8
      8cYbaK159dVXuf7667n//vv57W9/y+zsLLt37+YLX/gCCwsL7Nu3D1jezpdddhlaa3K5HKZp
      YhgGlUoF3/cpFArs2bOHxx9/nE984hPkcjk+8IEPnJJ7PG96AONwHCdt9FarxZNPPonjOBw8
      eJB8Pp9+DN1ul1arxa9//WuklKkPeePGjeRyOcrlMhdeeCHFYjEVPNVqlXw+z6ZNm/j973/P
      nj17aDab/PznP8d1XVqtFkIIPvvZz7Jx48a0TlprfvWrX9Fut/nGN75BPp8nl8ulvsMoirAs
      iyAIeOSRR7j00kt54IEHlrmxRhQFq40oipidnQViZXXgwIHUGvU8D9/3KRaLlMtlSqVSaiFe
      euml3HPPPSu6pJRSvPzyywRBQKvVYsOGDQDceeedXHbZZQB85CMfYefOnbzxxhvcfvvt6bmO
      4/DQQw9x/fXXs23btmU+W6VU+gx/+MMf8slPfpLLL7/8rIjNHofv++zcuZNnnnmG+fl5/vjH
      P3LBBRdQLBap1WpordN3r1Qq8cADD2CaJgsLC4cts91u84Mf/IC7776bD3/4w8zPz6/oa377
      7bf5zW9+w+c//3lmZmbW7B7PNBzJ/1+v11m3bh1KKZRSHDx4kHa7zZNPPkmn06HZbKZKstPp
      8NBDD6XtDKTZDIUQqdG0f/9+fvvb3/J3f/d3a+ruWQnnnQIYDoc899xzfOYzn2H//v1YlsUN
      N9yA7/tYlsXvfve7VIhalsXU1BS33XYbhmHgOM4xDw7Nzc1RKpWYmpqiUChw/fXX4/s+uVyO
      v/zlLxQKhYnj9+7dy8LCAl/60pfSD/qSSy7h9ddfZ8OGDbzxxhtceeWVPP/883zkIx+Z6GrO
      zMywe/duLr30Uvbu3cutt966uo1GbHHfdNNN6Xa9Xuf6669nenqa4XA44W5ot9uphV0qldJ6
      hmGI1pogCFBKMTs7i2mafP7zn+fll18GSK3QEW644QYefvhhisUijUYj3f/UU09x8803c8UV
      V6T7DMOg0+lQLpfpdrsUCgUee+wx7rnnHjZv3rzqbXIqMHL/bNu2DaUU27dvR0qZ/j4+IF8o
      FI46c1ZrzU9/+lM+97nPpb3L6elp9u/fTxRFHDx4kEajged5PPvss3zta1+beB7nOnzfJwgC
      LMtKe6tAaogtRb1e58ILL+SOO+6YOEZrzU9+8hM++9nPTljzSimGwyFa61QePPvss3zlK185
      LXxH54UCGHFy/M///A+WZXHbbbcxMzNDo9Hg8ccf58c//jFKKe69915uueUWHn300TTRzNat
      W9m+fTuGYXDFFVewefNm6vU6EH84I66dmZkZDMPAdV0effRRoijib/7mbygWi2zfvj29xn33
      3cfU1NQyF0Sr1aLf7/ODH/wAgGuuuYarr76at956iwcffJBGo5EqhL179/Luu+8CsbV86623
      8vjjj/Pcc8+xbdu2NSGtW79+/cT27bffzs9//vN0wPCee+7BsiweffRRfN/n7rvvRgiRDhZD
      zJ/z0EMPYds2tVqNmZkZ5ubmeOSRR1BKce2116KUmlCOlUqFfD7PVVddNWG9D4dDXnnlFf7w
      hz9gGAaf/vSn+dSnPsX27dsRQnDzzTdj2zau6/L888/zwgsvYNs29913Hy+++CKtVotWq8Uj
      jzzCvffeS7VaXfU2Ww3Mz89z4403ppbh5s2b6ff7tNttHnnkEXzf584770QIwbp169LzCoVC
      ek/jzy6KIsIw5Ne//nW676tf/SrXX389Dz74IACf+cxncF2XMAzZvn07AOvWreOWW27hiSee
      SAXY7Owsd99991nlTjscPM9jx44deJ7HjTfeiGEYXHrppTz88MMUCoXUkBnvCa1bt47Nmzfz
      5ptvsmPHDpRS3H777VQqFaSUhGHIM888kx7/la98hTvuuINHH30UIFUag8GAhx9+GIAPf/jD
      XHLJJTz33HPpWMOll17KLbfcsib3fd7PBB5p+XHStFE3bfRij9wZx2JdAcvKW+kax1O/kfvn
      SOeOmD+PdtxqYul9He0+R6yq4yyaR2N7nJub48knn+TLX/7yMbFYnq3skceLBx98kC9/+csY
      hrFqfDlRFK1qeWcbwjBECJG+O6P31bKsI7bJ8X7fo17FmaA4z3sFkOHMxssvv8zFF198zoYc
      nijefvvtdJwkQ4YTRaYAMmTIkOE8xfnZ18uQIUOGDJkCyJAhQ4bzFZkCyJAhQ4bzFJkCyJAh
      Q4bzFJkCyJAhQ4bzFJkCyJAhQ4bzFJkCyJAhQ4bzFOf2dMkMGc4TNJtNvv3tb2OaJpdeeilf
      /epXD8so+eqrr7Ju3TouvvjiU1zLDGcash5AhgznAHzfZ2FhgX/4h39g48aNfOtb36Lf7xME
      AX/5y1/4v//7PzqdDv1+n0cffZSnnnqKnTt3AjA7O8tzzz2XUk33ej1eeeUV3nzzzTXPSJXh
      9CLrAWTIcI4gl8uxefNmNm/ezMsvv8zrr7+OZVk88cQTmKbJv//7v/Otb32Ld999l263i1KK
      YrHIP/7jP3LrrbfyH//xH/zrv/4r//zP/8ymTZvwPI9vfvObXHrppaf71jKsEbIeQIYM5xhG
      rJX9fp8rrriC6667jqmpKebn51m/fj0f//jH+dznPsc3v/lNfvOb33DJJZfw0Y9+lEKhwOuv
      v04YhmlugcxNdG4jUwAZMpxj6HQ6vPbaa3z4wx/mP//zP3n//fe58847UxrzUeKg8eP379/P
      Pffcw6ZNm/iXf/kXtmzZwr/927/x4osvnq7byHAKkLmAMmQ4R7Bv3z7+6Z/+iX379nHfffex
      efNmtNbs2bOH7du302q1APjgBz/I97//fRYWFrjjjjt47LHHOHDgAM1mk0suuYQdO3awadOm
      CWrkDOcmMjbQDBnOAQRBwDvvvINhGMzMzKRpTYfDIa+++moaETRKV/inP/0J0zTZtm0bc3Nz
      7Nq1i6mpKT70oQ8xOzvLrl27WL9+PZdddtl5mx/gfECmADJkyJDhPEWm2jNkyJDhPEWmADJk
      yJDhPEWmADJkyJDhPMX/A9j+VE6SQEuAAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='384' name='by country' width='384'>
      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
    </thumbnail>
    <thumbnail height='384' name='by cuontry fully vaccinated' width='384'>
      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
    </thumbnail>
    <thumbnail height='384' name='population vs population density' width='384'>
      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
      GnISuL29fcjcJkbQ29sbTD1gBP2HbQ93rupYpGnaoDNkjUBV1bBdXXIzjFhHYLx66m/eh6sn
      sQpojOvfBh7KLJIjrT9Fwmitrb7VRB2NDbqu4/V6x/Ru+ssFAgGAYTOxGqf2rpOzx8Pf/OL9
      UIcxiCTB5d3wUN8bjq7rt/xK7MepMG+UMjNb6C+4Ma4uJcCGjlHKA8aro352g9WT+Rr1dNUO
      wOfzUV1dzfTp09F1nYqKCvLz86+4kgkEAlRXVzN58uRgwqRrDUmUlZWRmZlJamoq0HfrdezY
      Mdrb25k8eTKZmZnBJGdDNW43O/Sh6eDy+G/oNaNFkmDShERum5LFhdZu9p6ox+NTyEiKZnpe
      CruP1dHrDYQ6zCEpXkbt8sE4f359jFYeEGUaK65Vpqu2nr29vWzevBnoa3C3bt1Kd3d38PGB
      s8+NjY3ous6aNWtoa2sb9JyhZrZPnTpFe3t78HuHDx/m888/x2az0dnZidvt5vXXX7/idf22
      bdtGVVXVsD9nqJ8bbnQder0ByqobmVecwaQJiWQmRfP/3FNCW6cbj89YS9IEQQgvN3UN9+ab
      b6LrOm1tbTz44IPU1tZy/vx5WltbKSsro6WlhQcffBBN09iyZQuqqlJaWsq0adP48MMPqa+v
      p7m5OZjTHvpydqekpLBgwQIsFguff/45FRUV/PnPf+aRRx7h3XffpbOzk+LiYkpLS9m3bx/l
      5eX4fD6ysrKCB6RMnTqV6dOn88477yDLMt/+9rdJSUkZsQ9spNW3dBNptyBLEr6AyuLpE3BY
      zdisZiIdFnrc4XG3IgiC8dzU0pGamhruvvtubr/9dr788ktKSkpwOp2kpKQwYcIEHn74YdLT
      01m7di2333479957L+vXrw+evPPss8+Sn58/6D37EzC99NJL1NbWUlJSQmpqKt/+9reJiIhg
      +fLlLF++nH379qEoCoWFhaxYsYLp06ezceNG8vPzefDBB/niiy84efIkAI8//vigfPPhKis5
      lphIG7IkkZ+ZgE9RmT85k28uLAp1aIIgGNg1O4CBQyn9a1wlSSIxMZHExET8fn9wJUD/sjCz
      2YyiKLS3t3P27FlOnjzJvHnzaGhoCJ4adPlMe3R0NM8++yzLly9n/fr1mEwmJEnCYrHQ2dnJ
      +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
    </thumbnail>
  </thumbnails>
  <external>
    <shapes>
      <shape name='Flags/France.png'>
        iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAYAAACqaXHeAAAACXBIWXMAAAsTAAALEwEAmpwY
        AAAGLUlEQVR4nO2av5IcRRLGf1ndwyiOP0EIDMyLuDibJ8DE4RHAxsTjCTBw4FkweAawiAtw
        zjrjDP4KBQGLtNJqpis/jKyq7l1ta3dmWmhBkxE93dvbVVP1dX6ZX2UNHO1oRzva0Y52tKMd
        7WhHex7Nyrnn7Y+3S3b8zSfvLNkd995/b9H+3vrqvytg6Mvft0B89tG7/PDbGWbGiM1utl51
        3Fp1vPnmPxcaatjm409hs0HbzV7tBbgEt1/nPx9+AHALuF8B6EFkibu/n2GW2BeAp2X+/bcH
        tRcgifTqbRS3+vYB0BmcnG64e3KGpcMBkHRQ+4vmJ78d1F4SLmEPTpGldr+fPnTn5IzTR0N4
        wM1yAPTw4WHtEXLhv/7C9NWMAMj5/pdTsgsz56Z5gDwf1h6Qi3z3ZzSBYAKAyO7k7FjaPwiO
        3S0MQPbD2qMYkzs+GVo/fcS98MTtxlEAHQYAAC6Q5imQPQ4z+Lt6gOWMX04Bx13kLCwJOGwC
        i2eBA2MAgNwxaYYCJU1kd0wcTIHlPWCBICiBfI4Cme0wTChwmC2fBQ6lALg7XXayZiggF14B
        OBCFmwhA9YAZAER2FR1QYsASrrCUHQgARAbwnJ+cBbZDJo1KsSyM9vi6GxYDvMQ4ZoOgDwxD
        JucQCjbRy/vYTQKgur8kNAzzFBhynmQBTd7+7l5wU6RwHUWIQEc+GwMyQ84Mg4cOsBTT3hOE
        xXXAnh5QhyEiwCtnpj1NKJDJhQJJoCIGmhfsGAtuAgU0OavIfOXMcKkHeCbnoXlAqwmYlXiw
        24SeNQC6cJ0LAD5PgYHNw1M2D53UdVjqAENEJtg1Hty7d2+nAV9l9x/tVgprSx7FdVYc27Oz
        GQ8oaTBqZ+WjTFwYsFtW6Lpup+ev7G+P1WCL/hCrQBc2txyW53ExVF0/KfRQMqxhej0P2Fc/
        zPa3I6XacqakPyDElPu8B0QaBMOiKCIQhp3TBVp8cteyHZRgnXCtBLsgFwnsnmdigEcGyFng
        YB3EzFM5CakWSq4GYPEgOAzXf3ZyePGAqgR9yOTLK0KQ3QPo5JBjsrVCbkqYjXn1z7ZdF0Oy
        uvgRcdIohOYLIs6QabwHjbWBCAtBiWtQ4JmuBiWwWgqnpT8PQRBrgmINAFM8kN1L8LC2QxQT
        FymlwM4KHZ44hoVdZQcdIKvlv9H9VYAIKTw+O2aBipI7hiHzIoe9eEDCA8KSGv9cLuziAdX9
        awqUCy/7ArqqJhhV4Zi0zEioBENHVoLgNea+OAWuqQNUP1SDoLcYIPdGi2ojBRilImZgsT+Q
        yx6JpQ6US1TkiYkgPY00WYXdFcBWz5SEA5S3716qwj5XFi8PtZ0hS1GLT0XUaATmstlPA6NM
        TyEI5jrM8d7F77DxvsdF439QwtFcEKwbBrVxU/4leFgKhSjVbHBh0pOxHFZKucImVKjf3r66
        TrSNqfC+7AnIFWXxSXcXPMBDCaZaFYqvEREYa63QUioTViufnXf75SlwmUfVPB8jaTdHBUgE
        z2lGiL9nPCB44shTpDocPJbDETw8VoaTKNLSYTkli2PxNFiRLvt7rf86sfICxrQXAHhb4I17
        g/MxoFSGa9THUrz1pKLFDUslNWKk9HhKMEukZMvHgAJA2yIzi9RYOe65rfqa7IW2DqjLYuYo
        UIPDBFhSInKmC0uFEqpTPl8xSiU79J3Rp/SYWqyAmNm56+v+37q+xJ0MW43RHiJlu8696RA+
        3tJiTYdMaHMOgC4ZnRl99eGqfcsmSeqiLpAS5c0byYy+i0Gu6rlPrLo06wHT+7O8vux6vY6L
        7Ta4jSEbIA8xWYr6c48CiAU9neIhpADHDCa1igZAnxKvv7JmvS5Kz1L5pUgcqesKJYz1qucf
        654X+sR61dEl44U+PGDdd6z6ZYOgJLp//Tuut1tss0E5o+2G/OABDNsomYmmZqcA1syQJOz2
        a1j3/8cBWL/4Mnf+9zWpuK8V+dt+MVZqhGbGGcbJFWLn81e+WxSER198eW5SNQ6Pb3hUeK4J
        RSqlS1v9eAdbrVq/dRYvAW+U8/Ng94GfgPvjDyXjd3P9bJO/lw3AWTkf7WhHO9rza7b4ouUv
        Zk916f5XsCMAz3oAz9qeewD+APRL/2IM+BlNAAAAAElFTkSuQmCC
      </shape>
      <shape name='Flags/India.png'>
        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
      </shape>
      <shape name='Flags/Japan.png'>
        iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAYAAACqaXHeAAAACXBIWXMAAAsTAAALEwEAmpwY
        AAAF00lEQVR4nO1a34tUVRz/nPtjdndcc5d0W4VVqJVKWdzNoh+IFRQ+WGAQPmQQ/gdCEvSu
        iGFEjz6I2EMvBmUglARiSPYSrpklqbkp6KpbbjPjzN6595zTw865fefMuXPvnZl1afZ+4My9
        c+ece8/38/1xvt9zB8iQIUOGDBkyZMiQIcNSBKsdncnJSX9RZ/KQMT4+7gIInNr3XiklNm7c
        CMYYbNsGADDGIm/wf4KUEgDAOYeUEpcuXQKAXgAlq9bHkVKCMRYK3S3CA6iTiTGmCHHCDwAQ
        QkAIAcuyQsa6CVLKUC4qn0U7LAVQIgBiAZxzCCGoiXQVlOBSSgghwusO7bAUXEC3gNAFKCvd
        DMaY2QI45wAafaSTkAFH6eIVlC5egXdzGrw8BwCw873oGRlG/9h69I+tB3Pszj+byBVJgMlE
        OvLwqo+Zb3/AvS+/gyh7xj7Fn3/HzMnvYeV7sOqt17By20tgObdzc6jJFWkBUT7SLuZu3Maf
        Hx1F9e7fifqLYhm3P/saf31zFus+2I3etas7Mg8llx7jQgJ83wfnvKNBsHj+Mm58fAxizqz1
        ZvBu38PVDz/F2vffw/KJp9qeC1WucneABEF1USVEukWkbZWpW5g6eAS8XIEUoqXGyxVMHTyC
        ytSttudDXcBIgL4KtGMFsurj+r7DEBUPkou2mqh4uL7vMGS1M7WaUrBCXRDknNfVA4qxtLh7
        4jS86ZkOTHce3vQM7p44jaG3X2/5Hkpw27bNBPi+H3ZijMGyLOON4iCrPu4cPwUZ8PjOKXDn
        +CmsfPPlllYG3Q2oCzRYgGVZddVTWiu4f24S/mwh9STjIGYLuH/2PAZffS7VOFoAKc0bCQiC
        AEKI0A2A+vIxKQnFn36D6LD2w3tPXsbAK8+mGkOTn6YW4Ps+giCAZVkhU4qANBZQvnYTki8M
        AeVrN1MFZ137ioQgCMI+DXmAYse27dAdVG6QhAh/tgDBF6au8GcLiQmg/SgBysoV6ggoFApw
        XReu64YEAGiIC81Qqnrw/PSJTxIEVQ/FYjFRX6p9Zfacc3ieB9//b0ltqAWo2VMLSEpAblke
        /gJZQG5ZPtyvjINOgDqPrAV832+oBXRCgHgC+tatwYNfrqYQKznyT4y0lJfobkNjQF0qrHaF
        aMAwpcbN0D/+ZMupb1x75PmxVAKbfL/pKqAGqHwAmA+G6noS9ge2PAPW44KXKokmmxR2fx+W
        TzydKAiaagBKhNEC9IF0fyDNbhHrcTG8a3vHtT+8aztYT3tZILXqBgJUIqQsIIkrRLWhnduQ
        WzUIyXlHWm7VIIZ2bktd+VEZ1NwBNK8GqZBUeJpRxRHBci5GD+0FHBsy4G01ODZGD+0Fy7mp
        CYiygEgCqH/pzCUJgBR9oyMYPbAHcJ2WzR6ug9EDe9A3OpL4uQq6AnUlNhBAN0Vp57Ss07Zi
        ywQ2HNuP3OqVqYV3hx7FhmP7sWLLREtm32z+Td8L0HcD9Dw07wQvTuhqkV+/FmNffILpz0/i
        1tGvwEvlpmPt/jzW7N6B4Xe2w+rNGTXbDLoVx1mAo3dWN6FsmUhIOglgfmVYvXsHHnv3Dfxz
        7gIKP17Ag1//gPCqAACrJ4dlGx7HIy9swooXN8FynUTCRj2XatkUFyIJMAlGryntt7pZYrkO
        BrduxuDWzS2Nj4Oan65I/TzSBeh5lA+1skmyUKBK0+erL+GJLEAXXH9XqD9kMUkwKUh9p4Kb
        XvhQZRsJiFtbk6bFCwHdUvUj1b5eA8RaABBd+6vBSQQ39aHjTfeK+1310U2ezl83dz2wm+DQ
        L2oQ3QtUbqAeAiA2CDaL3iYNJvndFKNM67tuAfS6sgQjASZt0KBn8vmHFQeakabmRktdPa2n
        2/06QgIGBgZw5syZhh0h2uju0GLHAF3rdO035TT0vG5prx37AQzXjksBJQDTAErhHyUx/785
        J3JIdyEAMFc7ZsiQIcPSBUtbc3cbWivsuwgZAYs9gcXGkifgXwrcpTuWCILtAAAAAElFTkSu
        QmCC
      </shape>
      <shape name='Flags/Russia.png'>
        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
        gg==
      </shape>
      <shape name='Flags/Turkey.png'>
        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
      </shape>
      <shape name='Flags/UK.png'>
        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
      </shape>
      <shape name='Flags/USA.png'>
        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
        1HYAAAAASUVORK5CYII=
      </shape>
      <shape name='Flags/brazil.png'>
        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
        QmCC
      </shape>
      <shape name='Flags/china.png'>
        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
        7QFsG6+9Av4LyPKJKdLvJZIAAAAASUVORK5CYII=
      </shape>
      <shape name='Flags/germany.png'>
        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
        gg==
      </shape>
      <shape name='Flags/indonesia.png'>
        iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAYAAACqaXHeAAAACXBIWXMAAAsTAAALEwEAmpwY
        AAAECElEQVR4nO2awW7kRBCGv257SA4IBaGVInHgQfa6D4GE9spb8AC8AnckHoIDeRQuq102
        cFgCIjtdVRzs8lQ67SQLys6M43/kaU9Pt9319/9Xt0cDK1asWLFixYoVK1aseIpIY9n/9NlX
        272O5CPj63e/boDSj59PDXjx4w/I67fkBJAmdj4E6eQT8skJ9B2p74a6roc0XM3r5mBFxhPD
        pOzqiqDX19j1+w8ek43vatCdP+Pnb74FOAWunIDegCRKufyDnP5b8IcMA9SM/tkXIyH00xuA
        5cz23Z9sf182AZurK8h5qu9jo/L2Ev3r70muS4Oasf3t0hUABAIEuH71BlTRhSrAzHj/6k2b
        AMNQFRAhL1ABboGkigUK+tgANVAdLbA0EgxsiE9DbbCAYSKYCKS8xPBRU7Jo2wLD5CuIYslu
        X+HI4TnAbEYBBpgqiCw6CTKXAwqGbAtJhJwysCwVGAk1xUTRENrOAoCZYqosMH5sfKGKhPpA
        gIHoIBEbRLIkGxiAGSrStoAYiAhst5CHVcCAtJA9gdrwMLSZWwYLhpYCIqBGNwa+FCcoNmwD
        irQJUAYFJFFSMoTd7B+zBiyUqoPFxVoWcAWUAilNT4SJtAgVKDbYoJQZC5hRREgiJH9cNEjZ
        iTg+xNk3M8SG3W6Z2wcUEXIpkDOdK0Ahp+NWgQGiNqhAFW0RcP79d3z+/DmbzYbNZkPXdeRR
        CTnnXT44klXBRp8P219DRBARTk9P+fKXF/DyJRBzgAhmRkppOjzwJRDg5ymlIRmOmAjYbrdT
        47qDH3A8BESY3TRwKWU6v6EAERk8Mh7OlqvAcegkxAmM8bjKRXab4VsK8IYecNd1U/2hB+6I
        SvYjEhEVkOc6Olve+VhRk1DHs1sGS7khlSj/OSscKlqz7sEDbQs4K6pKznm6QM65ScQh26FO
        5LUCIgHTdEaG/HNkLl70GFBLPsbXtICzUie8OpkcOlpLeSshOvrY0ZmqLRA7p5TuJeIx7XHf
        vWsVP1gBsUHNVouE/zPIx0K9/vt5rYpIwI0c0Aos1vnsH2oCjLb1snU+a4F4PuehQyKhzlVe
        1rKPidz7OW5ZoJaRy791k32S0Jog/xwDjxu6Og6YIeCuw9vuK/haqXXZ2gBFEuAOBcD8s793
        fkjgrTaxf+ta933vbWrJx/HXcq8Tews3/iAR9wA+ELeB3wS4dzt81yrQmsGHfN/KUa31vVZA
        vQOs7zkR0JqNmPRanv9YeeAu0nxs8VE3busjIa2xTgScnZ1xcXFx6xeheMRfh/adA+pZj2t/
        a08Tz28s7WP5KXA+lk8BV8Br4Gr6oyTD/+b62S7LQgH+GcsVK1aseLpI+3p2PxQc/k+8j4yV
        gH0PYN948gT8C+U/0m+FSlYpAAAAAElFTkSuQmCC
      </shape>
      <shape name='Flags/italy.png'>
        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
      </shape>
    </shapes>
  </external>
</workbook>
